{
  "address": "0x1eB90323aE74E5FBc3241c1D074cFd0b117d7e8E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "precogToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKET_CREATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMarketCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "funding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overround",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralFunder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketOracle",
          "type": "address"
        }
      ],
      "name": "createCustomMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newMarketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "funding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overround",
          "type": "uint256"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newMarketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdMarkets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRedeemedShares",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "isClosedMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "marketAccountShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sells",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrew",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "marketBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        }
      ],
      "name": "marketBuyPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "tokenCost",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketCollateralInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "buyPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sellPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketRedeemShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketResultInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closed",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "marketSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        }
      ],
      "name": "marketSellPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "tokenReturn",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketSharesInfo",
      "outputs": [
        {
          "internalType": "int128",
          "name": "totalShares",
          "type": "int128"
        },
        {
          "internalType": "int128[]",
          "name": "sharesBalances",
          "type": "int128[]"
        },
        {
          "internalType": "int128",
          "name": "cost",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "totalBuys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSells",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "marketTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "marketWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "outcomes",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miningSeasons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPrecogMaster",
          "type": "address"
        }
      ],
      "name": "precogTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMarketCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "setBaseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setBaseOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMiningSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        }
      ],
      "name": "updateCurrentSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "marketCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketOracle",
          "type": "address"
        }
      ],
      "name": "updateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateTokenClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bc3bc9ab2ba684cd2307beeb68e2509d6e447290b04f891784a9b74a56ca29e",
  "receipt": {
    "to": null,
    "from": "0x6FEe026Ae8a76258063C9c67eC78F75b7815D101",
    "contractAddress": "0x1eB90323aE74E5FBc3241c1D074cFd0b117d7e8E",
    "transactionIndex": 103,
    "gasUsed": "4247034",
    "logsBloom": "0x000000040000000008000000000000000800000000000000000001002000000040a0000100000020020000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000020000400000000000000800000000000000000800000000000000000000000000000000000000000000004000000000010000000000000000000000000000000000000000000000000000000000000000000000001004000000000000000000000400000000010000000000000000000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa986b955ed05ce11765ed34b6451495f74920e21c744ad34ddbfefe38247d7e2",
    "transactionHash": "0x8bc3bc9ab2ba684cd2307beeb68e2509d6e447290b04f891784a9b74a56ca29e",
    "logs": [
      {
        "transactionIndex": 103,
        "blockNumber": 25593661,
        "transactionHash": "0x8bc3bc9ab2ba684cd2307beeb68e2509d6e447290b04f891784a9b74a56ca29e",
        "address": "0x1eB90323aE74E5FBc3241c1D074cFd0b117d7e8E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x0000000000000000000000006fee026ae8a76258063c9c67ec78f75b7815d101"
        ],
        "data": "0x",
        "logIndex": 264,
        "blockHash": "0xa986b955ed05ce11765ed34b6451495f74920e21c744ad34ddbfefe38247d7e2"
      },
      {
        "transactionIndex": 103,
        "blockNumber": 25593661,
        "transactionHash": "0x8bc3bc9ab2ba684cd2307beeb68e2509d6e447290b04f891784a9b74a56ca29e",
        "address": "0x1eB90323aE74E5FBc3241c1D074cFd0b117d7e8E",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 265,
        "blockHash": "0xa986b955ed05ce11765ed34b6451495f74920e21c744ad34ddbfefe38247d7e2"
      },
      {
        "transactionIndex": 103,
        "blockNumber": 25593661,
        "transactionHash": "0x8bc3bc9ab2ba684cd2307beeb68e2509d6e447290b04f891784a9b74a56ca29e",
        "address": "0x1eB90323aE74E5FBc3241c1D074cFd0b117d7e8E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x0000000000000000000000006fee026ae8a76258063c9c67ec78f75b7815d101"
        ],
        "data": "0x",
        "logIndex": 266,
        "blockHash": "0xa986b955ed05ce11765ed34b6451495f74920e21c744ad34ddbfefe38247d7e2"
      }
    ],
    "blockNumber": 25593661,
    "cumulativeGasUsed": "23946929",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7779ec685Aa0bf5483B3e0c15dAf246d2d978888",
    "0x9475A4C1BF5Fc80aE079303f14B523da19619c16"
  ],
  "numDeployments": 1,
  "solcInputHash": "43aa3b72848934934ed14adfb8ec85cb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"precogToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMarketCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overround\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralFunder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketOracle\",\"type\":\"address\"}],\"name\":\"createCustomMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overround\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRedeemedShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"isClosedMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"marketAccountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"marketBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"}],\"name\":\"marketBuyPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"tokenCost\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketCollateralInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketRedeemShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketResultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"marketSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"}],\"name\":\"marketSellPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"tokenReturn\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketSharesInfo\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"totalShares\",\"type\":\"int128\"},{\"internalType\":\"int128[]\",\"name\":\"sharesBalances\",\"type\":\"int128[]\"},{\"internalType\":\"int128\",\"name\":\"cost\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"totalBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSells\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"marketTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"marketWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomes\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningSeasons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrecogMaster\",\"type\":\"address\"}],\"name\":\"precogTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMarketCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setBaseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setBaseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"setMiningSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"}],\"name\":\"updateCurrentSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketOracle\",\"type\":\"address\"}],\"name\":\"updateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateTokenClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Marto (https://github.com/0xMarto)\",\"details\":\"Feel free to make any adjustments to the code (DMs are open @0xMarto)\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"marketAccountShares(uint256,address)\":{\"details\":\"Helper function to show market info about an specific account\",\"params\":{\"account\":\"The address of the account with shares of the market\",\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"balances\":\"Account shares balances by outcome\",\"buys\":\"Total amount of Buys in the market\",\"deposited\":\"Total amount of collateral deposited in the market\",\"redeemed\":\"Total amount of collateral redeemed from the market\",\"sells\":\"Total amount of Sells in the market\",\"withdrew\":\"Total amount of collateral withdrew from the market\"}},\"marketBuy(uint256,uint256,int128,uint256)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"maxAmountIn\":\"Max amount of tokens able to spend in this trade (front-run mitigation)\",\"outcome\":\"The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\",\"sharesAmount\":\"Number of outcome shares to buy (as a signed 64.64-bit fixed point number)\"},\"returns\":{\"amountIn\":\"Token amount used for buying the specified amount of shares\"}},\"marketBuyPrice(uint256,uint256,int128)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"outcome\":\"The outcome for which tokens are being bought\",\"sharesAmount\":\"Number of outcome shares to buy (as signed 64.64-bit fixed point number)\"},\"returns\":{\"tokenCost\":\"The token cost amount (as a signed 64.64-bit fixed point number)\"}},\"marketCollateralInfo(uint256)\":{\"details\":\"Helper function to show data of a collateral of a market\",\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"collateral\":\"Contract address of the market\",\"decimals\":\"Token decimals of the market\",\"name\":\"Token name of the market\",\"symbol\":\"Token symbol of the market\"}},\"marketPrices(uint256)\":{\"details\":\"Helper function to fast calculate market prediction and spreads\",\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"buyPrices\":\"buy price of 1 share for all outcomes (indexed by outcome)\",\"sellPrices\":\"sell price of 1 share for all outcomes (indexed by outcome)\"}},\"marketRedeemShares(uint256)\":{\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"shares\":\"Number of shares redeemed\"}},\"marketResultInfo(uint256)\":{\"details\":\"Helper function to show closed market info\",\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"closed\":\"Timestamp when the market result was reported\",\"reporter\":\"Address of the market result reporter (market oracle)\",\"result\":\"Reported market result outcome\"}},\"marketSell(uint256,uint256,int128,uint256)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"minAmountOut\":\"Min amount of tokens to obtain in this trade (front-run mitigation)\",\"outcome\":\"The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\",\"sharesAmount\":\"Number of outcome shares to sell (as a signed 64.64-bit fixed point number)\"},\"returns\":{\"amountOut\":\"Token amount obtain from selling the specified amount of shares\"}},\"marketSellPrice(uint256,uint256,int128)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"outcome\":\"The outcome for which shares are being sold\",\"sharesAmount\":\"The number of outcome shares to sell (as signed 64.64-bit fixed point number)\"},\"returns\":{\"tokenReturn\":\"The token return amount (as a signed 64.64-bit fixed point number)\"}},\"marketSharesInfo(uint256)\":{\"details\":\"Helper function to show general market shares info\",\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"cost\":\"Current liquidity of the market\",\"sharesBalances\":\"All shares balances (indexed by outcome)\",\"totalBuys\":\"Buys counter of the market\",\"totalSells\":\"Sells counter of the market\",\"totalShares\":\"Current total shares minted for all outcomes of the market\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"title\":\"PrecogMaster: Manager of prediction markets and Precog token claims\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasClaimed(address,uint256)\":{\"notice\":\"Helper function to check if some account has already claim current season tokens\"},\"hasRedeemedShares(uint256,address)\":{\"notice\":\"Helper function to check if some account has already redeemed market shares\"},\"isClosedMarket(uint256)\":{\"notice\":\"Helper function to check market close state\"},\"marketAccountShares(uint256,address)\":{\"notice\":\"Gets market account shares summary of the desired market\"},\"marketBuy(uint256,uint256,int128,uint256)\":{\"notice\":\"Buys shares for the specified outcome in the desired market\"},\"marketBuyPrice(uint256,uint256,int128)\":{\"notice\":\"Gets the cost of buying the specified amount of outcome shares in the desired market\"},\"marketCollateralInfo(uint256)\":{\"notice\":\"Gets the collateral info of the desired market\"},\"marketPrices(uint256)\":{\"notice\":\"Gets market buy and sell prices for all outcomes of the desired market\"},\"marketRedeemShares(uint256)\":{\"notice\":\"Redeems the total sender shares in the desired market\"},\"marketResultInfo(uint256)\":{\"notice\":\"Gets market result summary of the desired market\"},\"marketSell(uint256,uint256,int128,uint256)\":{\"notice\":\"Sells shares for the specified outcome in the desired market\"},\"marketSellPrice(uint256,uint256,int128)\":{\"notice\":\"Gets the return from selling the specified amount of outcome shares in the desired market\"},\"marketSharesInfo(uint256)\":{\"notice\":\"Gets the current market state info of the desired market\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrecogMasterV7.sol\":\"PrecogMasterV7\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0d24348f536f928d8b42789737bf34762faee065667ab530ea20969a9d9920d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/IPrecogMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title IPrecogMarket: simple interface to interact with all Precog Markets\\n * @author Marto (https://github.com/0xMarto)\\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\\n */\\ninterface IPrecogMarket {\\n    // Public market variables\\n    function owner() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function id() external view returns (uint256);\\n\\n    function totalOutcomes() external view returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function startTimestamp() external view returns (uint256);\\n\\n    function endTimestamp() external view returns (uint256);\\n\\n    function closeTimestamp() external view returns (uint256);\\n\\n    function result() external view returns (uint256);\\n\\n    function accountShares(address _account) external view returns (\\n        uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed\\n    );\\n\\n    // Events emitted by markets\\n    event SharesBought(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenIn);\\n    event SharesSold(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\\n    event SharesRedeemed(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Initializes the contract with the specified token\\n     * @param _token The address of the ERC-20 token to be used for buy, sell, and redeem shares\\n     */\\n    function initialize(address _token) external;\\n\\n    /**\\n     * @notice Sets up the market with the specified parameters\\n     * @param _id The unique identifier for the market\\n     * @param _oracle The address of the oracle that will report results\\n     * @param _totalOutcomes The number of possible outcomes for the market\\n     * @param _subsidy The initial funding used to seed the market (defined on initialized token)\\n     * @param _overround The AMM profit margin in basis points (bps) [recommended: (100 * _totalOutcomes)]\\n     */\\n    function setup(uint256 _id, address _oracle, uint256 _totalOutcomes, uint256 _subsidy, uint256 _overround) external;\\n\\n    /**\\n     * @notice Buys outcome shares for the specified outcome\\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome tokens to buy (as a signed 64.64-bit fixed point number)\\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\\n     */\\n    function buy(uint256 _outcome, int128 _amount) external returns (uint256 tokenCost);\\n\\n    /**\\n     * @notice Allows buying market shares for a specified account (limited to only Self or Owner)\\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\\n     * @param _account The address of the buyer\\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\\n     */\\n    function _buy(uint256 _outcome, int128 _amount, address _account) external returns (uint256 tokenCost);\\n\\n    /**\\n     * @notice Sells outcome shares for the specified outcome\\n     * @param _outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\\n     */\\n    function sell(uint256 _outcome, int128 _amount) external returns (uint256 tokenReturn);\\n\\n    /**\\n     * @notice Allows selling market shares from a specified account (limited to only Self or Owner)\\n     * @param _outcome The outcome for which tokens are being sold (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome tokens to sell (as a signed 64.64-bit fixed point number)\\n     * @param _account The address of the seller\\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\\n     */\\n    function _sell(uint256 _outcome, int128 _amount, address _account) external returns (uint256 tokenReturn);\\n\\n    /**\\n     * @notice Reports the result of the market (limited to only Oracle)\\n     * @param _id The unique identifier of the market\\n     * @param _outcome The outcome that is reported as the result of the market\\n     */\\n    function reportResult(uint256 _id, uint256 _outcome) external;\\n\\n    /**\\n     * @notice Redeems the current sender shares for the result of the market\\n     * @return redeemedShares The number of shares redeemed\\n     */\\n    function redeemShares() external returns (uint256 redeemedShares);\\n\\n    /**\\n     * @notice Redeems the received account shares for the result of the market (limited to only Self or Owner)\\n     * @param _account The address of the account with shares of the market\\n     * @return redeemedShares The number of shares redeemed\\n     */\\n    function _redeem(address _account) external returns (uint256 redeemedShares);\\n\\n    /**\\n     * @notice Redeems shares in batch for multiple accounts  (limited to only Oracle)\\n     * @param _accounts The list of accounts to redeem shares for\\n     * @dev The list of accounts could be calculated using the \\\"SharesBought\\\" event\\n     * @return redeems The number of successful redeems\\n     */\\n    function redeemBatch(address[] memory _accounts) external returns (uint256 redeems);\\n\\n    /**\\n     * @notice Withdraws any remaining liquidity from the market (limited to only owner)\\n     * @param _token The address of the ERC-20 token to withdraw\\n     */\\n    function withdraw(address _token) external;\\n\\n    /**\\n     * @notice Transfers the ownership of the contract to a new owner (limited to only current owner)\\n     * @param _newOwner The address of the new owner\\n     */\\n    function transferOwnership(address _newOwner) external;\\n\\n    /**\\n     * @notice Update the oracle address of the market (limited to only owner)\\n     * @param _newOracle The address of the EOA or contract that can close the market\\n     */\\n    function updateOracle(address _newOracle) external;\\n\\n    /**\\n     * @notice Updates the start and end timestamps for the market (limited to only owner)\\n     * @param _startTimestamp The timestamp when the market starts allowing trading\\n     * @param _endTimestamp The timestamp when the market stops allowing trading\\n     */\\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) external;\\n\\n    /**\\n     * @notice Gets the total collateral spent in the market\\n     * @return totalCost The total cost in the form of a signed 64.64-bit fixed point number\\n     */\\n    function cost() external view returns (int128 totalCost);\\n\\n    /**\\n     * @notice Gets the cost of buying the specified amount of outcome tokens\\n     * @param _outcome The outcome for which tokens are being bought\\n     * @param _amount The number of outcome tokens to buy (as signed 64.64-bit fixed point number)\\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\\n     */\\n    function buyPrice(uint256 _outcome, int128 _amount) external view returns (int128 tokenCost);\\n\\n    /**\\n     * @notice Gets the return from selling the specified amount of outcome tokens\\n     * @param _outcome The outcome for which tokens are being sold\\n     * @param _amount The number of outcome tokens to sell (as signed 64.64-bit fixed point number)\\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\\n     */\\n    function sellPrice(uint256 _outcome, int128 _amount) external view returns (int128 tokenReturn);\\n\\n    /**\\n     * @notice Gets the current market state information\\n     * @return totalShares The current total shares minted for all outcomes of the market\\n     * @return sharesBalances All shares balances (indexed by outcome)\\n     * @return currentCost The current liquidity of the market\\n     * @return totalBuys Buys counter of the market\\n     * @return totalSells Sells counter of the market\\n     */\\n    function getMarketInfo() external view returns (\\n        int128 totalShares, int128[] memory sharesBalances, int128 currentCost, uint256 totalBuys, uint256 totalSells\\n    );\\n\\n    /**\\n     * @notice Get current market buy and sell prices for all outcomes\\n     * @dev Helper function to fast calculate market prediction and spreads\\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\\n     */\\n    function getPrices() external view returns (uint256[] memory buyPrices, uint256[] memory sellPrices);\\n\\n    /**\\n     * @notice Gets the amount of shares that an account owns for all outcomes\\n     * @param _account The address of the account with shares of the market\\n     * @return balances The balances of shares for all outcomes (indexed by outcome)\\n     */\\n    function getAccountOutcomeBalances(address _account) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x49673e3221d08716f383d19b5cd8db0de52fc0936d086e6a025de9b5e5fba2bd\",\"license\":\"MIT\"},\"contracts/IPrecogToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPrecogToken: interface to interact with Precog Token\\r\\n */\\r\\ninterface IPrecogToken is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @notice Mint new tokens for the specified address (limited to only owner)\\r\\n     * @param to The address of the new tokens receiver\\r\\n     * @param amount The amount of tokens to be minted\\r\\n     * @dev Emits a {Transfer} event from the zero address as source\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Burn already minted tokens from the specified address (limited to only owner)\\r\\n     * @param from The address of the token source\\r\\n     * @param amount The amount of tokens to be burn\\r\\n     * @dev Emits a {Transfer} event to the zero address as destination\\r\\n     */\\r\\n    function burn(address from, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer tokens from one address to another (limited to only owner)\\r\\n     * @param from The address of the token source\\r\\n     * @param to The address of the token receiver\\r\\n     * @dev Emits a {Transfer} event\\r\\n     */\\r\\n    function move(address from, address to, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ownership of the contract to a new address (limited to only owner)\\r\\n     * @param newOwner The address of the new owner\\r\\n     * @dev Emits a {OwnershipTransferred} event with the previous and new owner addresses\\r\\n     */\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current owner of the contract\\r\\n     * @return Address of the current owner\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when ownership of the contract is transferred to a new address\\r\\n     */\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n}\\r\\n\",\"keccak256\":\"0x21ba7318f9ccd5234489f39e6e4f999f3d17e81a17783daf000650d1f5b13155\",\"license\":\"MIT\"},\"contracts/PrecogMasterV7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./IPrecogToken.sol\\\";\\r\\nimport \\\"./IPrecogMarket.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PrecogMaster: Manager of prediction markets and Precog token claims\\r\\n * @author Marto (https://github.com/0xMarto)\\r\\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\\r\\n */\\r\\ncontract PrecogMasterV7 is AccessControl {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant CALLER_ROLE = keccak256(\\\"CALLER_ROLE\\\");\\r\\n    bytes32 public constant MARKET_CREATOR_ROLE = keccak256(\\\"MARKET_CREATOR_ROLE\\\");\\r\\n\\r\\n    // State objects\\r\\n    struct TokenClaim {\\r\\n        address account;\\r\\n        uint256 user;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 claimedTimestamp;\\r\\n    }\\r\\n\\r\\n    struct MiningSeason {\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 maxUserClaim;\\r\\n        uint256 maxTotalClaim;\\r\\n        uint256 maxTotalMint;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 mintedAmount;\\r\\n    }\\r\\n\\r\\n    struct MarketInfo {\\r\\n        string name;\\r\\n        string description;\\r\\n        string category;\\r\\n        string outcomes;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        address creator;\\r\\n        address market;\\r\\n    }\\r\\n\\r\\n    struct MarketConfig {\\r\\n        uint256 totalOutcomes;\\r\\n        uint256 funding;\\r\\n        uint256 overround;\\r\\n        address collateralToken;\\r\\n        address collateralFunder;\\r\\n        address marketOracle;\\r\\n    }\\r\\n\\r\\n    // Public variables\\r\\n    address public token;  // Claim token and default collateral for non custom markets\\r\\n    address private oracle; // default oracle for all non custom markets\\r\\n    address private market; // base market recipe for all created markets\\r\\n    uint256 public createdMarkets;  // Total markets created\\r\\n    uint256 public currentSeason;  // Current claiming season number\\r\\n    mapping(address => TokenClaim) public accountTokenClaims;\\r\\n    mapping(uint256 => TokenClaim) public userTokenClaims;\\r\\n    mapping(uint256 => MiningSeason) public miningSeasons;\\r\\n    mapping(uint256 => MarketInfo) public markets;\\r\\n\\r\\n    // Events emitted\\r\\n    event TokensClaimed(address indexed account, uint256 indexed user, uint256 amount, uint256 timestamp);\\r\\n    event TokensMinted(address indexed account, uint256 amount, uint256 timestamp);\\r\\n    event MarketCreated(address indexed creator, uint256 id, address market);\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Only Admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        require(hasRole(CALLER_ROLE, msg.sender), \\\"Only Caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMarketCreator() {\\r\\n        require(hasRole(MARKET_CREATOR_ROLE, msg.sender), \\\"Only Market Creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions\\r\\n    constructor(address precogToken, address initialAdmin) {\\r\\n        // Grant DEFAULT_ADMIN_ROLE to the initial admin (this is the admin to the ADMIN_ROLE list)\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        // Set ADMIN_ROLE as admin of CALLER_ROLE list\\r\\n        _setRoleAdmin(CALLER_ROLE, ADMIN_ROLE);\\r\\n        // Set already deployed precogToken as claimable token and collateral token for all Markets\\r\\n        token = precogToken;\\r\\n        // Grant ADMIN_ROLE to initial Admin (this enables to call \\\"addAdmin\\\" helper function)\\r\\n        _setupRole(ADMIN_ROLE, initialAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buys shares for the specified outcome in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param sharesAmount Number of outcome shares to buy (as a signed 64.64-bit fixed point number)\\r\\n     * @param maxAmountIn Max amount of tokens able to spend in this trade (front-run mitigation)\\r\\n     * @return amountIn Token amount used for buying the specified amount of shares\\r\\n     */\\r\\n    function marketBuy(\\r\\n        uint256 marketId,\\r\\n        uint256 outcome,\\r\\n        int128 sharesAmount,\\r\\n        uint256 maxAmountIn\\r\\n    ) external returns (uint256 amountIn) {\\r\\n        require(block.timestamp >= markets[marketId].startTimestamp, 'Market not started');\\r\\n        require(block.timestamp <= markets[marketId].endTimestamp, 'Market already ended');\\r\\n\\r\\n        // Get maxAmountIn of tokens from the buyer to Master (this reverts if there is no balance on buyer)\\r\\n        address marketCollateral = IPrecogMarket(markets[marketId].market).token();\\r\\n        if (marketCollateral == token) {\\r\\n            // Case PrecogToken market: just move the max amount to this contract (no approve needed)\\r\\n            IPrecogToken(token).move(msg.sender, address(this), maxAmountIn);\\r\\n        } else {\\r\\n            // Case custom token market: try to transfer from sender (this reverts is there is no allowance)\\r\\n            IERC20(marketCollateral).safeTransferFrom(msg.sender, address(this), maxAmountIn);\\r\\n        }\\r\\n\\r\\n        // Send remote BUY to market contract (to be assigned to the sender)\\r\\n        amountIn = IPrecogMarket(markets[marketId].market)._buy(outcome, sharesAmount, msg.sender);\\r\\n        require(amountIn <= maxAmountIn, \\\"Max amount reach!\\\");  // Just in case there is some balance on this contract\\r\\n\\r\\n        // If there is any leftover, return tokens to sender\\r\\n        if (amountIn < maxAmountIn) {\\r\\n            IERC20(marketCollateral).safeTransfer(msg.sender, maxAmountIn.sub(amountIn));\\r\\n        }\\r\\n        return amountIn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sells shares for the specified outcome in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param sharesAmount Number of outcome shares to sell (as a signed 64.64-bit fixed point number)\\r\\n     * @param minAmountOut Min amount of tokens to obtain in this trade (front-run mitigation)\\r\\n     * @return amountOut Token amount obtain from selling the specified amount of shares\\r\\n     */\\r\\n    function marketSell(\\r\\n        uint256 marketId,\\r\\n        uint256 outcome,\\r\\n        int128 sharesAmount,\\r\\n        uint256 minAmountOut\\r\\n    ) external returns (uint256 amountOut) {\\r\\n        require(block.timestamp >= markets[marketId].startTimestamp, \\\"Market not started\\\");\\r\\n        require(block.timestamp <= markets[marketId].endTimestamp, \\\"Market already ended\\\");\\r\\n\\r\\n        // Send remote SELL to market contract (to be assigned to the sender)\\r\\n        amountOut = IPrecogMarket(markets[marketId].market)._sell(outcome, sharesAmount, msg.sender);\\r\\n\\r\\n        // Check that the sell price was equal or higher seller expected\\r\\n        require(amountOut >= minAmountOut, \\\"Min amount reach!\\\");\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems the total sender shares in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return shares Number of shares redeemed\\r\\n     */\\r\\n    function marketRedeemShares(uint256 marketId) external returns (uint256 shares) {\\r\\n        return IPrecogMarket(markets[marketId].market)._redeem(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the cost of buying the specified amount of outcome shares in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome for which tokens are being bought\\r\\n     * @param sharesAmount Number of outcome shares to buy (as signed 64.64-bit fixed point number)\\r\\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\\r\\n     */\\r\\n    function marketBuyPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view\\r\\n    returns (int128 tokenCost) {\\r\\n        return IPrecogMarket(markets[marketId].market).buyPrice(outcome, sharesAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the return from selling the specified amount of outcome shares in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome for which shares are being sold\\r\\n     * @param sharesAmount The number of outcome shares to sell (as signed 64.64-bit fixed point number)\\r\\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\\r\\n     */\\r\\n    function marketSellPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view\\r\\n    returns (int128 tokenReturn) {\\r\\n        return IPrecogMarket(markets[marketId].market).sellPrice(outcome, sharesAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets market buy and sell prices for all outcomes of the desired market\\r\\n     * @dev Helper function to fast calculate market prediction and spreads\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\\r\\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\\r\\n     */\\r\\n    function marketPrices(uint256 marketId) external view\\r\\n    returns (uint256[] memory buyPrices, uint256[] memory sellPrices) {\\r\\n        return IPrecogMarket(markets[marketId].market).getPrices();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets market result summary of the desired market\\r\\n     * @dev Helper function to show closed market info\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return result Reported market result outcome\\r\\n     * @return closed Timestamp when the market result was reported\\r\\n     * @return reporter Address of the market result reporter (market oracle)\\r\\n     */\\r\\n    function marketResultInfo(uint256 marketId) external view\\r\\n    returns (uint256 result, uint256 closed, address reporter) {\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n\\r\\n        // Get market result info\\r\\n        result = createdMarket.result();\\r\\n        closed = createdMarket.closeTimestamp();\\r\\n        reporter = createdMarket.oracle();\\r\\n        return (result, closed, reporter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets market account shares summary of the desired market\\r\\n     * @dev Helper function to show market info about an specific account\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param account The address of the account with shares of the market\\r\\n     * @return buys Total amount of Buys in the market\\r\\n     * @return sells Total amount of Sells in the market\\r\\n     * @return deposited Total amount of collateral deposited in the market\\r\\n     * @return withdrew Total amount of collateral withdrew from the market\\r\\n     * @return redeemed Total amount of collateral redeemed from the market\\r\\n     * @return balances Account shares balances by outcome\\r\\n     */\\r\\n    function marketAccountShares(uint256 marketId, address account) external view\\r\\n    returns (uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed,\\r\\n        uint256[] memory balances) {\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n        // Get sharesInfo on received account for selected market\\r\\n        (buys, sells, deposited, withdrew, redeemed) = createdMarket.accountShares(account);\\r\\n        // Get outcome balances on received account for selected market\\r\\n        balances = createdMarket.getAccountOutcomeBalances(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current market state info of the desired market\\r\\n     * @dev Helper function to show general market shares info\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return totalShares Current total shares minted for all outcomes of the market\\r\\n     * @return sharesBalances All shares balances (indexed by outcome)\\r\\n     * @return cost Current liquidity of the market\\r\\n     * @return totalBuys Buys counter of the market\\r\\n     * @return totalSells Sells counter of the market\\r\\n     */\\r\\n    function marketSharesInfo(uint256 marketId) external view\\r\\n    returns (int128 totalShares, int128[] memory sharesBalances, int128 cost, uint256 totalBuys, uint256 totalSells) {\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n        (totalShares, sharesBalances, cost, totalBuys, totalSells) = createdMarket.getMarketInfo();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the collateral info of the desired market\\r\\n     * @dev Helper function to show data of a collateral of a market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return collateral Contract address of the market\\r\\n     * @return name Token name of the market\\r\\n     * @return symbol Token symbol of the market\\r\\n     * @return decimals Token decimals of the market\\r\\n     */\\r\\n    function marketCollateralInfo(uint256 marketId) external view\\r\\n    returns (address collateral, string memory name, string memory symbol, uint8 decimals) {\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n        IPrecogToken collateral = IPrecogToken(createdMarket.token());\\r\\n        return (address(collateral), collateral.name(), collateral.symbol(), collateral.decimals());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to check market close state\\r\\n     */\\r\\n    function isClosedMarket(uint256 marketId) external view returns (bool) {\\r\\n        return IPrecogMarket(markets[marketId].market).closeTimestamp() > block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to check if some account has already redeemed market shares\\r\\n     */\\r\\n    function hasRedeemedShares(uint256 marketId, address account) external view returns (bool) {\\r\\n        (,,,,uint256 redeemed) = IPrecogMarket(markets[marketId].market).accountShares(account);\\r\\n        return redeemed > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to check if some account has already claim current season tokens\\r\\n     */\\r\\n    function hasClaimed(address account, uint256 user) external view returns (bool) {\\r\\n        return accountTokenClaims[account].claimedTimestamp != 0 || userTokenClaims[user].claimedTimestamp != 0;\\r\\n    }\\r\\n\\r\\n    // Whitelisted functions: Only caller & Only market creator\\r\\n    function claimToken(address account, uint256 user, uint256 amount) external onlyCaller returns (bool) {\\r\\n        // Validate token claim\\r\\n        require(accountTokenClaims[account].claimedTimestamp == 0, \\\"Account already claimed\\\");\\r\\n        require(userTokenClaims[user].claimedTimestamp == 0, \\\"User already claimed\\\");\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(block.timestamp >= season.startTimestamp, \\\"Season not started\\\");\\r\\n            require(block.timestamp < season.endTimestamp, \\\"Season already ended\\\");\\r\\n            require(amount <= season.maxUserClaim, \\\"Invalid user claim amount\\\");\\r\\n            require(amount.add(season.claimedAmount) <= season.maxTotalClaim, \\\"Season max token claims\\\");\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints\\\");\\r\\n        }\\r\\n\\r\\n        // Register current token claim\\r\\n        TokenClaim memory claim = TokenClaim({\\r\\n            account: account,\\r\\n            user: user,\\r\\n            claimedAmount: amount,\\r\\n            claimedTimestamp: block.timestamp\\r\\n        });\\r\\n        accountTokenClaims[account] = claim;\\r\\n        userTokenClaims[user] = claim;\\r\\n        season.claimedAmount = season.claimedAmount.add(amount);\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(account, amount);\\r\\n\\r\\n        emit TokensClaimed(account, user, amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function createMarket(\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        string[] memory outcomes,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address creator,\\r\\n        uint256 funding,\\r\\n        uint256 overround\\r\\n    ) external onlyCaller returns (uint256 newMarketId) {\\r\\n        // Mint tokens to seed the new market\\r\\n        IPrecogToken(token).mint(address(this), funding);\\r\\n\\r\\n        // Pack all received information (with defaults), create new market and return new market id\\r\\n        MarketInfo memory marketInfo = MarketInfo(\\r\\n            name, description, category, arrayToCSV(outcomes), startTimestamp, endTimestamp, creator, address(0)\\r\\n        );\\r\\n        MarketConfig memory marketConfig = MarketConfig(\\r\\n            outcomes.length, // Total number of outcomes\\r\\n            funding,         // Initial supply of the market\\r\\n            overround,       // AMM profit margin\\r\\n            token,           // collateralToken: Precog Token\\r\\n            address(this),   // collateralFunder: This contract\\r\\n            oracle           // marketOracle: Preset oracle\\r\\n        );\\r\\n        return _createMarket(marketInfo, marketConfig);\\r\\n    }\\r\\n\\r\\n    function createCustomMarket(\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        string[] memory outcomes,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address creator,\\r\\n        uint256 funding,\\r\\n        uint256 overround,\\r\\n        address collateralToken,\\r\\n        address collateralFunder,\\r\\n        address marketOracle\\r\\n    ) public onlyMarketCreator returns (uint256 newMarketId) {\\r\\n        // Pack all received information, create new market and return new market id\\r\\n        MarketInfo memory marketInfo = MarketInfo(\\r\\n            name, description, category, arrayToCSV(outcomes), startTimestamp, endTimestamp, creator, address(0)\\r\\n        );\\r\\n        MarketConfig memory marketConfig = MarketConfig(\\r\\n            outcomes.length, funding, overround, collateralToken, collateralFunder, marketOracle\\r\\n        );\\r\\n        return _createMarket(marketInfo, marketConfig);\\r\\n    }\\r\\n\\r\\n    function _createMarket(MarketInfo memory info, MarketConfig memory config) internal returns (uint256 newMarketId) {\\r\\n        // Deploy a new market contract and initialize it with the collateral token\\r\\n        address newMarketAddress = Clones.clone(market);\\r\\n        IPrecogMarket newMarket = IPrecogMarket(newMarketAddress);\\r\\n        newMarket.initialize(config.collateralToken);\\r\\n\\r\\n        // Get funding amount to seed the new market (optimization: except in a self-funder usecase)\\r\\n        if (config.collateralFunder != address(this)) {\\r\\n            IERC20(config.collateralToken).safeTransferFrom(config.collateralFunder, address(this), config.funding);\\r\\n        }\\r\\n        // Pre approve all trades with\\r\\n        IERC20(config.collateralToken).approve(newMarketAddress, type(uint256).max);\\r\\n\\r\\n        // Get new Id and Setup deployed new market\\r\\n        newMarketId = createdMarkets;\\r\\n        newMarket.setup(newMarketId, config.marketOracle, config.totalOutcomes, config.funding, config.overround);\\r\\n        newMarket.updateDates(info.startTimestamp, info.endTimestamp);\\r\\n\\r\\n        // Save created market address in received info and save it in local storage (indexed by id)\\r\\n        info.market = newMarketAddress;\\r\\n        markets[newMarketId] = info;\\r\\n\\r\\n        // Increase created markets counter and return new market id\\r\\n        createdMarkets = createdMarkets.add(1);\\r\\n\\r\\n        emit MarketCreated(info.creator, newMarketId, newMarketAddress);\\r\\n        return newMarketId;\\r\\n    }\\r\\n\\r\\n    function arrayToCSV(string[] memory array) internal pure returns (string memory) {\\r\\n        bytes memory csvBytes;\\r\\n        for (uint i = 0; i < array.length; i++) {\\r\\n            csvBytes = abi.encodePacked(csvBytes, array[i]);\\r\\n            if (i < array.length - 1) {\\r\\n                csvBytes = abi.encodePacked(csvBytes, \\\",\\\");\\r\\n            }\\r\\n        }\\r\\n        return string(csvBytes);\\r\\n    }\\r\\n\\r\\n    // Whitelisted functions: Only admin\\r\\n    function addMarketCreator(address account) external onlyAdmin {\\r\\n        grantRole(MARKET_CREATOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeMarketCreator(address account) external onlyAdmin {\\r\\n        revokeRole(MARKET_CREATOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function addCaller(address account) external onlyAdmin {\\r\\n        grantRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeCaller(address account) external onlyAdmin {\\r\\n        revokeRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function addAdmin(address account) external onlyAdmin {\\r\\n        grantRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address account) external onlyAdmin {\\r\\n        revokeRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function updateCurrentSeason(uint256 seasonIndex) external onlyAdmin {\\r\\n        currentSeason = seasonIndex;\\r\\n    }\\r\\n\\r\\n    function setMiningSeason(\\r\\n        uint256 seasonIndex,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        uint256 maxUserClaim,\\r\\n        uint256 maxTotalClaim,\\r\\n        uint256 maxTotalMint,\\r\\n        uint256 claimedAmount,\\r\\n        uint256 mintedAmount\\r\\n    ) external onlyAdmin {\\r\\n        miningSeasons[seasonIndex] = MiningSeason({\\r\\n            startTimestamp: startTimestamp,\\r\\n            endTimestamp: endTimestamp,\\r\\n            maxUserClaim: maxUserClaim,\\r\\n            maxTotalClaim: maxTotalClaim,\\r\\n            maxTotalMint: maxTotalMint,\\r\\n            claimedAmount: claimedAmount,\\r\\n            mintedAmount: mintedAmount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function setBaseOracle(address _oracle) external onlyAdmin {\\r\\n        oracle = _oracle;\\r\\n    }\\r\\n\\r\\n    function setBaseMarket(address _market) external onlyAdmin {\\r\\n        market = _market;\\r\\n    }\\r\\n\\r\\n    function updateMarket(\\r\\n        uint256 id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        string[] memory outcomes,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address marketCreator,\\r\\n        address marketOracle\\r\\n    ) external onlyAdmin {\\r\\n        if (bytes(name).length > 0) {\\r\\n            markets[id].name = name;\\r\\n        }\\r\\n        if (bytes(description).length > 0) {\\r\\n            markets[id].description = description;\\r\\n        }\\r\\n        if (bytes(category).length > 0) {\\r\\n            markets[id].category = category;\\r\\n        }\\r\\n        if (outcomes.length > 0) {\\r\\n            // Only updates outcome labels (not total possible outcomes)\\r\\n            markets[id].outcomes = arrayToCSV(outcomes);\\r\\n        }\\r\\n        if (marketCreator != address(0)) {\\r\\n            markets[id].creator = marketCreator;\\r\\n        }\\r\\n        if (marketOracle != address(0)) {\\r\\n            IPrecogMarket(markets[id].market).updateOracle(marketOracle);\\r\\n        }\\r\\n        bool updateDates = false;\\r\\n        if (startTimestamp > 0) {\\r\\n            markets[id].startTimestamp = startTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (endTimestamp > 0) {\\r\\n            markets[id].endTimestamp = endTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (updateDates) {\\r\\n            IPrecogMarket(markets[id].market).updateDates(markets[id].startTimestamp, markets[id].endTimestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketWithdraw(uint256 marketId, address marketToken) external onlyAdmin {\\r\\n        IPrecogMarket(markets[marketId].market).withdraw(marketToken);\\r\\n    }\\r\\n\\r\\n    function marketTransferOwnership(uint256 marketId, address newOwner) external onlyAdmin {\\r\\n        IPrecogMarket(markets[marketId].market).transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function updateTokenClaim(address account, uint256 amount, uint256 timestamp) external onlyAdmin {\\r\\n        // Used to reset token claims\\r\\n        accountTokenClaims[account].claimedAmount = amount;\\r\\n        accountTokenClaims[account].claimedTimestamp = timestamp;\\r\\n        uint256 user = accountTokenClaims[account].user;\\r\\n        userTokenClaims[user].claimedAmount = amount;\\r\\n        userTokenClaims[user].claimedTimestamp = timestamp;\\r\\n    }\\r\\n\\r\\n    function precogMint(address to, uint256 amount) external onlyAdmin {\\r\\n        // Validate token mint\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints\\\");\\r\\n        }\\r\\n\\r\\n        // Register token mint\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(to, amount);\\r\\n\\r\\n        emit TokensMinted(to, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function precogBurn(address from, uint256 amount) external onlyAdmin {\\r\\n        IPrecogToken(token).burn(from, amount);\\r\\n    }\\r\\n\\r\\n    function precogTransferOwnership(address newPrecogMaster) external onlyAdmin {\\r\\n        IPrecogToken(token).transferOwnership(newPrecogMaster);\\r\\n    }\\r\\n\\r\\n    function withdraw(address _token) public onlyAdmin {\\r\\n        if (_token == address(0)) {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        } else {\\r\\n            IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c69d3f080581adf5f641c379013b938c92d8c5fd262d580f518209a6eceeed4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004b1938038062004b1983398101604081905262000034916200023d565b62000041600082620000ba565b6200007c7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5060008051602062004af9833981519152620000ca565b600180546001600160a01b0319166001600160a01b038416179055620000b260008051602062004af983398151915282620000ba565b505062000274565b620000c682826200011c565b5050565b600082815260208190526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526020829052604090912060020155565b6000828152602081815260409091206200014191839062002ae562000195821b17901c565b15620000c65762000151620001b5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001ac836001600160a01b038416620001b9565b90505b92915050565b3390565b6000620001c7838362000208565b620001ff57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001af565b506000620001af565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200023857600080fd5b919050565b6000806040838503121562000250578182fd5b6200025b8362000220565b91506200026b6020840162000220565b90509250929050565b61487580620002846000396000f3fe608060405234801561001057600080fd5b506004361061034c5760003560e01c80639010d07c116101bd578063baf81b8f116100f9578063d547741f116100a2578063eef21cd21161007c578063eef21cd214610765578063f2fd594314610778578063f944a5ff1461078b578063fc0c546a1461079e5761034c565b8063d547741f1461072c578063d6fb7d791461073f578063de02852a146107525761034c565b8063bcb39621116100d3578063bcb39621146106fe578063ca15c87314610706578063d33bfe4f146107195761034c565b8063baf81b8f146106a8578063bb31675a146106cb578063bc05b806146106de5761034c565b8063a9683f6e11610166578063b293109611610140578063b293109614610654578063b590b56f14610667578063b608b8f41461066f578063ba2e3684146106955761034c565b8063a9683f6e14610601578063ae42820c14610625578063b1283e771461062d5761034c565b80639c6c412e116101975780639c6c412e146105d3578063a15fd10f146105e6578063a217fddf146105f95761034c565b80639010d07c1461058d57806391d14854146105ad5780639971537c146105c05761034c565b80633204fff71161028c57806352438beb1161023557806370f4a7ae1161020f57806370f4a7ae14610557578063747293fb1461056a57806375b238fc1461057d578063774237fc146105855761034c565b806352438beb1461051e5780636354eeb31461053157806370480275146105445761034c565b80633dc2724a116102665780633dc2724a146104d35780634836e867146104e657806351cff8d91461050b5761034c565b80633204fff71461048b578063355987cd146104ad57806336568abe146104c05761034c565b806314aebade116102f957806325ceaea6116102d357806325ceaea6146104325780632f2ff15d146104525780632fb1541b1461046557806330829a20146104785761034c565b806314aebade146103eb5780631785f53c1461040c578063248a9ca31461041f5761034c565b8063127e9cbd1161032a578063127e9cbd146103a2578063129c7ce4146103c557806314ae3ffc146103d85761034c565b8063020917fe146103515780630c87235e1461036657806312357c701461038f575b600080fd5b61036461035f36600461386f565b6107a6565b005b610379610374366004613b84565b610848565b604051610386919061417f565b60405180910390f35b61037961039d366004613c64565b61099f565b6103b56103b036600461386f565b610aaa565b6040516103869493929190614129565b6103796103d3366004613ec7565b610adb565b6103646103e63660046138a7565b610c16565b6103fe6103f93660046139ba565b610ccb565b60405161038692919061414f565b61036461041a36600461386f565b610d7c565b61037961042d3660046139ba565b610dcb565b6104456104403660046139ba565b610de3565b6040516103869190614174565b6103646104603660046139d2565b610e8e565b610364610473366004613f44565b610ef5565b6103646104863660046139d2565b610f9a565b61049e6104993660046139ba565b611027565b60405161038693929190614605565b6103646104bb36600461386f565b6111bf565b6103646104ce3660046139d2565b61121d565b6103b56104e13660046139ba565b61127e565b6104f96104f43660046139d2565b6112af565b60405161038696959493929190614624565b61036461051936600461386f565b6113fc565b61036461052c366004613da8565b611501565b61036461053f3660046138d2565b611797565b61036461055236600461386f565b611811565b61036461056536600461386f565b61185d565b61036461057836600461386f565b6118b3565b610379611911565b610379611923565b6105a061059b366004613a01565b611947565b604051610386919061408f565b6104456105bb3660046139d2565b611968565b6104456105ce3660046139d2565b611980565b6104456105e13660046138d2565b611a1d565b6103646105f436600461386f565b611d32565b610379611d90565b61061461060f3660046139ba565b611d95565b604051610386959493929190614196565b610379611e5a565b61064061063b3660046139ba565b611e7e565b6040516103869897969594939291906141fe565b6104456106623660046138a7565b612105565b610379612143565b61068261067d3660046139ba565b612149565b6040516103869796959493929190614661565b6103646106a33660046139d2565b612186565b6106bb6106b63660046139ba565b6121fa565b60405161038694939291906140c7565b6103646106d936600461386f565b6123fa565b6106f16106ec366004613e8f565b612450565b6040516103869190614188565b6103796124fa565b6103796107143660046139ba565b612500565b610379610727366004613ec7565b612517565b61036461073a3660046139d2565b6127a3565b61036461074d3660046139ba565b6127fc565b6103646107603660046138a7565b612835565b61036461077336600461386f565b612974565b6103796107863660046139ba565b6129d2565b6106f1610799366004613e8f565b612a7c565b6105a0612ad6565b6107be6000805160206147c783398151915233611968565b6107e35760405162461bcd60e51b81526004016107da906144dc565b60405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b039091169063f2fde38b9061081390849060040161408f565b600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b5050505050565b60006108747f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5033611968565b6108905760405162461bcd60e51b81526004016107da906143c9565b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906108c29030908790600401614110565b600060405180830381600087803b1580156108dc57600080fd5b505af11580156108f0573d6000803e3d6000fd5b5050505060006040518061010001604052808c81526020018b81526020018a815260200161091d8a612afa565b815260208082018a905260408083018a90526001600160a01b03808a166060808601919091526000608095860152825160c0810184528e5181529384018a9052918301889052600154811691830191909152309282019290925260025490911660a082015290915061098f8282612b7e565b9c9b505050505050505050505050565b60006109cb7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979533611968565b6109e75760405162461bcd60e51b81526004016107da90614392565b60006040518061010001604052808f81526020018e81526020018d8152602001610a108d612afa565b81526020018b81526020018a8152602001896001600160a01b0316815260200160006001600160a01b0316815250905060006040518060c001604052808d518152602001898152602001888152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152509050610a978282612b7e565b9f9e505050505050505050505050505050565b60066020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b600084815260096020526040812060040154421015610b0c5760405162461bcd60e51b81526004016107da9061435b565b600085815260096020526040902060050154421115610b3d5760405162461bcd60e51b81526004016107da906142b6565b600085815260096020526040908190206007015490517f898b51a70000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063898b51a790610b9a908790879033906004016145d5565b602060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190613d90565b905081811015610c0e5760405162461bcd60e51b81526004016107da906142ed565b949350505050565b610c2e6000805160206147c783398151915233611968565b610c4a5760405162461bcd60e51b81526004016107da906144dc565b6001546040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639dc29fac90610c959085908590600401614110565b600060405180830381600087803b158015610caf57600080fd5b505af1158015610cc3573d6000803e3d6000fd5b505050505050565b6000818152600960205260408082206007015481517fbd9a548b000000000000000000000000000000000000000000000000000000008152915160609384936001600160a01b039093169263bd9a548b9260048083019392829003018186803b158015610d3757600080fd5b505afa158015610d4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d739190810190613939565b91509150915091565b610d946000805160206147c783398151915233611968565b610db05760405162461bcd60e51b81526004016107da906144dc565b610dc86000805160206147c7833981519152826127a3565b50565b6000818152602081905260409020600201545b919050565b60008181526009602090815260408083206007015481517f052d7c00000000000000000000000000000000000000000000000000000000008152915142936001600160a01b039092169263052d7c00926004808301939192829003018186803b158015610e4f57600080fd5b505afa158015610e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e879190613d90565b1192915050565b600082815260208190526040902060020154610eac906105bb612eff565b610ee75760405162461bcd60e51b815260040180806020018281038252602f815260200180614768602f913960400191505060405180910390fd5b610ef18282612f03565b5050565b610f0d6000805160206147c783398151915233611968565b610f295760405162461bcd60e51b81526004016107da906144dc565b6040805160e0810182529788526020808901978852888201968752606089019586526080890194855260a0890193845260c089019283526000998a52600890529097209551865593516001860155915160028501555160038401555160048301555160058201559051600690910155565b610fb26000805160206147c783398151915233611968565b610fce5760405162461bcd60e51b81526004016107da906144dc565b600082815260096020526040908190206007015490517f51cff8d90000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906351cff8d990610c9590849060040161408f565b60008181526009602090815260408083206007015481517f653721470000000000000000000000000000000000000000000000000000000081529151849384936001600160a01b03909316928392636537214792600480840193919291829003018186803b15801561109857600080fd5b505afa1580156110ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d09190613d90565b9350806001600160a01b031663052d7c006040518163ffffffff1660e01b815260040160206040518083038186803b15801561110b57600080fd5b505afa15801561111f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111439190613d90565b9250806001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561117e57600080fd5b505afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b6919061388b565b93959294505050565b6111d76000805160206147c783398151915233611968565b6111f35760405162461bcd60e51b81526004016107da906144dc565b610dc87fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979582610e8e565b611225612eff565b6001600160a01b0316816001600160a01b0316146112745760405162461bcd60e51b815260040180806020018281038252602f815260200180614811602f913960400191505060405180910390fd5b610ef18282612f6c565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6000828152600960205260408082206007015490516352c8b2f960e01b815282918291829182916060916001600160a01b03169081906352c8b2f9906112f9908b9060040161408f565b60a06040518083038186803b15801561131157600080fd5b505afa158015611325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113499190613f05565b6040517f05b4b371000000000000000000000000000000000000000000000000000000008152949b50929950909750955093506001600160a01b038216906305b4b3719061139b908b9060040161408f565b60006040518083038186803b1580156113b357600080fd5b505afa1580156113c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113ef9190810190613906565b9150509295509295509295565b6114146000805160206147c783398151915233611968565b6114305760405162461bcd60e51b81526004016107da906144dc565b6001600160a01b0381166114705760405133904780156108fc02916000818181858888f1935050505015801561146a573d6000803e3d6000fd5b50610dc8565b610dc833826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114a0919061408f565b60206040518083038186803b1580156114b857600080fd5b505afa1580156114cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f09190613d90565b6001600160a01b0384169190612fd5565b6115196000805160206147c783398151915233611968565b6115355760405162461bcd60e51b81526004016107da906144dc565b87511561155d576000898152600960209081526040909120895161155b928b01906136ab565b505b86511561158b5760008981526009602090815260409091208851611589926001909201918a01906136ab565b505b8551156115b957600089815260096020908152604090912087516115b7926002909201918901906136ab565b505b8451156115f4576115c985612afa565b600960008b815260200190815260200160002060030190805190602001906115f29291906136ab565b505b6001600160a01b0382161561162e57600089815260096020526040902060060180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b038116156116c957600089815260096020526040908190206007015490517f1cb44dfc0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631cb44dfc9061169690849060040161408f565b600060405180830381600087803b1580156116b057600080fd5b505af11580156116c4573d6000803e3d6000fd5b505050505b600084156116e95750600089815260096020526040902060040184905560015b83156117075750600089815260096020526040902060050183905560015b801561178b5760008a81526009602052604090819020600781015460048083015460059093015493516339acb21f60e21b81526001600160a01b039092169363e6b2c87c93611758939092016145f7565b600060405180830381600087803b15801561177257600080fd5b505af1158015611786573d6000803e3d6000fd5b505050505b50505050505050505050565b6117af6000805160206147c783398151915233611968565b6117cb5760405162461bcd60e51b81526004016107da906144dc565b6001600160a01b03909216600090815260066020908152604080832060028082018690556003808301889055600190920154855260079093529220908101929092550155565b6118296000805160206147c783398151915233611968565b6118455760405162461bcd60e51b81526004016107da906144dc565b610dc86000805160206147c783398151915282610e8e565b6118756000805160206147c783398151915233611968565b6118915760405162461bcd60e51b81526004016107da906144dc565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6118cb6000805160206147c783398151915233611968565b6118e75760405162461bcd60e51b81526004016107da906144dc565b610dc87f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5082610e8e565b6000805160206147c783398151915281565b7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5081565b600082815260208190526040812061195f908361305a565b90505b92915050565b600082815260208190526040812061195f9083613066565b6000828152600960205260408082206007015490516352c8b2f960e01b815282916001600160a01b0316906352c8b2f9906119bf90869060040161408f565b60a06040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f9190613f05565b151598975050505050505050565b6000611a497f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5033611968565b611a655760405162461bcd60e51b81526004016107da906143c9565b6001600160a01b03841660009081526006602052604090206003015415611a9e5760405162461bcd60e51b81526004016107da90614400565b60008381526007602052604090206003015415611acd5760405162461bcd60e51b81526004016107da9061427f565b6005546000908152600860205260409020805415611bb3578054421015611b065760405162461bcd60e51b81526004016107da906144a5565b80600101544210611b295760405162461bcd60e51b81526004016107da9061454a565b8060020154831115611b4d5760405162461bcd60e51b81526004016107da90614324565b60038101546005820154611b6290859061307b565b1115611b805760405162461bcd60e51b81526004016107da90614513565b60048101546006820154611b9590859061307b565b1115611bb35760405162461bcd60e51b81526004016107da90614437565b604080516080810182526001600160a01b0380881680835260208084018981528486018981524260608701908152600094855260068452878520875181549088166001600160a01b03199182161782558451600180840191909155845160028085019190915584516003948501558f89526007909752999096208851815498169790961696909617855591519684019690965594519082015592519201919091556005820154611c63908561307b565b60058301556006820154611c77908561307b565b60068301556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611cae9089908890600401614110565b600060405180830381600087803b158015611cc857600080fd5b505af1158015611cdc573d6000803e3d6000fd5b5050505084866001600160a01b03167fe49649ad7d04a14b0d2a43dae89f207c0822143ff6f88a6480e88907e4e5c5488642604051611d1c9291906145f7565b60405180910390a36001925050505b9392505050565b611d4a6000805160206147c783398151915233611968565b611d665760405162461bcd60e51b81526004016107da906144dc565b610dc87fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d9795826127a3565b600081565b6000818152600960205260408082206007015481517f23341a0500000000000000000000000000000000000000000000000000000000815291516060928492839283926001600160a01b039092169182916323341a05916004808201928792909190829003018186803b158015611e0b57600080fd5b505afa158015611e1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e479190810190613a3e565b939b929a50909850965090945092505050565b7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979581565b60096020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015611f155780601f10611eea57610100808354040283529160200191611f15565b820191906000526020600020905b815481529060010190602001808311611ef857829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fb35780601f10611f8857610100808354040283529160200191611fb3565b820191906000526020600020905b815481529060010190602001808311611f9657829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156120455780601f1061201a57610100808354040283529160200191612045565b820191906000526020600020905b81548152906001019060200180831161202857829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156120d55780601f106120aa576101008083540402835291602001916120d5565b820191906000526020600020905b8154815290600101906020018083116120b857829003601f168201915b505050600484015460058501546006860154600790960154949591949093506001600160a01b0391821692501688565b6001600160a01b03821660009081526006602052604081206003015415158061195f5750506000908152600760205260409020600301541515919050565b60045481565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b61219e6000805160206147c783398151915233611968565b6121ba5760405162461bcd60e51b81526004016107da906144dc565b6000828152600960205260409081902060070154905163f2fde38b60e01b81526001600160a01b039091169063f2fde38b90610c9590849060040161408f565b6000818152600960209081526040808320600701548151637e062a3560e11b81529151606093849386936001600160a01b0316928492849263fc0c546a9260048083019392829003018186803b15801561225357600080fd5b505afa158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b919061388b565b905080816001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156122c757600080fd5b505afa1580156122db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123039190810190613b11565b826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561233c57600080fd5b505afa158015612350573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123789190810190613b11565b836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123b157600080fd5b505afa1580156123c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e99190613f98565b955095509550955050509193509193565b6124126000805160206147c783398151915233611968565b61242e5760405162461bcd60e51b81526004016107da906144dc565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000838152600960205260408082206007015490517f535f02ee0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063535f02ee906124aa90869086906004016145c4565b60206040518083038186803b1580156124c257600080fd5b505afa1580156124d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e9190613a22565b60055481565b6000818152602081905260408120611962906130d5565b6000848152600960205260408120600401544210156125485760405162461bcd60e51b81526004016107da9061435b565b6000858152600960205260409020600501544211156125795760405162461bcd60e51b81526004016107da906142b6565b6000858152600960209081526040808320600701548151637e062a3560e11b815291516001600160a01b039091169263fc0c546a9260048082019391829003018186803b1580156125c957600080fd5b505afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612601919061388b565b6001549091506001600160a01b038083169116141561269e576001546040517fbb35783b0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bb35783b90612667903390309088906004016140a3565b600060405180830381600087803b15801561268157600080fd5b505af1158015612695573d6000803e3d6000fd5b505050506126b3565b6126b36001600160a01b0382163330866130e0565b600086815260096020526040908190206007015490517fcae326060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063cae3260690612710908890889033906004016145d5565b602060405180830381600087803b15801561272a57600080fd5b505af115801561273e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127629190613d90565b9150828211156127845760405162461bcd60e51b81526004016107da9061446e565b8282101561279a5761279a336114f0858561316e565b50949350505050565b6000828152602081905260409020600201546127c1906105bb612eff565b6112745760405162461bcd60e51b81526004018080602001828103825260308152602001806147976030913960400191505060405180910390fd5b6128146000805160206147c783398151915233611968565b6128305760405162461bcd60e51b81526004016107da906144dc565b600555565b61284d6000805160206147c783398151915233611968565b6128695760405162461bcd60e51b81526004016107da906144dc565b60055460009081526008602052604090208054156128b4576004810154600682015461289690849061307b565b11156128b45760405162461bcd60e51b81526004016107da90614437565b60068101546128c3908361307b565b60068201556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906128fa9086908690600401614110565b600060405180830381600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b50505050826001600160a01b03167f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb47583426040516129679291906145f7565b60405180910390a2505050565b61298c6000805160206147c783398151915233611968565b6129a85760405162461bcd60e51b81526004016107da906144dc565b610dc87f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50826127a3565b6000818152600960205260408082206007015490517f3f7361eb0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633f7361eb90612a2a90339060040161408f565b602060405180830381600087803b158015612a4457600080fd5b505af1158015612a58573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119629190613d90565b6000838152600960205260408082206007015490517f3dcb8b810000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633dcb8b81906124aa90869086906004016145c4565b6001546001600160a01b031681565b600061195f836001600160a01b0384166131cb565b60608060005b8351811015612b775781848281518110612b1657fe5b6020026020010151604051602001612b2f92919061401f565b60405160208183030381529060405291506001845103811015612b6f5781604051602001612b5d919061404e565b60405160208183030381529060405291505b600101612b00565b5092915050565b6003546000908190612b98906001600160a01b0316613215565b60608401516040517fc4d66de800000000000000000000000000000000000000000000000000000000815291925082916001600160a01b0383169163c4d66de891612be6919060040161408f565b600060405180830381600087803b158015612c0057600080fd5b505af1158015612c14573d6000803e3d6000fd5b50505060808501516001600160a01b031630149050612c5957612c59846080015130866020015187606001516001600160a01b03166130e0909392919063ffffffff16565b83606001516001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b8152600401612c8d929190614110565b602060405180830381600087803b158015612ca757600080fd5b505af1158015612cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdf919061399a565b506004549250806001600160a01b0316635467a751848660a001518760000151886020015189604001516040518663ffffffff1660e01b8152600401612d29959493929190614598565b600060405180830381600087803b158015612d4357600080fd5b505af1158015612d57573d6000803e3d6000fd5b50505050608085015160a08601516040516339acb21f60e21b81526001600160a01b0384169263e6b2c87c92612d8f926004016145f7565b600060405180830381600087803b158015612da957600080fd5b505af1158015612dbd573d6000803e3d6000fd5b5050506001600160a01b03831660e0870152506000838152600960209081526040909120865180518893612df59284929101906136ab565b506020828101518051612e0e92600185019201906136ab565b5060408201518051612e2a9160028401916020909101906136ab565b5060608201518051612e469160038401916020909101906136ab565b50608082015160048281019190915560a0830151600583015560c08301516006830180546001600160a01b03199081166001600160a01b039384161790915560e0909401516007909301805490941692169190911790915554612eaa90600161307b565b6004819055508460c001516001600160a01b03167f8263f983d31825e2fcfa4ff69822ca37ec7846c9c6a84da9b59ae29d8e43ddab8484604051612eef929190614581565b60405180910390a2505092915050565b3390565b6000828152602081905260409020612f1b9082612ae5565b15610ef157612f28612eff565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020612f8490826132d0565b15610ef157612f91612eff565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526130559084906132e5565b505050565b600061195f8383613396565b600061195f836001600160a01b0384166133fa565b60008282018381101561195f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061196282613412565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526131689085906132e5565b50505050565b6000828211156131c5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006131d783836133fa565b61320d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611962565b506000611962565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b038116610dde576040805162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015290519081900360640190fd5b600061195f836001600160a01b038416613416565b600061333a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134dc9092919063ffffffff16565b8051909150156130555780806020019051602081101561335957600080fd5b50516130555760405162461bcd60e51b815260040180806020018281038252602a8152602001806147e7602a913960400191505060405180910390fd5b815460009082106133d85760405162461bcd60e51b81526004018080602001828103825260228152602001806147466022913960400191505060405180910390fd5b8260000182815481106133e757fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156134d2578354600019808301919081019060009087908390811061344957fe5b906000526020600020015490508087600001848154811061346657fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061349657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611962565b6000915050611962565b6060610c0e8484600085856134f085613601565b613541576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061357f5780518252601f199092019160209182019101613560565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146135e1576040519150601f19603f3d011682016040523d82523d6000602084013e6135e6565b606091505b50915091506135f6828286613607565b979650505050505050565b3b151590565b60608315613616575081611d2b565b8251156136265782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613670578181015183820152602001613658565b50505050905090810190601f16801561369d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826136e15760008555613727565b82601f106136fa57805160ff1916838001178555613727565b82800160010185558215613727579182015b8281111561372757825182559160200191906001019061370c565b50613733929150613737565b5090565b5b808211156137335760008155600101613738565b8035610dde81614721565b600082601f830112613767578081fd5b8135602061377c613777836146b5565b614691565b82815281810190858301855b858110156137b15761379f898684358b0101613823565b84529284019290840190600101613788565b5090979650505050505050565b600082601f8301126137ce578081fd5b815160206137de613777836146b5565b82815281810190858301838502870184018810156137fa578586fd5b855b858110156137b1578151845292840192908401906001016137fc565b8051610dde81614736565b600082601f830112613833578081fd5b8135613841613777826146d3565b818152846020838601011115613855578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613880578081fd5b813561195f81614721565b60006020828403121561389c578081fd5b815161195f81614721565b600080604083850312156138b9578081fd5b82356138c481614721565b946020939093013593505050565b6000806000606084860312156138e6578081fd5b83356138f181614721565b95602085013595506040909401359392505050565b600060208284031215613917578081fd5b815167ffffffffffffffff81111561392d578182fd5b610c0e848285016137be565b6000806040838503121561394b578182fd5b825167ffffffffffffffff80821115613962578384fd5b61396e868387016137be565b93506020850151915080821115613983578283fd5b50613990858286016137be565b9150509250929050565b6000602082840312156139ab578081fd5b8151801515811461195f578182fd5b6000602082840312156139cb578081fd5b5035919050565b600080604083850312156139e4578182fd5b8235915060208301356139f681614721565b809150509250929050565b60008060408385031215613a13578182fd5b50508035926020909101359150565b600060208284031215613a33578081fd5b815161195f81614736565b600080600080600060a08688031215613a55578283fd5b8551613a6081614736565b8095505060208087015167ffffffffffffffff811115613a7e578485fd5b8701601f81018913613a8e578485fd5b8051613a9c613777826146b5565b81815283810190838501858402850186018d1015613ab8578889fd5b8894505b83851015613ae3578051613acf81614736565b835260019490940193918501918501613abc565b508098505050505050613af860408701613818565b6060870151608090970151959894975095949392505050565b600060208284031215613b22578081fd5b815167ffffffffffffffff811115613b38578182fd5b8201601f81018413613b48578182fd5b8051613b56613777826146d3565b818152856020838501011115613b6a578384fd5b613b7b8260208301602086016146f5565b95945050505050565b60008060008060008060008060006101208a8c031215613ba2578687fd5b893567ffffffffffffffff80821115613bb9578889fd5b613bc58d838e01613823565b9a5060208c0135915080821115613bda578889fd5b613be68d838e01613823565b995060408c0135915080821115613bfb578889fd5b613c078d838e01613823565b985060608c0135915080821115613c1c578586fd5b50613c298c828d01613757565b96505060808a0135945060a08a01359350613c4660c08b0161374c565b925060e08a013591506101008a013590509295985092959850929598565b6000806000806000806000806000806000806101808d8f031215613c86578586fd5b67ffffffffffffffff8d351115613c9b578586fd5b613ca88e8e358f01613823565b9b5067ffffffffffffffff60208e01351115613cc2578586fd5b613cd28e60208f01358f01613823565b9a5067ffffffffffffffff60408e01351115613cec578586fd5b613cfc8e60408f01358f01613823565b995067ffffffffffffffff60608e01351115613d16578586fd5b613d268e60608f01358f01613757565b985060808d0135975060a08d01359650613d4260c08e0161374c565b955060e08d013594506101008d01359350613d606101208e0161374c565b9250613d6f6101408e0161374c565b9150613d7e6101608e0161374c565b90509295989b509295989b509295989b565b600060208284031215613da1578081fd5b5051919050565b60008060008060008060008060006101208a8c031215613dc6578283fd5b8935985060208a013567ffffffffffffffff80821115613de4578485fd5b613df08d838e01613823565b995060408c0135915080821115613e05578485fd5b613e118d838e01613823565b985060608c0135915080821115613e26578485fd5b613e328d838e01613823565b975060808c0135915080821115613e47578485fd5b50613e548c828d01613757565b95505060a08a0135935060c08a01359250613e7160e08b0161374c565b9150613e806101008b0161374c565b90509295985092959850929598565b600080600060608486031215613ea3578081fd5b83359250602084013591506040840135613ebc81614736565b809150509250925092565b60008060008060808587031215613edc578182fd5b84359350602085013592506040850135613ef581614736565b9396929550929360600135925050565b600080600080600060a08688031215613f1c578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600080600080600080600080610100898b031215613f60578182fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b600060208284031215613fa9578081fd5b815160ff8116811461195f578182fd5b6000815180845260208085019450808401835b83811015613fe857815187529582019590820190600101613fcc565b509495945050505050565b6000815180845261400b8160208601602086016146f5565b601f01601f19169290920160200192915050565b600083516140318184602088016146f5565b8351908301906140458183602088016146f5565b01949350505050565b600082516140608184602087016146f5565b7f2c00000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b0386168252608060208301526140e96080830186613ff3565b82810360408401526140fb8186613ff3565b91505060ff8316606083015295945050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6000604082526141626040830185613fb9565b8281036020840152613b7b8185613fb9565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600060a08201600f88810b8452602060a08186015282895180855260c087019150828b019450855b818110156141dc578551850b835294830194918301916001016141be565b50509790910b6040850152505050606081019290925260809091015292915050565b60006101008083526142128184018c613ff3565b90508281036020840152614226818b613ff3565b9050828103604084015261423a818a613ff3565b9050828103606084015261424e8189613ff3565b6080840197909752505060a08101939093526001600160a01b0391821660c08401521660e090910152949350505050565b60208082526014908201527f5573657220616c726561647920636c61696d6564000000000000000000000000604082015260600190565b60208082526014908201527f4d61726b657420616c726561647920656e646564000000000000000000000000604082015260600190565b60208082526011908201527f4d696e20616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526019908201527f496e76616c6964207573657220636c61696d20616d6f756e7400000000000000604082015260600190565b60208082526012908201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604082015260600190565b60208082526013908201527f4f6e6c79204d61726b65742043726561746f7200000000000000000000000000604082015260600190565b6020808252600b908201527f4f6e6c792043616c6c6572000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f4163636f756e7420616c726561647920636c61696d6564000000000000000000604082015260600190565b60208082526016908201527f536561736f6e206d617820746f6b656e206d696e747300000000000000000000604082015260600190565b60208082526011908201527f4d617820616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526012908201527f536561736f6e206e6f7420737461727465640000000000000000000000000000604082015260600190565b6020808252600a908201527f4f6e6c792041646d696e00000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f536561736f6e206d617820746f6b656e20636c61696d73000000000000000000604082015260600190565b60208082526014908201527f536561736f6e20616c726561647920656e646564000000000000000000000000604082015260600190565b9182526001600160a01b0316602082015260400190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b918252600f0b602082015260400190565b928352600f9190910b60208301526001600160a01b0316604082015260600190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b600087825286602083015285604083015284606083015283608083015260c060a083015261465560c0830184613fb9565b98975050505050505050565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405181810167ffffffffffffffff811182821017156146ad57fe5b604052919050565b600067ffffffffffffffff8211156146c957fe5b5060209081020190565b600067ffffffffffffffff8211156146e757fe5b50601f01601f191660200190565b60005b838110156147105781810151838201526020016146f8565b838111156131685750506000910152565b6001600160a01b0381168114610dc857600080fd5b80600f0b8114610dc857600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212203d3a38aaef8f20ab2a2a70f5f01aa0f4319f97f04ff12df92403967af914e72a64736f6c63430007060033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Marto (https://github.com/0xMarto)",
    "details": "Feel free to make any adjustments to the code (DMs are open @0xMarto)",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "marketAccountShares(uint256,address)": {
        "details": "Helper function to show market info about an specific account",
        "params": {
          "account": "The address of the account with shares of the market",
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "balances": "Account shares balances by outcome",
          "buys": "Total amount of Buys in the market",
          "deposited": "Total amount of collateral deposited in the market",
          "redeemed": "Total amount of collateral redeemed from the market",
          "sells": "Total amount of Sells in the market",
          "withdrew": "Total amount of collateral withdrew from the market"
        }
      },
      "marketBuy(uint256,uint256,int128,uint256)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "maxAmountIn": "Max amount of tokens able to spend in this trade (front-run mitigation)",
          "outcome": "The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)",
          "sharesAmount": "Number of outcome shares to buy (as a signed 64.64-bit fixed point number)"
        },
        "returns": {
          "amountIn": "Token amount used for buying the specified amount of shares"
        }
      },
      "marketBuyPrice(uint256,uint256,int128)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "outcome": "The outcome for which tokens are being bought",
          "sharesAmount": "Number of outcome shares to buy (as signed 64.64-bit fixed point number)"
        },
        "returns": {
          "tokenCost": "The token cost amount (as a signed 64.64-bit fixed point number)"
        }
      },
      "marketCollateralInfo(uint256)": {
        "details": "Helper function to show data of a collateral of a market",
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "collateral": "Contract address of the market",
          "decimals": "Token decimals of the market",
          "name": "Token name of the market",
          "symbol": "Token symbol of the market"
        }
      },
      "marketPrices(uint256)": {
        "details": "Helper function to fast calculate market prediction and spreads",
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "buyPrices": "buy price of 1 share for all outcomes (indexed by outcome)",
          "sellPrices": "sell price of 1 share for all outcomes (indexed by outcome)"
        }
      },
      "marketRedeemShares(uint256)": {
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "shares": "Number of shares redeemed"
        }
      },
      "marketResultInfo(uint256)": {
        "details": "Helper function to show closed market info",
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "closed": "Timestamp when the market result was reported",
          "reporter": "Address of the market result reporter (market oracle)",
          "result": "Reported market result outcome"
        }
      },
      "marketSell(uint256,uint256,int128,uint256)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "minAmountOut": "Min amount of tokens to obtain in this trade (front-run mitigation)",
          "outcome": "The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)",
          "sharesAmount": "Number of outcome shares to sell (as a signed 64.64-bit fixed point number)"
        },
        "returns": {
          "amountOut": "Token amount obtain from selling the specified amount of shares"
        }
      },
      "marketSellPrice(uint256,uint256,int128)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "outcome": "The outcome for which shares are being sold",
          "sharesAmount": "The number of outcome shares to sell (as signed 64.64-bit fixed point number)"
        },
        "returns": {
          "tokenReturn": "The token return amount (as a signed 64.64-bit fixed point number)"
        }
      },
      "marketSharesInfo(uint256)": {
        "details": "Helper function to show general market shares info",
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "cost": "Current liquidity of the market",
          "sharesBalances": "All shares balances (indexed by outcome)",
          "totalBuys": "Buys counter of the market",
          "totalSells": "Sells counter of the market",
          "totalShares": "Current total shares minted for all outcomes of the market"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "title": "PrecogMaster: Manager of prediction markets and Precog token claims",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasClaimed(address,uint256)": {
        "notice": "Helper function to check if some account has already claim current season tokens"
      },
      "hasRedeemedShares(uint256,address)": {
        "notice": "Helper function to check if some account has already redeemed market shares"
      },
      "isClosedMarket(uint256)": {
        "notice": "Helper function to check market close state"
      },
      "marketAccountShares(uint256,address)": {
        "notice": "Gets market account shares summary of the desired market"
      },
      "marketBuy(uint256,uint256,int128,uint256)": {
        "notice": "Buys shares for the specified outcome in the desired market"
      },
      "marketBuyPrice(uint256,uint256,int128)": {
        "notice": "Gets the cost of buying the specified amount of outcome shares in the desired market"
      },
      "marketCollateralInfo(uint256)": {
        "notice": "Gets the collateral info of the desired market"
      },
      "marketPrices(uint256)": {
        "notice": "Gets market buy and sell prices for all outcomes of the desired market"
      },
      "marketRedeemShares(uint256)": {
        "notice": "Redeems the total sender shares in the desired market"
      },
      "marketResultInfo(uint256)": {
        "notice": "Gets market result summary of the desired market"
      },
      "marketSell(uint256,uint256,int128,uint256)": {
        "notice": "Sells shares for the specified outcome in the desired market"
      },
      "marketSellPrice(uint256,uint256,int128)": {
        "notice": "Gets the return from selling the specified amount of outcome shares in the desired market"
      },
      "marketSharesInfo(uint256)": {
        "notice": "Gets the current market state info of the desired market"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 7624,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7626,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7628,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "market",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7630,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "createdMarkets",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7632,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "currentSeason",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7636,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "accountTokenClaims",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(TokenClaim)7577_storage)"
      },
      {
        "astId": 7640,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "userTokenClaims",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TokenClaim)7577_storage)"
      },
      {
        "astId": 7644,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "miningSeasons",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(MiningSeason)7592_storage)"
      },
      {
        "astId": 7648,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(MarketInfo)7609_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(TokenClaim)7577_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PrecogMasterV7.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)7577_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(MarketInfo)7609_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV7.MarketInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketInfo)7609_storage"
      },
      "t_mapping(t_uint256,t_struct(MiningSeason)7592_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV7.MiningSeason)",
        "numberOfBytes": "32",
        "value": "t_struct(MiningSeason)7592_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenClaim)7577_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV7.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)7577_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2275_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2274,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2010_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketInfo)7609_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV7.MarketInfo",
        "members": [
          {
            "astId": 7594,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7596,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7598,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "category",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 7600,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "outcomes",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 7602,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7604,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7606,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "creator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 7608,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "market",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(MiningSeason)7592_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV7.MiningSeason",
        "members": [
          {
            "astId": 7579,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7581,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7583,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "maxUserClaim",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7585,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "maxTotalClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7587,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "maxTotalMint",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7589,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7591,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "mintedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2275_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2010_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2005,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2009,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenClaim)7577_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV7.TokenClaim",
        "members": [
          {
            "astId": 7570,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7572,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7574,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7576,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "claimedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}