{
  "address": "0x16D24dE99e3282F153B72229a3c23959cC20FdA3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "precogToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKET_CREATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMarketCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalOutcomes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overround",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralFunder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketOracle",
          "type": "address"
        }
      ],
      "name": "createCustomMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newMarketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalOutcomes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overround",
          "type": "uint256"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newMarketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdMarkets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        }
      ],
      "name": "hadClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRedeemedShares",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "marketAccountShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sells",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrew",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "marketBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        }
      ],
      "name": "marketBuyPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketRedeemShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "marketSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        }
      ],
      "name": "marketSellPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketSharesInfo",
      "outputs": [
        {
          "internalType": "int128",
          "name": "totalShares",
          "type": "int128"
        },
        {
          "internalType": "int128[]",
          "name": "sharesBalances",
          "type": "int128[]"
        },
        {
          "internalType": "int128",
          "name": "cost",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "totalBuys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSells",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "marketTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "marketWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miningSeasons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPrecogMaster",
          "type": "address"
        }
      ],
      "name": "precogTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMarketCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "setBaseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setBaseOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMiningSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        }
      ],
      "name": "updateCurrentSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "marketCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketOracle",
          "type": "address"
        }
      ],
      "name": "updateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateTokenClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e75bfd86ce61c15ffb53692461e75272303c1df53ea50f3cbd998a18400b1f7",
  "receipt": {
    "to": null,
    "from": "0x6FEe026Ae8a76258063C9c67eC78F75b7815D101",
    "contractAddress": "0x16D24dE99e3282F153B72229a3c23959cC20FdA3",
    "transactionIndex": 3,
    "gasUsed": "3739931",
    "logsBloom": "0x000000040000000008000000000000000800000000000000000000002000000000a0000100000020020800000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000020000400000000000000800000000000000000800000000000000000000000000000000000000000000004000000000010000000040000000000000000000000000000000000000000000000000000000000000001004000000000000000000000400000000000000000000200000000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0bb90fb90ac1cc8d6ee98d41d12e1b753dcb6703c08656b9101d655170ad4572",
    "transactionHash": "0x0e75bfd86ce61c15ffb53692461e75272303c1df53ea50f3cbd998a18400b1f7",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 11916797,
        "transactionHash": "0x0e75bfd86ce61c15ffb53692461e75272303c1df53ea50f3cbd998a18400b1f7",
        "address": "0x16D24dE99e3282F153B72229a3c23959cC20FdA3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x0000000000000000000000006fee026ae8a76258063c9c67ec78f75b7815d101"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x0bb90fb90ac1cc8d6ee98d41d12e1b753dcb6703c08656b9101d655170ad4572"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11916797,
        "transactionHash": "0x0e75bfd86ce61c15ffb53692461e75272303c1df53ea50f3cbd998a18400b1f7",
        "address": "0x16D24dE99e3282F153B72229a3c23959cC20FdA3",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x0bb90fb90ac1cc8d6ee98d41d12e1b753dcb6703c08656b9101d655170ad4572"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 11916797,
        "transactionHash": "0x0e75bfd86ce61c15ffb53692461e75272303c1df53ea50f3cbd998a18400b1f7",
        "address": "0x16D24dE99e3282F153B72229a3c23959cC20FdA3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x0000000000000000000000006fee026ae8a76258063c9c67ec78f75b7815d101"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x0bb90fb90ac1cc8d6ee98d41d12e1b753dcb6703c08656b9101d655170ad4572"
      }
    ],
    "blockNumber": 11916797,
    "cumulativeGasUsed": "4798438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7779ec685Aa0bf5483B3e0c15dAf246d2d978888",
    "0x9475A4C1BF5Fc80aE079303f14B523da19619c16"
  ],
  "numDeployments": 1,
  "solcInputHash": "a4493724fe63669d87fbf8d3b1831904",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"precogToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMarketCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalOutcomes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overround\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralFunder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketOracle\",\"type\":\"address\"}],\"name\":\"createCustomMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalOutcomes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overround\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"}],\"name\":\"hadClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRedeemedShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"marketAccountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"marketBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"}],\"name\":\"marketBuyPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketRedeemShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"marketSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"}],\"name\":\"marketSellPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketSharesInfo\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"totalShares\",\"type\":\"int128\"},{\"internalType\":\"int128[]\",\"name\":\"sharesBalances\",\"type\":\"int128[]\"},{\"internalType\":\"int128\",\"name\":\"cost\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"totalBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSells\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"marketTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"marketWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningSeasons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrecogMaster\",\"type\":\"address\"}],\"name\":\"precogTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMarketCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setBaseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setBaseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"setMiningSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"}],\"name\":\"updateCurrentSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketOracle\",\"type\":\"address\"}],\"name\":\"updateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateTokenClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Marto\",\"details\":\"Feel free to make any adjustments to the code\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"title\":\"PrecogMasterV6: Contract to manage PrecogMarkets interactions and PrecogToken claims\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrecogMasterV6.sol\":\"PrecogMasterV6\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0d24348f536f928d8b42789737bf34762faee065667ab530ea20969a9d9920d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/IPrecogMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface IPrecogMarket {\\n    // Public market variables\\n    function owner() external view returns (address);\\n    function token() external view returns (address);\\n    function id() external view returns (uint256);\\n    function oracle() external view returns (address);\\n    function startTimestamp() external view returns (uint256);\\n    function endTimestamp() external view returns (uint256);\\n    function closeTimestamp() external view returns (uint256);\\n    function result() external view returns (uint256);\\n\\n    function accountShares(address account) external view returns (\\n        uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed\\n    );\\n\\n    /**\\n     * @notice Initializes the contract with the specified token\\n     * @param _token The address of the ERC-20 token to be used for purchases and redemptions\\n     */\\n    function initialize(address _token) external;\\n\\n    /**\\n     * @notice Sets up the market with the specified parameters\\n     * @param _id The unique identifier for the market\\n     * @param _oracle The address of the oracle that will report results\\n     * @param _totalOutcomes The number of possible outcomes for the market\\n     * @param _subsidy The initial funding used to seed the market (defined on initialized token)\\n     * @param _overround The AMM profit margin in basis points (bps)\\n     */\\n    function setup(uint _id, address _oracle, uint _totalOutcomes, uint _subsidy, uint _overround) external;\\n\\n    /**\\n     * @notice Buys outcome tokens for the specified outcome\\n     * @param _outcome The outcome for which tokens are being bought (e.g., 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome tokens to purchase\\n     * @return _cost The total token amount used for buying the specified amount of outcome shares\\n     */\\n    function buy(uint256 _outcome, int128 _amount) external returns (uint256 _cost);\\n\\n    // Allows buying market shares for a specified account (limited to only Self or Owner)\\n    function _buy(uint256 _outcome, int128 _amount, address _account) external returns (uint256);\\n\\n    /**\\n     * @notice Sells outcome tokens for the specified outcome\\n     * @param _outcome The outcome for which tokens are being sold (e.g., 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome tokens to sell\\n     * @return _returned The total amount of tokens received from selling the outcome shares\\n     */\\n    function sell(uint256 _outcome, int128 _amount) external returns (uint256 _returned);\\n\\n    // Allows selling market shares from a specified account (restricted to only Self or Owner)\\n    function _sell(uint256 _outcome, int128 _amount, address _account) external returns (uint256);\\n\\n    /**\\n     * @notice Reports the result of the market (limited to only Oracle)\\n     * @param _id The unique identifier of the market\\n     * @param _outcome The outcome that is reported as the result of the market\\n     */\\n    function reportResult(uint256 _id, uint256 _outcome) external;\\n\\n    /**\\n     * @notice Redeems the user's shares for the result of the market\\n     * @return redeemedShares The number of shares redeemed\\n     */\\n    function redeemShares() external returns (uint256 redeemedShares);\\n\\n    // Allows redeeming shares of the resulted outcome for a specified account (restricted to only Self or Owner)\\n    function _redeem(address _account) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Redeems shares in batch for multiple accounts  (limited to only Oracle)\\n     * @param _accounts The list of accounts to redeem shares for\\n     * @return redeems The number of successful redeems\\n     */\\n    function redeemBatch(address[] memory _accounts) external returns (uint256 redeems);\\n\\n    /**\\n     * @notice Withdraws any remaining liquidity from the market (limited to only owner)\\n     * @param _token The address of the ERC-20 token to withdraw\\n     */\\n    function withdraw(address _token) external;\\n\\n    /**\\n     * @notice Transfers the ownership of the contract to a new owner (limited to only current owner)\\n     * @param _newOwner The address of the new owner\\n     */\\n    function transferOwnership(address _newOwner) external;\\n\\n    /**\\n     * @notice Update the oracle address of the market (limited to only owner)\\n     * @param _newOracle The address of the EOA or contract that can close the market\\n     */\\n    function updateOracle(address _newOracle) external;\\n\\n    /**\\n     * @notice Updates the start and end timestamps for the market (limited to only owner)\\n     * @param _startTimestamp The timestamp when the market starts allowing trading\\n     * @param _endTimestamp The timestamp when the market stops allowing trading\\n     */\\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) external;\\n\\n    /**\\n     * @notice Gets the total cost of collateral spent in the market\\n     * @return The total cost in the form of a signed 64.64-bit fixed point number\\n     */\\n    function cost() external view returns (int128);\\n\\n    /**\\n     * @notice Gets the cost of buying the specified amount of outcome tokens\\n     * @param _outcome The outcome for which tokens are being bought\\n     * @param _amount The number of outcome tokens to buy (as signed 64.64-bit fixed point number)\\n     * @return The cost amount in the form of a signed 64.64-bit fixed point number\\n     */\\n    function buyPrice(uint256 _outcome, int128 _amount) external view returns (int128);\\n\\n    /**\\n     * @notice Gets the return from selling the specified amount of outcome tokens\\n     * @param _outcome The outcome for which tokens are being sold\\n     * @param _amount The number of outcome tokens to sell (as signed 64.64-bit fixed point number)\\n     * @return The return amount in the form of a signed 64.64-bit fixed point number\\n     */\\n    function sellPrice(uint256 _outcome, int128 _amount) external view returns (int128);\\n\\n    /**\\n     * @notice Gets the current market state information\\n     * @return The total shares, shares balances (indexed by outcome), liquidity, total buys, and total sells\\n     */\\n    function getMarketInfo() external view returns (int128, int128[] memory, int128, uint256, uint256);\\n\\n    /**\\n     * @notice Gets the amount of shares that an account owns for all outcomes\\n     * @param _account The address of the account\\n     * @return The balances of shares for each outcome\\n     */\\n    function getAccountOutcomeBalances(address _account) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xd2ffa76c3ba2930314b35eb49c21e0272169b43339288009e78237b0d1716891\",\"license\":\"MIT\"},\"contracts/IPrecogToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n// Interface for PrecogToken contract\\r\\ninterface IPrecogToken is IERC20 {\\r\\n    // Function to mint new tokens and assign to the specified address\\r\\n    // Access restricted to the contract owner\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    // Function to burn tokens from the specified address\\r\\n    // Access restricted to the contract owner\\r\\n    function burn(address from, uint256 amount) external;\\r\\n\\r\\n    // Function to transfer tokens from one address to another\\r\\n    // Access restricted to the contract owner\\r\\n    function move(address from, address to, uint256 amount) external;\\r\\n\\r\\n    // Function to transfer ownership of the contract to a new address\\r\\n    // Access restricted to the current owner\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    // Returns the address of the current owner\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    // Emitted when ownership of the contract is transferred to a new address\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // Emitted when tokens are burned\\r\\n    event Burn(address indexed from, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x35891d045c5796c7dc7c7541726ec2026376779b128d6c3a19d1ce183345549e\",\"license\":\"MIT\"},\"contracts/PrecogMasterV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./IPrecogToken.sol\\\";\\r\\nimport \\\"./IPrecogMarket.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PrecogMasterV6: Contract to manage PrecogMarkets interactions and PrecogToken claims\\r\\n * @author Marto\\r\\n * @dev Feel free to make any adjustments to the code\\r\\n */\\r\\ncontract PrecogMasterV6 is AccessControl {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant CALLER_ROLE = keccak256(\\\"CALLER_ROLE\\\");\\r\\n    bytes32 public constant MARKET_CREATOR_ROLE = keccak256(\\\"MARKET_CREATOR_ROLE\\\");\\r\\n\\r\\n    struct TokenClaim {\\r\\n        address account;\\r\\n        uint256 user;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 claimedTimestamp;\\r\\n    }\\r\\n\\r\\n    struct MiningSeason {\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 maxUserClaim;\\r\\n        uint256 maxTotalClaim;\\r\\n        uint256 maxTotalMint;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 mintedAmount;\\r\\n    }\\r\\n\\r\\n    struct MarketInfo {\\r\\n        string name;\\r\\n        string description;\\r\\n        string category;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        address creator;\\r\\n        address market;\\r\\n    }\\r\\n\\r\\n    struct MarketConfig {\\r\\n        uint256 totalOutcomes;\\r\\n        uint256 funding;\\r\\n        uint256 overround;\\r\\n        address collateralToken;\\r\\n        address collateralFunder;\\r\\n        address marketOracle;\\r\\n    }\\r\\n\\r\\n    address public token;\\r\\n    uint256 public createdMarkets;\\r\\n    uint256 public currentSeason;\\r\\n    address private market; // Used as recipe for all created markets\\r\\n    address private oracle; // Used as default for all non custom markets\\r\\n\\r\\n    mapping(address => TokenClaim) public accountTokenClaims;\\r\\n    mapping(uint256 => TokenClaim) public userTokenClaims;\\r\\n    mapping(uint256 => MiningSeason) public miningSeasons;\\r\\n    mapping(uint256 => MarketInfo) public markets;\\r\\n\\r\\n    event TokensClaimed(address indexed account, uint256 indexed user, uint256 amount, uint256 timestamp);\\r\\n    event TokensMinted(address indexed account, uint256 amount, uint256 timestamp);\\r\\n    event MarketCreated(address indexed creator, uint256 id, address market);\\r\\n\\r\\n    constructor(address precogToken, address initialAdmin) {\\r\\n        // Grant DEFAULT_ADMIN_ROLE to the initial admin (this is the admin to the ADMIN_ROLE list)\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        // Set ADMIN_ROLE as admin of CALLER_ROLE list\\r\\n        _setRoleAdmin(CALLER_ROLE, ADMIN_ROLE);\\r\\n        // Set already deployed precogToken as claimable token and collateral token for all Markets\\r\\n        token = precogToken;\\r\\n        // Grant ADMIN_ROLE to initial Admin (this enables to call \\\"addAdmin\\\" helper function)\\r\\n        _setupRole(ADMIN_ROLE, initialAdmin);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Only Admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        require(hasRole(CALLER_ROLE, msg.sender), \\\"Only Caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMarketCreator() {\\r\\n        require(hasRole(MARKET_CREATOR_ROLE, msg.sender), \\\"Only Market Creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Public functions to interact with created markets\\r\\n    function marketBuy(\\r\\n        uint256 marketId,\\r\\n        uint256 outcome,\\r\\n        int128 sharesAmount,\\r\\n        uint256 maxAmountIn\\r\\n    ) external returns (uint256 amountIn) {\\r\\n        require(block.timestamp >= markets[marketId].startTimestamp, 'Market not started');\\r\\n        require(block.timestamp <= markets[marketId].endTimestamp, 'Market already ended');\\r\\n\\r\\n        // Get maxAmountIn of tokens from the buyer to Master (this reverts if there is no balance on buyer)\\r\\n        address marketCollateral = IPrecogMarket(markets[marketId].market).token();\\r\\n        if (marketCollateral == token) {\\r\\n            // Case PrecogToken market: just move the max amount to this contract (no approve needed)\\r\\n            IPrecogToken(token).move(msg.sender, address(this), maxAmountIn);\\r\\n        } else {\\r\\n            // Case custom token market: try to transfer from sender (this reverts is there is no allowance)\\r\\n            IERC20(marketCollateral).safeTransferFrom(msg.sender, address(this), maxAmountIn);\\r\\n        }\\r\\n\\r\\n        // Send remote BUY to market contract (to be assigned to the sender)\\r\\n        amountIn = IPrecogMarket(markets[marketId].market)._buy(outcome, sharesAmount, msg.sender);\\r\\n        require(amountIn <= maxAmountIn, \\\"Max amount reach!\\\");  // Just in case there is some balance on this contract\\r\\n\\r\\n        // If there is any leftover, return tokens to sender\\r\\n        if (amountIn < maxAmountIn) {\\r\\n            IERC20(marketCollateral).safeTransfer(msg.sender, maxAmountIn.sub(amountIn));\\r\\n        }\\r\\n        return amountIn;\\r\\n    }\\r\\n\\r\\n    function marketSell(\\r\\n        uint256 marketId,\\r\\n        uint256 outcome,\\r\\n        int128 sharesAmount,\\r\\n        uint256 minAmountOut\\r\\n    ) external returns (uint256 amountOut) {\\r\\n        require(block.timestamp >= markets[marketId].startTimestamp, \\\"Market not started\\\");\\r\\n        require(block.timestamp <= markets[marketId].endTimestamp, \\\"Market already ended\\\");\\r\\n\\r\\n        // Send remote SELL to market contract (to be assigned to the sender)\\r\\n        amountOut = IPrecogMarket(markets[marketId].market)._sell(outcome, sharesAmount, msg.sender);\\r\\n\\r\\n        // Check that the sell price was equal or higher seller expected\\r\\n        require(amountOut >= minAmountOut, \\\"Min amount reach!\\\");\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function marketRedeemShares(uint256 marketId) external returns (uint256 shares) {\\r\\n        return IPrecogMarket(markets[marketId].market)._redeem(msg.sender);\\r\\n    }\\r\\n\\r\\n    function marketBuyPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view returns (int128) {\\r\\n        return IPrecogMarket(markets[marketId].market).buyPrice(outcome, sharesAmount);\\r\\n    }\\r\\n\\r\\n    function marketSellPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view returns (int128) {\\r\\n        return IPrecogMarket(markets[marketId].market).sellPrice(outcome, sharesAmount);\\r\\n    }\\r\\n\\r\\n    function marketAccountShares(uint256 marketId, address account) external view\\r\\n    returns (uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed,\\r\\n        uint256[] memory balances) {\\r\\n        // Get market based on received id (should be valid id)\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n        // Get sharesInfo on received account for selected market\\r\\n        (buys, sells, deposited, withdrew, redeemed) = createdMarket.accountShares(account);\\r\\n        // Get outcome balances on received account for selected market\\r\\n        balances = createdMarket.getAccountOutcomeBalances(account);\\r\\n    }\\r\\n\\r\\n    function marketSharesInfo(uint256 marketId) external view\\r\\n    returns (int128 totalShares, int128[] memory sharesBalances, int128 cost, uint256 totalBuys, uint256 totalSells) {\\r\\n        // Get market based on received id (should be valid id)\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n        (totalShares, sharesBalances, cost, totalBuys, totalSells) = createdMarket.getMarketInfo();\\r\\n    }\\r\\n\\r\\n    // Public helper view function\\r\\n    function hasRedeemedShares(uint256 marketId, address account) external view returns (bool) {\\r\\n        (,,,,uint256 redeemed) = IPrecogMarket(markets[marketId].market).accountShares(account);\\r\\n        return redeemed > 0;\\r\\n    }\\r\\n\\r\\n    function hadClaimed(address account, uint256 user) external view returns (bool) {\\r\\n        return accountTokenClaims[account].claimedTimestamp != 0 || userTokenClaims[user].claimedTimestamp != 0;\\r\\n    }\\r\\n\\r\\n    // Only caller functions\\r\\n    function claimToken(address account, uint256 user, uint256 amount) external onlyCaller returns (bool) {\\r\\n        // Validate token claim\\r\\n        require(accountTokenClaims[account].claimedTimestamp == 0, \\\"Account already claimed\\\");\\r\\n        require(userTokenClaims[user].claimedTimestamp == 0, \\\"User already claimed\\\");\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(block.timestamp >= season.startTimestamp, \\\"Season not started\\\");\\r\\n            require(block.timestamp < season.endTimestamp, \\\"Season already ended\\\");\\r\\n            require(amount <= season.maxUserClaim, \\\"Invalid user claim amount\\\");\\r\\n            require(amount.add(season.claimedAmount) <= season.maxTotalClaim, \\\"Season max token claims\\\");\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints\\\");\\r\\n        }\\r\\n\\r\\n        // Register current token claim\\r\\n        TokenClaim memory claim = TokenClaim({\\r\\n            account: account,\\r\\n            user: user,\\r\\n            claimedAmount: amount,\\r\\n            claimedTimestamp: block.timestamp\\r\\n        });\\r\\n        accountTokenClaims[account] = claim;\\r\\n        userTokenClaims[user] = claim;\\r\\n        season.claimedAmount = season.claimedAmount.add(amount);\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(account, amount);\\r\\n\\r\\n        emit TokensClaimed(account, user, amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function createMarket(\\r\\n        string calldata name,\\r\\n        string calldata description,\\r\\n        string calldata category,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address creator,\\r\\n        uint256 totalOutcomes,\\r\\n        uint256 funding,\\r\\n        uint256 overround\\r\\n    ) external onlyCaller returns (uint256 newMarketId) {\\r\\n        // Mint tokens to seed the new market\\r\\n        IPrecogToken(token).mint(address(this), funding);\\r\\n\\r\\n        // Pack all received information (with defaults), create new market and return new market id\\r\\n        MarketInfo memory marketInfo = MarketInfo(\\r\\n            name, description, category, startTimestamp, endTimestamp, creator, address(0)\\r\\n        );\\r\\n        MarketConfig memory marketConfig = MarketConfig(\\r\\n            totalOutcomes,\\r\\n            funding,\\r\\n            overround,\\r\\n            token,  // collateralToken: Precog Token\\r\\n            address(this),  // collateralFunder: This contract\\r\\n            oracle  // marketOracle: Preset oracle\\r\\n        );\\r\\n        return _createMarket(marketInfo, marketConfig);\\r\\n    }\\r\\n\\r\\n    function createCustomMarket(\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address creator,\\r\\n        uint256 totalOutcomes,\\r\\n        uint256 funding,\\r\\n        uint256 overround,\\r\\n        address collateralToken,\\r\\n        address collateralFunder,\\r\\n        address marketOracle\\r\\n    ) public onlyMarketCreator returns (uint256 newMarketId) {\\r\\n        // Pack all received information, create new market and return new market id\\r\\n        MarketInfo memory marketInfo = MarketInfo(\\r\\n            name, description, category, startTimestamp, endTimestamp, creator, address(0)\\r\\n        );\\r\\n        MarketConfig memory marketConfig = MarketConfig(\\r\\n            totalOutcomes, funding, overround, collateralToken, collateralFunder, marketOracle\\r\\n        );\\r\\n        return _createMarket(marketInfo, marketConfig);\\r\\n    }\\r\\n\\r\\n    function _createMarket(MarketInfo memory info, MarketConfig memory config) internal returns (uint256 newMarketId) {\\r\\n        // Deploy a new market contract and initialize it with the collateral token\\r\\n        address newMarketAddress = Clones.clone(market);\\r\\n        IPrecogMarket newMarket = IPrecogMarket(newMarketAddress);\\r\\n        newMarket.initialize(config.collateralToken);\\r\\n\\r\\n        // Get funding amount to seed the new market (optimization: except in a self-funder usecase)\\r\\n        if (config.collateralFunder != address(this)) {\\r\\n            IERC20(config.collateralToken).safeTransferFrom(config.collateralFunder, address(this), config.funding);\\r\\n        }\\r\\n        // Pre approve all trades with\\r\\n        IERC20(config.collateralToken).approve(newMarketAddress, type(uint256).max);\\r\\n\\r\\n        // Get new Id and Setup deployed new market\\r\\n        newMarketId = createdMarkets;\\r\\n        newMarket.setup(newMarketId, config.marketOracle, config.totalOutcomes, config.funding, config.overround);\\r\\n        newMarket.updateDates(info.startTimestamp, info.endTimestamp);\\r\\n\\r\\n        // Save created market address in received info and save it in local storage (indexed by id)\\r\\n        info.market = newMarketAddress;\\r\\n        markets[newMarketId] = info;\\r\\n\\r\\n        // Increase created markets counter and return new market id\\r\\n        createdMarkets = createdMarkets.add(1);\\r\\n\\r\\n        emit MarketCreated(info.creator, newMarketId, newMarketAddress);\\r\\n        return newMarketId;\\r\\n    }\\r\\n\\r\\n    // Only admin functions\\r\\n    function addMarketCreator(address account) external onlyAdmin {\\r\\n        grantRole(MARKET_CREATOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeMarketCreator(address account) external onlyAdmin {\\r\\n        revokeRole(MARKET_CREATOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function addCaller(address account) external onlyAdmin {\\r\\n        grantRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeCaller(address account) external onlyAdmin {\\r\\n        revokeRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function addAdmin(address account) external onlyAdmin {\\r\\n        grantRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address account) external onlyAdmin {\\r\\n        revokeRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function updateCurrentSeason(uint256 seasonIndex) external onlyAdmin {\\r\\n        currentSeason = seasonIndex;\\r\\n    }\\r\\n\\r\\n    function setMiningSeason(\\r\\n        uint256 seasonIndex,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        uint256 maxUserClaim,\\r\\n        uint256 maxTotalClaim,\\r\\n        uint256 maxTotalMint,\\r\\n        uint256 claimedAmount,\\r\\n        uint256 mintedAmount\\r\\n    ) external onlyAdmin {\\r\\n        miningSeasons[seasonIndex] = MiningSeason({\\r\\n            startTimestamp: startTimestamp,\\r\\n            endTimestamp: endTimestamp,\\r\\n            maxUserClaim: maxUserClaim,\\r\\n            maxTotalClaim: maxTotalClaim,\\r\\n            maxTotalMint: maxTotalMint,\\r\\n            claimedAmount: claimedAmount,\\r\\n            mintedAmount: mintedAmount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function setBaseOracle(address _oracle) external onlyAdmin {\\r\\n        oracle = _oracle;\\r\\n    }\\r\\n\\r\\n    function setBaseMarket(address _market) external onlyAdmin {\\r\\n        market = _market;\\r\\n    }\\r\\n\\r\\n    function updateMarket(\\r\\n        uint256 id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address marketCreator,\\r\\n        address marketOracle\\r\\n    ) external onlyAdmin {\\r\\n        if (bytes(name).length > 0) {\\r\\n            markets[id].name = name;\\r\\n        }\\r\\n        if (bytes(description).length > 0) {\\r\\n            markets[id].description = description;\\r\\n        }\\r\\n        if (bytes(category).length > 0) {\\r\\n            markets[id].category = category;\\r\\n        }\\r\\n        if (marketCreator != address(0)) {\\r\\n            markets[id].creator = marketCreator;\\r\\n        }\\r\\n        if (marketOracle != address(0)) {\\r\\n            IPrecogMarket(markets[id].market).updateOracle(marketOracle);\\r\\n        }\\r\\n        bool updateDates = false;\\r\\n        if (startTimestamp > 0) {\\r\\n            markets[id].startTimestamp = startTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (endTimestamp > 0) {\\r\\n            markets[id].endTimestamp = endTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (updateDates) {\\r\\n            IPrecogMarket(markets[id].market).updateDates(markets[id].startTimestamp, markets[id].endTimestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketWithdraw(uint256 marketId, address marketToken) external onlyAdmin {\\r\\n        IPrecogMarket(markets[marketId].market).withdraw(marketToken);\\r\\n    }\\r\\n\\r\\n    function marketTransferOwnership(uint256 marketId, address newOwner) external onlyAdmin {\\r\\n        IPrecogMarket(markets[marketId].market).transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function updateTokenClaim(address account, uint256 amount, uint256 timestamp) external onlyAdmin {\\r\\n        // Used to reset token claims\\r\\n        accountTokenClaims[account].claimedAmount = amount;\\r\\n        accountTokenClaims[account].claimedTimestamp = timestamp;\\r\\n        uint256 user = accountTokenClaims[account].user;\\r\\n        userTokenClaims[user].claimedAmount = amount;\\r\\n        userTokenClaims[user].claimedTimestamp = timestamp;\\r\\n    }\\r\\n\\r\\n    function precogMint(address to, uint256 amount) external onlyAdmin {\\r\\n        // Validate token mint\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints\\\");\\r\\n        }\\r\\n\\r\\n        // Register token mint\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(to, amount);\\r\\n\\r\\n        emit TokensMinted(to, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function precogBurn(address from, uint256 amount) external onlyAdmin {\\r\\n        // Here we should decrease `season.mintedAmount` for the current season\\r\\n        IPrecogToken(token).burn(from, amount);\\r\\n    }\\r\\n\\r\\n    function precogTransferOwnership(address newPrecogMaster) external onlyAdmin {\\r\\n        IPrecogToken(token).transferOwnership(newPrecogMaster);\\r\\n    }\\r\\n\\r\\n    function withdraw(address _token) public onlyAdmin {\\r\\n        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5b04023f44a24e22afe5eb04a6d958ec86b5b05278a8c1966dbe9b593feaf97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620041ea380380620041ea83398101604081905262000034916200023d565b62000041600082620000ba565b6200007c7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50600080516020620041ca833981519152620000ca565b600180546001600160a01b0319166001600160a01b038416179055620000b2600080516020620041ca83398151915282620000ba565b505062000274565b620000c682826200011c565b5050565b600082815260208190526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526020829052604090912060020155565b60008281526020818152604090912062000141918390620024cd62000195821b17901c565b15620000c65762000151620001b5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001ac836001600160a01b038416620001b9565b90505b92915050565b3390565b6000620001c7838362000208565b620001ff57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001af565b506000620001af565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200023857600080fd5b919050565b6000806040838503121562000250578182fd5b6200025b8362000220565b91506200026b6020840162000220565b90509250929050565b613f4680620002846000396000f3fe608060405234801561001057600080fd5b50600436106103205760003560e01c806391d14854116101a7578063bc05b806116100ee578063d6fb7d7911610097578063f2fd594311610071578063f2fd5943146106d2578063f944a5ff146106e5578063fc0c546a146106f857610320565b8063d6fb7d7914610699578063de02852a146106ac578063eef21cd2146106bf57610320565b8063d20e447f116100c8578063d20e447f14610660578063d33bfe4f14610673578063d547741f1461068657610320565b8063bc05b80614610625578063bcb3962114610645578063ca15c8731461064d57610320565b8063ae42820c11610150578063b608b8f41161012a578063b608b8f4146105d9578063ba2e3684146105ff578063bb31675a1461061257610320565b8063ae42820c146105a3578063b1283e77146105ab578063b590b56f146105d157610320565b8063a15fd10f11610181578063a15fd10f14610564578063a217fddf14610577578063a9683f6e1461057f57610320565b806391d148541461052b5780639971537c1461053e5780639c6c412e1461055157610320565b8063355987cd1161026b578063704802751161021457806375b238fc116101ee57806375b238fc146104fb578063774237fc146105035780639010d07c1461050b57610320565b806370480275146104c257806370f4a7ae146104d5578063747293fb146104e857610320565b80634836e867116102455780634836e8671461047757806351cff8d91461049c5780636354eeb3146104af57610320565b8063355987cd1461043e57806336568abe146104515780633dc2724a1461046457610320565b806319fa3140116102cd5780632f2ff15d116102a75780632f2ff15d146104055780632fb1541b1461041857806330829a201461042b57610320565b806319fa3140146103bf578063248a9ca3146103df57806326f2a446146103f257610320565b806313dffedc116102fe57806313dffedc1461038657806314ae3ffc146103995780631785f53c146103ac57610320565b8063020917fe14610325578063127e9cbd1461033a578063129c7ce414610366575b600080fd5b610338610333366004613167565b610700565b005b61034d610348366004613167565b6107a2565b60405161035d9493929190613878565b60405180910390f35b61037961037436600461370b565b6107d3565b60405161035d91906138a9565b610338610394366004613610565b61090e565b6103386103a736600461319f565b610b65565b6103386103ba366004613167565b610c1a565b6103d26103cd36600461319f565b610c69565b60405161035d919061389e565b6103796103ed3660046132b3565b610cab565b6103796104003660046134ef565b610cc3565b6103386104133660046132cb565b610dbe565b610338610426366004613788565b610e25565b6103386104393660046132cb565b610eca565b61033861044c366004613167565b610f57565b61033861045f3660046132cb565b610fb5565b61034d6104723660046132b3565b611016565b61048a6104853660046132cb565b611047565b60405161035d96959493929190613d17565b6103386104aa366004613167565b611194565b6103386104bd3660046131ca565b611259565b6103386104d0366004613167565b6112d3565b6103386104e3366004613167565b61131f565b6103386104f6366004613167565b611375565b6103796113d3565b6103796113e5565b61051e6105193660046132fa565b611409565b60405161035d9190613827565b6103d26105393660046132cb565b611421565b6103d261054c3660046132cb565b611439565b6103d261055f3660046131ca565b6114d6565b610338610572366004613167565b6117eb565b610379611849565b61059261058d3660046132b3565b61184e565b60405161035d9594939291906138c0565b610379611913565b6105be6105b93660046132b3565b611937565b60405161035d9796959493929190613928565b610379611b2e565b6105ec6105e73660046132b3565b611b34565b60405161035d9796959493929190613d80565b61033861060d3660046132cb565b611b71565b610338610620366004613167565b611be5565b6106386106333660046136d3565b611c3b565b60405161035d91906138b2565b610379611ce5565b61037961065b3660046132b3565b611ceb565b61037961066e36600461340a565b611d02565b61037961068136600461370b565b611ee6565b6103386106943660046132cb565b61218b565b6103386106a73660046132b3565b6121e4565b6103386106ba36600461319f565b61221d565b6103386106cd366004613167565b61235c565b6103796106e03660046132b3565b6123ba565b6106386106f33660046136d3565b612464565b61051e6124be565b610718600080516020613e9883398151915233611421565b61073d5760405162461bcd60e51b815260040161073490613bee565b60405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b039091169063f2fde38b9061076d908490600401613827565b600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b5050505050565b60066020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6000848152600960205260408120600301544210156108045760405162461bcd60e51b815260040161073490613a6d565b6000858152600960205260409020600401544211156108355760405162461bcd60e51b8152600401610734906139c8565b600085815260096020526040908190206006015490517f898b51a70000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063898b51a79061089290879087903390600401613ce7565b602060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e491906135f8565b9050818110156109065760405162461bcd60e51b8152600401610734906139ff565b949350505050565b610926600080516020613e9883398151915233611421565b6109425760405162461bcd60e51b815260040161073490613bee565b86511561096a5760008881526009602090815260409091208851610968928a0190613004565b505b855115610998576000888152600960209081526040909120875161099692600190920191890190613004565b505b8451156109c657600088815260096020908152604090912086516109c492600290920191880190613004565b505b6001600160a01b03821615610a0057600088815260096020526040902060050180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b03811615610a9b57600088815260096020526040908190206006015490517f1cb44dfc0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631cb44dfc90610a68908490600401613827565b600060405180830381600087803b158015610a8257600080fd5b505af1158015610a96573d6000803e3d6000fd5b505050505b60008415610abb5750600088815260096020526040902060030184905560015b8315610ad95750600088815260096020526040902060040183905560015b8015610b5a57600089815260096020526040908190206006810154600382015460049283015493516339acb21f60e21b81526001600160a01b039092169363e6b2c87c93610b279301613d09565b600060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050505b505050505050505050565b610b7d600080516020613e9883398151915233611421565b610b995760405162461bcd60e51b815260040161073490613bee565b6001546040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639dc29fac90610be4908590859060040161385f565b600060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b505050505050565b610c32600080516020613e9883398151915233611421565b610c4e5760405162461bcd60e51b815260040161073490613bee565b610c66600080516020613e988339815191528261218b565b50565b6001600160a01b038216600090815260066020526040812060030154151580610ca2575060008281526007602052604090206003015415155b90505b92915050565b6000818152602081905260409020600201545b919050565b6000610cef7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979533611421565b610d0b5760405162461bcd60e51b815260040161073490613aa4565b60006040518060e001604052808f81526020018e81526020018d81526020018c81526020018b81526020018a6001600160a01b0316815260200160006001600160a01b0316815250905060006040518060c001604052808a8152602001898152602001888152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152509050610dab82826124e2565b9f9e505050505050505050505050505050565b600082815260208190526040902060020154610ddc90610539612858565b610e175760405162461bcd60e51b815260040180806020018281038252602f815260200180613e39602f913960400191505060405180910390fd5b610e21828261285c565b5050565b610e3d600080516020613e9883398151915233611421565b610e595760405162461bcd60e51b815260040161073490613bee565b6040805160e0810182529788526020808901978852888201968752606089019586526080890194855260a0890193845260c089019283526000998a52600890529097209551865593516001860155915160028501555160038401555160048301555160058201559051600690910155565b610ee2600080516020613e9883398151915233611421565b610efe5760405162461bcd60e51b815260040161073490613bee565b600082815260096020526040908190206006015490517f51cff8d90000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906351cff8d990610be4908490600401613827565b610f6f600080516020613e9883398151915233611421565b610f8b5760405162461bcd60e51b815260040161073490613bee565b610c667fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979582610dbe565b610fbd612858565b6001600160a01b0316816001600160a01b03161461100c5760405162461bcd60e51b815260040180806020018281038252602f815260200180613ee2602f913960400191505060405180910390fd5b610e2182826128c5565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6000828152600960205260408082206006015490516352c8b2f960e01b815282918291829182916060916001600160a01b03169081906352c8b2f990611091908b90600401613827565b60a06040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190613749565b6040517f05b4b371000000000000000000000000000000000000000000000000000000008152949b50929950909750955093506001600160a01b038216906305b4b37190611133908b90600401613827565b60006040518083038186803b15801561114b57600080fd5b505afa15801561115f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261118791908101906131fe565b9150509295509295509295565b6111ac600080516020613e9883398151915233611421565b6111c85760405162461bcd60e51b815260040161073490613bee565b610c6633826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111f89190613827565b60206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124891906135f8565b6001600160a01b038416919061292e565b611271600080516020613e9883398151915233611421565b61128d5760405162461bcd60e51b815260040161073490613bee565b6001600160a01b03909216600090815260066020908152604080832060028082018690556003808301889055600190920154855260079093529220908101929092550155565b6112eb600080516020613e9883398151915233611421565b6113075760405162461bcd60e51b815260040161073490613bee565b610c66600080516020613e9883398151915282610dbe565b611337600080516020613e9883398151915233611421565b6113535760405162461bcd60e51b815260040161073490613bee565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61138d600080516020613e9883398151915233611421565b6113a95760405162461bcd60e51b815260040161073490613bee565b610c667f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5082610dbe565b600080516020613e9883398151915281565b7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5081565b6000828152602081905260408120610ca290836129b3565b6000828152602081905260408120610ca290836129bf565b6000828152600960205260408082206006015490516352c8b2f960e01b815282916001600160a01b0316906352c8b2f990611478908690600401613827565b60a06040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190613749565b151598975050505050505050565b60006115027f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5033611421565b61151e5760405162461bcd60e51b815260040161073490613adb565b6001600160a01b038416600090815260066020526040902060030154156115575760405162461bcd60e51b815260040161073490613b12565b600083815260076020526040902060030154156115865760405162461bcd60e51b815260040161073490613991565b600354600090815260086020526040902080541561166c5780544210156115bf5760405162461bcd60e51b815260040161073490613bb7565b806001015442106115e25760405162461bcd60e51b815260040161073490613c5c565b80600201548311156116065760405162461bcd60e51b815260040161073490613a36565b6003810154600582015461161b9085906129d4565b11156116395760405162461bcd60e51b815260040161073490613c25565b6004810154600682015461164e9085906129d4565b111561166c5760405162461bcd60e51b815260040161073490613b49565b604080516080810182526001600160a01b0380881680835260208084018981528486018981524260608701908152600094855260068452878520875181549088166001600160a01b03199182161782558451600180840191909155845160028085019190915584516003948501558f8952600790975299909620885181549816979096169690961785559151968401969096559451908201559251920191909155600582015461171c90856129d4565b6005830155600682015461173090856129d4565b60068301556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611767908990889060040161385f565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b5050505084866001600160a01b03167fe49649ad7d04a14b0d2a43dae89f207c0822143ff6f88a6480e88907e4e5c54886426040516117d5929190613d09565b60405180910390a36001925050505b9392505050565b611803600080516020613e9883398151915233611421565b61181f5760405162461bcd60e51b815260040161073490613bee565b610c667fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d97958261218b565b600081565b6000818152600960205260408082206006015481517f23341a0500000000000000000000000000000000000000000000000000000000815291516060928492839283926001600160a01b039092169182916323341a05916004808201928792909190829003018186803b1580156118c457600080fd5b505afa1580156118d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119009190810190613337565b939b929a50909850965090945092505050565b7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979581565b60096020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156119ce5780601f106119a3576101008083540402835291602001916119ce565b820191906000526020600020905b8154815290600101906020018083116119b157829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a6c5780601f10611a4157610100808354040283529160200191611a6c565b820191906000526020600020905b815481529060010190602001808311611a4f57829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959695945090925090830182828015611afe5780601f10611ad357610100808354040283529160200191611afe565b820191906000526020600020905b815481529060010190602001808311611ae157829003601f168201915b505050600384015460048501546005860154600690960154949591949093506001600160a01b0391821692501687565b60025481565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b611b89600080516020613e9883398151915233611421565b611ba55760405162461bcd60e51b815260040161073490613bee565b6000828152600960205260409081902060060154905163f2fde38b60e01b81526001600160a01b039091169063f2fde38b90610be4908490600401613827565b611bfd600080516020613e9883398151915233611421565b611c195760405162461bcd60e51b815260040161073490613bee565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000838152600960205260408082206006015490517f535f02ee0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063535f02ee90611c959086908690600401613cd6565b60206040518083038186803b158015611cad57600080fd5b505afa158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610906919061331b565b60035481565b6000818152602081905260408120610ca590612a2e565b6000611d2e7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5033611421565b611d4a5760405162461bcd60e51b815260040161073490613adb565b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611d7c903090879060040161385f565b600060405180830381600087803b158015611d9657600080fd5b505af1158015611daa573d6000803e3d6000fd5b5050505060006040518060e001604052808f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8e018190048102820181019092528c815291810191908d908d9081908401838280828437600092018290525093855250505060208083018c905260408084018c90526001600160a01b03808c16606080870191909152608095860194909452815160c0810183528b81529283018a905290820188905260015481169282019290925230928101929092526005541660a0820152909150610dab82826124e2565b600084815260096020526040812060030154421015611f175760405162461bcd60e51b815260040161073490613a6d565b600085815260096020526040902060040154421115611f485760405162461bcd60e51b8152600401610734906139c8565b60008581526009602090815260408083206006015481517ffc0c546a00000000000000000000000000000000000000000000000000000000815291516001600160a01b039091169263fc0c546a9260048082019391829003018186803b158015611fb157600080fd5b505afa158015611fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe99190613183565b6001549091506001600160a01b0380831691161415612086576001546040517fbb35783b0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bb35783b9061204f9033903090889060040161383b565b600060405180830381600087803b15801561206957600080fd5b505af115801561207d573d6000803e3d6000fd5b5050505061209b565b61209b6001600160a01b038216333086612a39565b600086815260096020526040908190206006015490517fcae326060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063cae32606906120f890889088903390600401613ce7565b602060405180830381600087803b15801561211257600080fd5b505af1158015612126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214a91906135f8565b91508282111561216c5760405162461bcd60e51b815260040161073490613b80565b8282101561218257612182336112488585612ac7565b50949350505050565b6000828152602081905260409020600201546121a990610539612858565b61100c5760405162461bcd60e51b8152600401808060200182810382526030815260200180613e686030913960400191505060405180910390fd5b6121fc600080516020613e9883398151915233611421565b6122185760405162461bcd60e51b815260040161073490613bee565b600355565b612235600080516020613e9883398151915233611421565b6122515760405162461bcd60e51b815260040161073490613bee565b600354600090815260086020526040902080541561229c576004810154600682015461227e9084906129d4565b111561229c5760405162461bcd60e51b815260040161073490613b49565b60068101546122ab90836129d4565b60068201556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906122e2908690869060040161385f565b600060405180830381600087803b1580156122fc57600080fd5b505af1158015612310573d6000803e3d6000fd5b50505050826001600160a01b03167f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb475834260405161234f929190613d09565b60405180910390a2505050565b612374600080516020613e9883398151915233611421565b6123905760405162461bcd60e51b815260040161073490613bee565b610c667f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b508261218b565b6000818152600960205260408082206006015490517f3f7361eb0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633f7361eb90612412903390600401613827565b602060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca591906135f8565b6000838152600960205260408082206006015490517f3dcb8b810000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633dcb8b8190611c959086908690600401613cd6565b6001546001600160a01b031681565b6000610ca2836001600160a01b038416612b24565b60045460009081906124fc906001600160a01b0316612b6e565b60608401516040517fc4d66de800000000000000000000000000000000000000000000000000000000815291925082916001600160a01b0383169163c4d66de89161254a9190600401613827565b600060405180830381600087803b15801561256457600080fd5b505af1158015612578573d6000803e3d6000fd5b50505060808501516001600160a01b0316301490506125bd576125bd846080015130866020015187606001516001600160a01b0316612a39909392919063ffffffff16565b83606001516001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b81526004016125f192919061385f565b602060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126439190613293565b5060025460a08501518551602087015160408089015190517f5467a7510000000000000000000000000000000000000000000000000000000081529497506001600160a01b03861694635467a751946126a4948a9491939092600401613caa565b600060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b50505050606085015160808601516040516339acb21f60e21b81526001600160a01b0384169263e6b2c87c9261270a92600401613d09565b600060405180830381600087803b15801561272457600080fd5b505af1158015612738573d6000803e3d6000fd5b5050506001600160a01b03831660c0870152506000838152600960209081526040909120865180518893612770928492910190613004565b5060208281015180516127899260018501920190613004565b50604082015180516127a5916002840191602090910190613004565b50606082015160038201556080820151600482015560a08201516005820180546001600160a01b03199081166001600160a01b039384161790915560c0909301516006909201805490931691161790556002546128039060016129d4565b6002819055508460a001516001600160a01b03167f8263f983d31825e2fcfa4ff69822ca37ec7846c9c6a84da9b59ae29d8e43ddab8484604051612848929190613c93565b60405180910390a2505092915050565b3390565b600082815260208190526040902061287490826124cd565b15610e2157612881612858565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206128dd9082612c29565b15610e21576128ea612858565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526129ae908490612c3e565b505050565b6000610ca28383612cef565b6000610ca2836001600160a01b038416612d53565b600082820183811015610ca2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610ca582612d6b565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612ac1908590612c3e565b50505050565b600082821115612b1e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000612b308383612d53565b612b6657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca5565b506000610ca5565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b038116610cbe576040805162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015290519081900360640190fd5b6000610ca2836001600160a01b038416612d6f565b6000612c93826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e359092919063ffffffff16565b8051909150156129ae57808060200190516020811015612cb257600080fd5b50516129ae5760405162461bcd60e51b815260040180806020018281038252602a815260200180613eb8602a913960400191505060405180910390fd5b81546000908210612d315760405162461bcd60e51b8152600401808060200182810382526022815260200180613e176022913960400191505060405180910390fd5b826000018281548110612d4057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015612e2b5783546000198083019190810190600090879083908110612da257fe5b9060005260206000200154905080876000018481548110612dbf57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612def57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ca5565b6000915050610ca5565b6060610906848460008585612e4985612f5a565b612e9a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310612ed85780518252601f199092019160209182019101612eb9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f3a576040519150601f19603f3d011682016040523d82523d6000602084013e612f3f565b606091505b5091509150612f4f828286612f60565b979650505050505050565b3b151590565b60608315612f6f5750816117e4565b825115612f7f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fc9578181015183820152602001612fb1565b50505050905090810190601f168015612ff65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261303a5760008555613080565b82601f1061305357805160ff1916838001178555613080565b82800160010185558215613080579182015b82811115613080578251825591602001919060010190613065565b5061308c929150613090565b5090565b5b8082111561308c5760008155600101613091565b8035610cbe81613df2565b8051610cbe81613e07565b60008083601f8401126130cc578182fd5b50813567ffffffffffffffff8111156130e3578182fd5b6020830191508360208285010111156130fb57600080fd5b9250929050565b600082601f830112613112578081fd5b813567ffffffffffffffff81111561312657fe5b613139601f8201601f1916602001613db0565b81815284602083860101111561314d578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613178578081fd5b8135610ca281613df2565b600060208284031215613194578081fd5b8151610ca281613df2565b600080604083850312156131b1578081fd5b82356131bc81613df2565b946020939093013593505050565b6000806000606084860312156131de578081fd5b83356131e981613df2565b95602085013595506040909401359392505050565b60006020808385031215613210578182fd5b825167ffffffffffffffff811115613226578283fd5b8301601f81018513613236578283fd5b805161324961324482613dd4565b613db0565b8181528381019083850185840285018601891015613265578687fd5b8694505b83851015613287578051835260019490940193918501918501613269565b50979650505050505050565b6000602082840312156132a4578081fd5b81518015158114610ca2578182fd5b6000602082840312156132c4578081fd5b5035919050565b600080604083850312156132dd578182fd5b8235915060208301356132ef81613df2565b809150509250929050565b6000806040838503121561330c578182fd5b50508035926020909101359150565b60006020828403121561332c578081fd5b8151610ca281613e07565b600080600080600060a0868803121561334e578283fd5b855161335981613e07565b8095505060208087015167ffffffffffffffff811115613377578485fd5b8701601f81018913613387578485fd5b805161339561324482613dd4565b81815283810190838501858402850186018d10156133b1578889fd5b8894505b838510156133dc5780516133c881613e07565b8352600194909401939185019185016133b5565b5080985050505050506133f1604087016130b0565b6060870151608090970151959894975095949392505050565b6000806000806000806000806000806000806101208d8f03121561342c57898afd5b67ffffffffffffffff8d35111561344157898afd5b61344e8e8e358f016130bb565b909c509a5067ffffffffffffffff60208e0135111561346b57898afd5b61347b8e60208f01358f016130bb565b909a50985067ffffffffffffffff60408e01351115613498578687fd5b6134a88e60408f01358f016130bb565b909850965060608d0135955060808d013594506134c760a08e016130a5565b935060c08d0135925060e08d013591506101008d013590509295989b509295989b509295989b565b6000806000806000806000806000806000806101808d8f031215613511578586fd5b67ffffffffffffffff8d351115613526578586fd5b6135338e8e358f01613102565b9b5067ffffffffffffffff60208e0135111561354d578586fd5b61355d8e60208f01358f01613102565b9a5067ffffffffffffffff60408e01351115613577578586fd5b6135878e60408f01358f01613102565b995060608d0135985060808d013597506135a360a08e016130a5565b965060c08d0135955060e08d013594506101008d013593506135c86101208e016130a5565b92506135d76101408e016130a5565b91506135e66101608e016130a5565b90509295989b509295989b509295989b565b600060208284031215613609578081fd5b5051919050565b600080600080600080600080610100898b03121561362c578182fd5b88359750602089013567ffffffffffffffff8082111561364a578384fd5b6136568c838d01613102565b985060408b013591508082111561366b578384fd5b6136778c838d01613102565b975060608b013591508082111561368c578384fd5b506136998b828c01613102565b9550506080890135935060a089013592506136b660c08a016130a5565b91506136c460e08a016130a5565b90509295985092959890939650565b6000806000606084860312156136e7578081fd5b8335925060208401359150604084013561370081613e07565b809150509250925092565b60008060008060808587031215613720578182fd5b8435935060208501359250604085013561373981613e07565b9396929550929360600135925050565b600080600080600060a08688031215613760578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600080600080600080600080610100898b0312156137a4578182fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b60008151808452815b81811015613801576020818501810151868301820152016137e5565b818111156138125782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600060a08201600f88810b8452602060a08186015282895180855260c087019150828b019450855b81811015613906578551850b835294830194918301916001016138e8565b50509790910b6040850152505050606081019290925260809091015292915050565b600060e0825261393b60e083018a6137dc565b828103602084015261394d818a6137dc565b9050828103604084015261396181896137dc565b6060840197909752505060808101939093526001600160a01b0391821660a08401521660c0909101529392505050565b60208082526014908201527f5573657220616c726561647920636c61696d6564000000000000000000000000604082015260600190565b60208082526014908201527f4d61726b657420616c726561647920656e646564000000000000000000000000604082015260600190565b60208082526011908201527f4d696e20616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526019908201527f496e76616c6964207573657220636c61696d20616d6f756e7400000000000000604082015260600190565b60208082526012908201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604082015260600190565b60208082526013908201527f4f6e6c79204d61726b65742043726561746f7200000000000000000000000000604082015260600190565b6020808252600b908201527f4f6e6c792043616c6c6572000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f4163636f756e7420616c726561647920636c61696d6564000000000000000000604082015260600190565b60208082526016908201527f536561736f6e206d617820746f6b656e206d696e747300000000000000000000604082015260600190565b60208082526011908201527f4d617820616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526012908201527f536561736f6e206e6f7420737461727465640000000000000000000000000000604082015260600190565b6020808252600a908201527f4f6e6c792041646d696e00000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f536561736f6e206d617820746f6b656e20636c61696d73000000000000000000604082015260600190565b60208082526014908201527f536561736f6e20616c726561647920656e646564000000000000000000000000604082015260600190565b9182526001600160a01b0316602082015260400190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b918252600f0b602082015260400190565b928352600f9190910b60208301526001600160a01b0316604082015260600190565b918252602082015260400190565b600060c082018883526020888185015287604085015286606085015285608085015260c060a085015281855180845260e0860191508287019350845b81811015613d6f57845183529383019391830191600101613d53565b50909b9a5050505050505050505050565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405181810167ffffffffffffffff81118282101715613dcc57fe5b604052919050565b600067ffffffffffffffff821115613de857fe5b5060209081020190565b6001600160a01b0381168114610c6657600080fd5b80600f0b8114610c6657600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a264697066735822122072595d0bed86c4775b760644b7df97f3dc5dd0ae0759b1d84e9429869d4a993a64736f6c63430007060033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103205760003560e01c806391d14854116101a7578063bc05b806116100ee578063d6fb7d7911610097578063f2fd594311610071578063f2fd5943146106d2578063f944a5ff146106e5578063fc0c546a146106f857610320565b8063d6fb7d7914610699578063de02852a146106ac578063eef21cd2146106bf57610320565b8063d20e447f116100c8578063d20e447f14610660578063d33bfe4f14610673578063d547741f1461068657610320565b8063bc05b80614610625578063bcb3962114610645578063ca15c8731461064d57610320565b8063ae42820c11610150578063b608b8f41161012a578063b608b8f4146105d9578063ba2e3684146105ff578063bb31675a1461061257610320565b8063ae42820c146105a3578063b1283e77146105ab578063b590b56f146105d157610320565b8063a15fd10f11610181578063a15fd10f14610564578063a217fddf14610577578063a9683f6e1461057f57610320565b806391d148541461052b5780639971537c1461053e5780639c6c412e1461055157610320565b8063355987cd1161026b578063704802751161021457806375b238fc116101ee57806375b238fc146104fb578063774237fc146105035780639010d07c1461050b57610320565b806370480275146104c257806370f4a7ae146104d5578063747293fb146104e857610320565b80634836e867116102455780634836e8671461047757806351cff8d91461049c5780636354eeb3146104af57610320565b8063355987cd1461043e57806336568abe146104515780633dc2724a1461046457610320565b806319fa3140116102cd5780632f2ff15d116102a75780632f2ff15d146104055780632fb1541b1461041857806330829a201461042b57610320565b806319fa3140146103bf578063248a9ca3146103df57806326f2a446146103f257610320565b806313dffedc116102fe57806313dffedc1461038657806314ae3ffc146103995780631785f53c146103ac57610320565b8063020917fe14610325578063127e9cbd1461033a578063129c7ce414610366575b600080fd5b610338610333366004613167565b610700565b005b61034d610348366004613167565b6107a2565b60405161035d9493929190613878565b60405180910390f35b61037961037436600461370b565b6107d3565b60405161035d91906138a9565b610338610394366004613610565b61090e565b6103386103a736600461319f565b610b65565b6103386103ba366004613167565b610c1a565b6103d26103cd36600461319f565b610c69565b60405161035d919061389e565b6103796103ed3660046132b3565b610cab565b6103796104003660046134ef565b610cc3565b6103386104133660046132cb565b610dbe565b610338610426366004613788565b610e25565b6103386104393660046132cb565b610eca565b61033861044c366004613167565b610f57565b61033861045f3660046132cb565b610fb5565b61034d6104723660046132b3565b611016565b61048a6104853660046132cb565b611047565b60405161035d96959493929190613d17565b6103386104aa366004613167565b611194565b6103386104bd3660046131ca565b611259565b6103386104d0366004613167565b6112d3565b6103386104e3366004613167565b61131f565b6103386104f6366004613167565b611375565b6103796113d3565b6103796113e5565b61051e6105193660046132fa565b611409565b60405161035d9190613827565b6103d26105393660046132cb565b611421565b6103d261054c3660046132cb565b611439565b6103d261055f3660046131ca565b6114d6565b610338610572366004613167565b6117eb565b610379611849565b61059261058d3660046132b3565b61184e565b60405161035d9594939291906138c0565b610379611913565b6105be6105b93660046132b3565b611937565b60405161035d9796959493929190613928565b610379611b2e565b6105ec6105e73660046132b3565b611b34565b60405161035d9796959493929190613d80565b61033861060d3660046132cb565b611b71565b610338610620366004613167565b611be5565b6106386106333660046136d3565b611c3b565b60405161035d91906138b2565b610379611ce5565b61037961065b3660046132b3565b611ceb565b61037961066e36600461340a565b611d02565b61037961068136600461370b565b611ee6565b6103386106943660046132cb565b61218b565b6103386106a73660046132b3565b6121e4565b6103386106ba36600461319f565b61221d565b6103386106cd366004613167565b61235c565b6103796106e03660046132b3565b6123ba565b6106386106f33660046136d3565b612464565b61051e6124be565b610718600080516020613e9883398151915233611421565b61073d5760405162461bcd60e51b815260040161073490613bee565b60405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b039091169063f2fde38b9061076d908490600401613827565b600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b5050505050565b60066020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6000848152600960205260408120600301544210156108045760405162461bcd60e51b815260040161073490613a6d565b6000858152600960205260409020600401544211156108355760405162461bcd60e51b8152600401610734906139c8565b600085815260096020526040908190206006015490517f898b51a70000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063898b51a79061089290879087903390600401613ce7565b602060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e491906135f8565b9050818110156109065760405162461bcd60e51b8152600401610734906139ff565b949350505050565b610926600080516020613e9883398151915233611421565b6109425760405162461bcd60e51b815260040161073490613bee565b86511561096a5760008881526009602090815260409091208851610968928a0190613004565b505b855115610998576000888152600960209081526040909120875161099692600190920191890190613004565b505b8451156109c657600088815260096020908152604090912086516109c492600290920191880190613004565b505b6001600160a01b03821615610a0057600088815260096020526040902060050180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b03811615610a9b57600088815260096020526040908190206006015490517f1cb44dfc0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631cb44dfc90610a68908490600401613827565b600060405180830381600087803b158015610a8257600080fd5b505af1158015610a96573d6000803e3d6000fd5b505050505b60008415610abb5750600088815260096020526040902060030184905560015b8315610ad95750600088815260096020526040902060040183905560015b8015610b5a57600089815260096020526040908190206006810154600382015460049283015493516339acb21f60e21b81526001600160a01b039092169363e6b2c87c93610b279301613d09565b600060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050505b505050505050505050565b610b7d600080516020613e9883398151915233611421565b610b995760405162461bcd60e51b815260040161073490613bee565b6001546040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639dc29fac90610be4908590859060040161385f565b600060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b505050505050565b610c32600080516020613e9883398151915233611421565b610c4e5760405162461bcd60e51b815260040161073490613bee565b610c66600080516020613e988339815191528261218b565b50565b6001600160a01b038216600090815260066020526040812060030154151580610ca2575060008281526007602052604090206003015415155b90505b92915050565b6000818152602081905260409020600201545b919050565b6000610cef7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979533611421565b610d0b5760405162461bcd60e51b815260040161073490613aa4565b60006040518060e001604052808f81526020018e81526020018d81526020018c81526020018b81526020018a6001600160a01b0316815260200160006001600160a01b0316815250905060006040518060c001604052808a8152602001898152602001888152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152509050610dab82826124e2565b9f9e505050505050505050505050505050565b600082815260208190526040902060020154610ddc90610539612858565b610e175760405162461bcd60e51b815260040180806020018281038252602f815260200180613e39602f913960400191505060405180910390fd5b610e21828261285c565b5050565b610e3d600080516020613e9883398151915233611421565b610e595760405162461bcd60e51b815260040161073490613bee565b6040805160e0810182529788526020808901978852888201968752606089019586526080890194855260a0890193845260c089019283526000998a52600890529097209551865593516001860155915160028501555160038401555160048301555160058201559051600690910155565b610ee2600080516020613e9883398151915233611421565b610efe5760405162461bcd60e51b815260040161073490613bee565b600082815260096020526040908190206006015490517f51cff8d90000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906351cff8d990610be4908490600401613827565b610f6f600080516020613e9883398151915233611421565b610f8b5760405162461bcd60e51b815260040161073490613bee565b610c667fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979582610dbe565b610fbd612858565b6001600160a01b0316816001600160a01b03161461100c5760405162461bcd60e51b815260040180806020018281038252602f815260200180613ee2602f913960400191505060405180910390fd5b610e2182826128c5565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6000828152600960205260408082206006015490516352c8b2f960e01b815282918291829182916060916001600160a01b03169081906352c8b2f990611091908b90600401613827565b60a06040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190613749565b6040517f05b4b371000000000000000000000000000000000000000000000000000000008152949b50929950909750955093506001600160a01b038216906305b4b37190611133908b90600401613827565b60006040518083038186803b15801561114b57600080fd5b505afa15801561115f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261118791908101906131fe565b9150509295509295509295565b6111ac600080516020613e9883398151915233611421565b6111c85760405162461bcd60e51b815260040161073490613bee565b610c6633826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111f89190613827565b60206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124891906135f8565b6001600160a01b038416919061292e565b611271600080516020613e9883398151915233611421565b61128d5760405162461bcd60e51b815260040161073490613bee565b6001600160a01b03909216600090815260066020908152604080832060028082018690556003808301889055600190920154855260079093529220908101929092550155565b6112eb600080516020613e9883398151915233611421565b6113075760405162461bcd60e51b815260040161073490613bee565b610c66600080516020613e9883398151915282610dbe565b611337600080516020613e9883398151915233611421565b6113535760405162461bcd60e51b815260040161073490613bee565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61138d600080516020613e9883398151915233611421565b6113a95760405162461bcd60e51b815260040161073490613bee565b610c667f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5082610dbe565b600080516020613e9883398151915281565b7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5081565b6000828152602081905260408120610ca290836129b3565b6000828152602081905260408120610ca290836129bf565b6000828152600960205260408082206006015490516352c8b2f960e01b815282916001600160a01b0316906352c8b2f990611478908690600401613827565b60a06040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c89190613749565b151598975050505050505050565b60006115027f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5033611421565b61151e5760405162461bcd60e51b815260040161073490613adb565b6001600160a01b038416600090815260066020526040902060030154156115575760405162461bcd60e51b815260040161073490613b12565b600083815260076020526040902060030154156115865760405162461bcd60e51b815260040161073490613991565b600354600090815260086020526040902080541561166c5780544210156115bf5760405162461bcd60e51b815260040161073490613bb7565b806001015442106115e25760405162461bcd60e51b815260040161073490613c5c565b80600201548311156116065760405162461bcd60e51b815260040161073490613a36565b6003810154600582015461161b9085906129d4565b11156116395760405162461bcd60e51b815260040161073490613c25565b6004810154600682015461164e9085906129d4565b111561166c5760405162461bcd60e51b815260040161073490613b49565b604080516080810182526001600160a01b0380881680835260208084018981528486018981524260608701908152600094855260068452878520875181549088166001600160a01b03199182161782558451600180840191909155845160028085019190915584516003948501558f8952600790975299909620885181549816979096169690961785559151968401969096559451908201559251920191909155600582015461171c90856129d4565b6005830155600682015461173090856129d4565b60068301556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611767908990889060040161385f565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b5050505084866001600160a01b03167fe49649ad7d04a14b0d2a43dae89f207c0822143ff6f88a6480e88907e4e5c54886426040516117d5929190613d09565b60405180910390a36001925050505b9392505050565b611803600080516020613e9883398151915233611421565b61181f5760405162461bcd60e51b815260040161073490613bee565b610c667fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d97958261218b565b600081565b6000818152600960205260408082206006015481517f23341a0500000000000000000000000000000000000000000000000000000000815291516060928492839283926001600160a01b039092169182916323341a05916004808201928792909190829003018186803b1580156118c457600080fd5b505afa1580156118d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119009190810190613337565b939b929a50909850965090945092505050565b7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979581565b60096020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529092918391908301828280156119ce5780601f106119a3576101008083540402835291602001916119ce565b820191906000526020600020905b8154815290600101906020018083116119b157829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a6c5780601f10611a4157610100808354040283529160200191611a6c565b820191906000526020600020905b815481529060010190602001808311611a4f57829003601f168201915b50505060028085018054604080516020601f6000196101006001871615020190941695909504928301859004850281018501909152818152959695945090925090830182828015611afe5780601f10611ad357610100808354040283529160200191611afe565b820191906000526020600020905b815481529060010190602001808311611ae157829003601f168201915b505050600384015460048501546005860154600690960154949591949093506001600160a01b0391821692501687565b60025481565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b611b89600080516020613e9883398151915233611421565b611ba55760405162461bcd60e51b815260040161073490613bee565b6000828152600960205260409081902060060154905163f2fde38b60e01b81526001600160a01b039091169063f2fde38b90610be4908490600401613827565b611bfd600080516020613e9883398151915233611421565b611c195760405162461bcd60e51b815260040161073490613bee565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000838152600960205260408082206006015490517f535f02ee0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063535f02ee90611c959086908690600401613cd6565b60206040518083038186803b158015611cad57600080fd5b505afa158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610906919061331b565b60035481565b6000818152602081905260408120610ca590612a2e565b6000611d2e7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5033611421565b611d4a5760405162461bcd60e51b815260040161073490613adb565b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611d7c903090879060040161385f565b600060405180830381600087803b158015611d9657600080fd5b505af1158015611daa573d6000803e3d6000fd5b5050505060006040518060e001604052808f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8e018190048102820181019092528c815291810191908d908d9081908401838280828437600092018290525093855250505060208083018c905260408084018c90526001600160a01b03808c16606080870191909152608095860194909452815160c0810183528b81529283018a905290820188905260015481169282019290925230928101929092526005541660a0820152909150610dab82826124e2565b600084815260096020526040812060030154421015611f175760405162461bcd60e51b815260040161073490613a6d565b600085815260096020526040902060040154421115611f485760405162461bcd60e51b8152600401610734906139c8565b60008581526009602090815260408083206006015481517ffc0c546a00000000000000000000000000000000000000000000000000000000815291516001600160a01b039091169263fc0c546a9260048082019391829003018186803b158015611fb157600080fd5b505afa158015611fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe99190613183565b6001549091506001600160a01b0380831691161415612086576001546040517fbb35783b0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bb35783b9061204f9033903090889060040161383b565b600060405180830381600087803b15801561206957600080fd5b505af115801561207d573d6000803e3d6000fd5b5050505061209b565b61209b6001600160a01b038216333086612a39565b600086815260096020526040908190206006015490517fcae326060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063cae32606906120f890889088903390600401613ce7565b602060405180830381600087803b15801561211257600080fd5b505af1158015612126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214a91906135f8565b91508282111561216c5760405162461bcd60e51b815260040161073490613b80565b8282101561218257612182336112488585612ac7565b50949350505050565b6000828152602081905260409020600201546121a990610539612858565b61100c5760405162461bcd60e51b8152600401808060200182810382526030815260200180613e686030913960400191505060405180910390fd5b6121fc600080516020613e9883398151915233611421565b6122185760405162461bcd60e51b815260040161073490613bee565b600355565b612235600080516020613e9883398151915233611421565b6122515760405162461bcd60e51b815260040161073490613bee565b600354600090815260086020526040902080541561229c576004810154600682015461227e9084906129d4565b111561229c5760405162461bcd60e51b815260040161073490613b49565b60068101546122ab90836129d4565b60068201556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906122e2908690869060040161385f565b600060405180830381600087803b1580156122fc57600080fd5b505af1158015612310573d6000803e3d6000fd5b50505050826001600160a01b03167f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb475834260405161234f929190613d09565b60405180910390a2505050565b612374600080516020613e9883398151915233611421565b6123905760405162461bcd60e51b815260040161073490613bee565b610c667f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b508261218b565b6000818152600960205260408082206006015490517f3f7361eb0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633f7361eb90612412903390600401613827565b602060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca591906135f8565b6000838152600960205260408082206006015490517f3dcb8b810000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633dcb8b8190611c959086908690600401613cd6565b6001546001600160a01b031681565b6000610ca2836001600160a01b038416612b24565b60045460009081906124fc906001600160a01b0316612b6e565b60608401516040517fc4d66de800000000000000000000000000000000000000000000000000000000815291925082916001600160a01b0383169163c4d66de89161254a9190600401613827565b600060405180830381600087803b15801561256457600080fd5b505af1158015612578573d6000803e3d6000fd5b50505060808501516001600160a01b0316301490506125bd576125bd846080015130866020015187606001516001600160a01b0316612a39909392919063ffffffff16565b83606001516001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b81526004016125f192919061385f565b602060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126439190613293565b5060025460a08501518551602087015160408089015190517f5467a7510000000000000000000000000000000000000000000000000000000081529497506001600160a01b03861694635467a751946126a4948a9491939092600401613caa565b600060405180830381600087803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b50505050606085015160808601516040516339acb21f60e21b81526001600160a01b0384169263e6b2c87c9261270a92600401613d09565b600060405180830381600087803b15801561272457600080fd5b505af1158015612738573d6000803e3d6000fd5b5050506001600160a01b03831660c0870152506000838152600960209081526040909120865180518893612770928492910190613004565b5060208281015180516127899260018501920190613004565b50604082015180516127a5916002840191602090910190613004565b50606082015160038201556080820151600482015560a08201516005820180546001600160a01b03199081166001600160a01b039384161790915560c0909301516006909201805490931691161790556002546128039060016129d4565b6002819055508460a001516001600160a01b03167f8263f983d31825e2fcfa4ff69822ca37ec7846c9c6a84da9b59ae29d8e43ddab8484604051612848929190613c93565b60405180910390a2505092915050565b3390565b600082815260208190526040902061287490826124cd565b15610e2157612881612858565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206128dd9082612c29565b15610e21576128ea612858565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526129ae908490612c3e565b505050565b6000610ca28383612cef565b6000610ca2836001600160a01b038416612d53565b600082820183811015610ca2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000610ca582612d6b565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612ac1908590612c3e565b50505050565b600082821115612b1e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000612b308383612d53565b612b6657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ca5565b506000610ca5565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b038116610cbe576040805162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015290519081900360640190fd5b6000610ca2836001600160a01b038416612d6f565b6000612c93826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e359092919063ffffffff16565b8051909150156129ae57808060200190516020811015612cb257600080fd5b50516129ae5760405162461bcd60e51b815260040180806020018281038252602a815260200180613eb8602a913960400191505060405180910390fd5b81546000908210612d315760405162461bcd60e51b8152600401808060200182810382526022815260200180613e176022913960400191505060405180910390fd5b826000018281548110612d4057fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015612e2b5783546000198083019190810190600090879083908110612da257fe5b9060005260206000200154905080876000018481548110612dbf57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612def57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610ca5565b6000915050610ca5565b6060610906848460008585612e4985612f5a565b612e9a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310612ed85780518252601f199092019160209182019101612eb9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f3a576040519150601f19603f3d011682016040523d82523d6000602084013e612f3f565b606091505b5091509150612f4f828286612f60565b979650505050505050565b3b151590565b60608315612f6f5750816117e4565b825115612f7f5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fc9578181015183820152602001612fb1565b50505050905090810190601f168015612ff65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261303a5760008555613080565b82601f1061305357805160ff1916838001178555613080565b82800160010185558215613080579182015b82811115613080578251825591602001919060010190613065565b5061308c929150613090565b5090565b5b8082111561308c5760008155600101613091565b8035610cbe81613df2565b8051610cbe81613e07565b60008083601f8401126130cc578182fd5b50813567ffffffffffffffff8111156130e3578182fd5b6020830191508360208285010111156130fb57600080fd5b9250929050565b600082601f830112613112578081fd5b813567ffffffffffffffff81111561312657fe5b613139601f8201601f1916602001613db0565b81815284602083860101111561314d578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613178578081fd5b8135610ca281613df2565b600060208284031215613194578081fd5b8151610ca281613df2565b600080604083850312156131b1578081fd5b82356131bc81613df2565b946020939093013593505050565b6000806000606084860312156131de578081fd5b83356131e981613df2565b95602085013595506040909401359392505050565b60006020808385031215613210578182fd5b825167ffffffffffffffff811115613226578283fd5b8301601f81018513613236578283fd5b805161324961324482613dd4565b613db0565b8181528381019083850185840285018601891015613265578687fd5b8694505b83851015613287578051835260019490940193918501918501613269565b50979650505050505050565b6000602082840312156132a4578081fd5b81518015158114610ca2578182fd5b6000602082840312156132c4578081fd5b5035919050565b600080604083850312156132dd578182fd5b8235915060208301356132ef81613df2565b809150509250929050565b6000806040838503121561330c578182fd5b50508035926020909101359150565b60006020828403121561332c578081fd5b8151610ca281613e07565b600080600080600060a0868803121561334e578283fd5b855161335981613e07565b8095505060208087015167ffffffffffffffff811115613377578485fd5b8701601f81018913613387578485fd5b805161339561324482613dd4565b81815283810190838501858402850186018d10156133b1578889fd5b8894505b838510156133dc5780516133c881613e07565b8352600194909401939185019185016133b5565b5080985050505050506133f1604087016130b0565b6060870151608090970151959894975095949392505050565b6000806000806000806000806000806000806101208d8f03121561342c57898afd5b67ffffffffffffffff8d35111561344157898afd5b61344e8e8e358f016130bb565b909c509a5067ffffffffffffffff60208e0135111561346b57898afd5b61347b8e60208f01358f016130bb565b909a50985067ffffffffffffffff60408e01351115613498578687fd5b6134a88e60408f01358f016130bb565b909850965060608d0135955060808d013594506134c760a08e016130a5565b935060c08d0135925060e08d013591506101008d013590509295989b509295989b509295989b565b6000806000806000806000806000806000806101808d8f031215613511578586fd5b67ffffffffffffffff8d351115613526578586fd5b6135338e8e358f01613102565b9b5067ffffffffffffffff60208e0135111561354d578586fd5b61355d8e60208f01358f01613102565b9a5067ffffffffffffffff60408e01351115613577578586fd5b6135878e60408f01358f01613102565b995060608d0135985060808d013597506135a360a08e016130a5565b965060c08d0135955060e08d013594506101008d013593506135c86101208e016130a5565b92506135d76101408e016130a5565b91506135e66101608e016130a5565b90509295989b509295989b509295989b565b600060208284031215613609578081fd5b5051919050565b600080600080600080600080610100898b03121561362c578182fd5b88359750602089013567ffffffffffffffff8082111561364a578384fd5b6136568c838d01613102565b985060408b013591508082111561366b578384fd5b6136778c838d01613102565b975060608b013591508082111561368c578384fd5b506136998b828c01613102565b9550506080890135935060a089013592506136b660c08a016130a5565b91506136c460e08a016130a5565b90509295985092959890939650565b6000806000606084860312156136e7578081fd5b8335925060208401359150604084013561370081613e07565b809150509250925092565b60008060008060808587031215613720578182fd5b8435935060208501359250604085013561373981613e07565b9396929550929360600135925050565b600080600080600060a08688031215613760578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600080600080600080600080610100898b0312156137a4578182fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b60008151808452815b81811015613801576020818501810151868301820152016137e5565b818111156138125782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600060a08201600f88810b8452602060a08186015282895180855260c087019150828b019450855b81811015613906578551850b835294830194918301916001016138e8565b50509790910b6040850152505050606081019290925260809091015292915050565b600060e0825261393b60e083018a6137dc565b828103602084015261394d818a6137dc565b9050828103604084015261396181896137dc565b6060840197909752505060808101939093526001600160a01b0391821660a08401521660c0909101529392505050565b60208082526014908201527f5573657220616c726561647920636c61696d6564000000000000000000000000604082015260600190565b60208082526014908201527f4d61726b657420616c726561647920656e646564000000000000000000000000604082015260600190565b60208082526011908201527f4d696e20616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526019908201527f496e76616c6964207573657220636c61696d20616d6f756e7400000000000000604082015260600190565b60208082526012908201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604082015260600190565b60208082526013908201527f4f6e6c79204d61726b65742043726561746f7200000000000000000000000000604082015260600190565b6020808252600b908201527f4f6e6c792043616c6c6572000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f4163636f756e7420616c726561647920636c61696d6564000000000000000000604082015260600190565b60208082526016908201527f536561736f6e206d617820746f6b656e206d696e747300000000000000000000604082015260600190565b60208082526011908201527f4d617820616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526012908201527f536561736f6e206e6f7420737461727465640000000000000000000000000000604082015260600190565b6020808252600a908201527f4f6e6c792041646d696e00000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f536561736f6e206d617820746f6b656e20636c61696d73000000000000000000604082015260600190565b60208082526014908201527f536561736f6e20616c726561647920656e646564000000000000000000000000604082015260600190565b9182526001600160a01b0316602082015260400190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b918252600f0b602082015260400190565b928352600f9190910b60208301526001600160a01b0316604082015260600190565b918252602082015260400190565b600060c082018883526020888185015287604085015286606085015285608085015260c060a085015281855180845260e0860191508287019350845b81811015613d6f57845183529383019391830191600101613d53565b50909b9a5050505050505050505050565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405181810167ffffffffffffffff81118282101715613dcc57fe5b604052919050565b600067ffffffffffffffff821115613de857fe5b5060209081020190565b6001600160a01b0381168114610c6657600080fd5b80600f0b8114610c6657600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a264697066735822122072595d0bed86c4775b760644b7df97f3dc5dd0ae0759b1d84e9429869d4a993a64736f6c63430007060033",
  "devdoc": {
    "author": "Marto",
    "details": "Feel free to make any adjustments to the code",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "title": "PrecogMasterV6: Contract to manage PrecogMarkets interactions and PrecogToken claims",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 21335,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21337,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "createdMarkets",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 21339,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "currentSeason",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 21341,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "market",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 21343,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "oracle",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21347,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "accountTokenClaims",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(TokenClaim)21290_storage)"
      },
      {
        "astId": 21351,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "userTokenClaims",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TokenClaim)21290_storage)"
      },
      {
        "astId": 21355,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "miningSeasons",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(MiningSeason)21305_storage)"
      },
      {
        "astId": 21359,
        "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(MarketInfo)21320_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(TokenClaim)21290_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PrecogMasterV6.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)21290_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(MarketInfo)21320_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV6.MarketInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketInfo)21320_storage"
      },
      "t_mapping(t_uint256,t_struct(MiningSeason)21305_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV6.MiningSeason)",
        "numberOfBytes": "32",
        "value": "t_struct(MiningSeason)21305_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenClaim)21290_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV6.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)21290_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3530_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3529,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3265_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketInfo)21320_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV6.MarketInfo",
        "members": [
          {
            "astId": 21307,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 21309,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 21311,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "category",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 21313,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21315,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21317,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "creator",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 21319,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "market",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(MiningSeason)21305_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV6.MiningSeason",
        "members": [
          {
            "astId": 21292,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 21294,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21296,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "maxUserClaim",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21298,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "maxTotalClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21300,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "maxTotalMint",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21302,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21304,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "mintedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3530_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3265_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3260,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3264,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenClaim)21290_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV6.TokenClaim",
        "members": [
          {
            "astId": 21283,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21285,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21287,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21289,
            "contract": "contracts/PrecogMasterV6.sol:PrecogMasterV6",
            "label": "claimedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}