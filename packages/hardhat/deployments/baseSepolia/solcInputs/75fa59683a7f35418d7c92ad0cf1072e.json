{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address master) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, master))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, master))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, master))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\n        return predictDeterministicAddress(master, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/ABDKMath64x64.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have.\r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have.\r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    return int64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    require (x <= 0x7FFFFFFFFFFFFFFF);\r\n    return int128 (x << 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    require (x >= 0);\r\n    return uint64 (x >> 64);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    int256 result = x >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    return int256 (x) << 64;\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) + y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) - y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 result = int256(x) * y >> 64;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    if (x == MIN_64x64) {\r\n      require (\r\n        y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n        y <= 0x1000000000000000000000000000000000000000000000000\r\n      );\r\n      return -y << 63;\r\n    } else {\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x;\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint256 absoluteResult = mulu (x, uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (absoluteResult);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    if (y == 0) return 0;\r\n\r\n    require (x >= 0);\r\n\r\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n    uint256 hi = uint256 (x) * (y >> 128);\r\n\r\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    hi <<= 64;\r\n\r\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n    return hi + lo;\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    int256 result = (int256 (x) << 64) / y;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n\r\n    bool negativeResult = false;\r\n    if (x < 0) {\r\n      x = -x; // We rely on overflow behavior here\r\n      negativeResult = true;\r\n    }\r\n    if (y < 0) {\r\n      y = -y; // We rely on overflow behavior here\r\n      negativeResult = !negativeResult;\r\n    }\r\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    require (y != 0);\r\n    uint128 result = divuu (x, y);\r\n    require (result <= uint128 (MAX_64x64));\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return -x;\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    require (x != MIN_64x64);\r\n    return x < 0 ? -x : x;\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    require (x != 0);\r\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n    require (result >= MIN_64x64 && result <= MAX_64x64);\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    return int128 ((int256 (x) + int256 (y)) >> 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    int256 m = int256 (x) * int256 (y);\r\n    require (m >= 0);\r\n    require (m < 0x4000000000000000000000000000000000000000000000000000000000000000);\r\n    return int128 (sqrtu (uint256 (m)));\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    uint256 absoluteResult;\r\n    bool negativeResult = false;\r\n    if (x >= 0) {\r\n      absoluteResult = powu (uint256 (x) << 63, y);\r\n    } else {\r\n      // We rely on overflow behavior here\r\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\r\n      negativeResult = y & 1 > 0;\r\n    }\r\n\r\n    absoluteResult >>= 63;\r\n\r\n    if (negativeResult) {\r\n      require (absoluteResult <= 0x80000000000000000000000000000000);\r\n      return -int128 (absoluteResult); // We rely on overflow behavior here\r\n    } else {\r\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return int128 (absoluteResult); // We rely on overflow behavior here\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    require (x >= 0);\r\n    return int128 (sqrtu (uint256 (x) << 64));\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    int256 msb = 0;\r\n    int256 xc = x;\r\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n    int256 result = msb - 64 << 64;\r\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\r\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n      ux *= ux;\r\n      uint256 b = ux >> 255;\r\n      ux >>= 127 + b;\r\n      result += bit * int256 (b);\r\n    }\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    require (x > 0);\r\n\r\n    return int128 (\r\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    uint256 result = 0x80000000000000000000000000000000;\r\n\r\n    if (x & 0x8000000000000000 > 0)\r\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n    if (x & 0x4000000000000000 > 0)\r\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n    if (x & 0x2000000000000000 > 0)\r\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n    if (x & 0x1000000000000000 > 0)\r\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n    if (x & 0x800000000000000 > 0)\r\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n    if (x & 0x400000000000000 > 0)\r\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n    if (x & 0x200000000000000 > 0)\r\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n    if (x & 0x100000000000000 > 0)\r\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n    if (x & 0x80000000000000 > 0)\r\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n    if (x & 0x40000000000000 > 0)\r\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n    if (x & 0x20000000000000 > 0)\r\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n    if (x & 0x10000000000000 > 0)\r\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n    if (x & 0x8000000000000 > 0)\r\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n    if (x & 0x4000000000000 > 0)\r\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n    if (x & 0x2000000000000 > 0)\r\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n    if (x & 0x1000000000000 > 0)\r\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n    if (x & 0x800000000000 > 0)\r\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n    if (x & 0x400000000000 > 0)\r\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n    if (x & 0x200000000000 > 0)\r\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n    if (x & 0x100000000000 > 0)\r\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n    if (x & 0x80000000000 > 0)\r\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n    if (x & 0x40000000000 > 0)\r\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n    if (x & 0x20000000000 > 0)\r\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n    if (x & 0x10000000000 > 0)\r\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n    if (x & 0x8000000000 > 0)\r\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n    if (x & 0x4000000000 > 0)\r\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n    if (x & 0x2000000000 > 0)\r\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n    if (x & 0x1000000000 > 0)\r\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n    if (x & 0x800000000 > 0)\r\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n    if (x & 0x400000000 > 0)\r\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n    if (x & 0x200000000 > 0)\r\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n    if (x & 0x100000000 > 0)\r\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n    if (x & 0x80000000 > 0)\r\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n    if (x & 0x40000000 > 0)\r\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n    if (x & 0x20000000 > 0)\r\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n    if (x & 0x10000000 > 0)\r\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n    if (x & 0x8000000 > 0)\r\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n    if (x & 0x4000000 > 0)\r\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n    if (x & 0x2000000 > 0)\r\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n    if (x & 0x1000000 > 0)\r\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n    if (x & 0x800000 > 0)\r\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n    if (x & 0x400000 > 0)\r\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n    if (x & 0x200000 > 0)\r\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n    if (x & 0x100000 > 0)\r\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n    if (x & 0x80000 > 0)\r\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n    if (x & 0x40000 > 0)\r\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n    if (x & 0x20000 > 0)\r\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n    if (x & 0x10000 > 0)\r\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n    if (x & 0x8000 > 0)\r\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n    if (x & 0x4000 > 0)\r\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n    if (x & 0x2000 > 0)\r\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n    if (x & 0x1000 > 0)\r\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n    if (x & 0x800 > 0)\r\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n    if (x & 0x400 > 0)\r\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n    if (x & 0x200 > 0)\r\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n    if (x & 0x100 > 0)\r\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n    if (x & 0x80 > 0)\r\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n    if (x & 0x40 > 0)\r\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n    if (x & 0x20 > 0)\r\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n    if (x & 0x10 > 0)\r\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n    if (x & 0x8 > 0)\r\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n    if (x & 0x4 > 0)\r\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n    if (x & 0x2 > 0)\r\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n    if (x & 0x1 > 0)\r\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n    result >>= uint256 (63 - (x >> 64));\r\n    require (result <= uint256 (MAX_64x64));\r\n\r\n    return int128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    require (x < 0x400000000000000000); // Overflow\r\n\r\n    if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n    return exp_2 (int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    require (y != 0);\r\n\r\n    uint256 result;\r\n\r\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n      result = (x << 64) / y;\r\n    else {\r\n      uint256 msb = 192;\r\n      uint256 xc = x >> 192;\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 hi = result * (y >> 128);\r\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n      uint256 xh = x >> 192;\r\n      uint256 xl = x << 64;\r\n\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n      lo = hi << 128;\r\n      if (xl < lo) xh -= 1;\r\n      xl -= lo; // We rely on overflow behavior here\r\n\r\n      assert (xh == hi >> 128);\r\n\r\n      result += xl / y;\r\n    }\r\n\r\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    return uint128 (result);\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\r\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 129.127-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return unsigned 129.127-bit fixed point number\r\n   */\r\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\r\n    if (y == 0) return 0x80000000000000000000000000000000;\r\n    else if (x == 0) return 0;\r\n    else {\r\n      int256 msb = 0;\r\n      uint256 xc = x;\r\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 xe = msb - 127;\r\n      if (xe > 0) x >>= uint256 (xe);\r\n      else x <<= uint256 (-xe);\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n      int256 re = 0;\r\n\r\n      while (y > 0) {\r\n        if (y & 1 > 0) {\r\n          result = result * x;\r\n          y -= 1;\r\n          re += xe;\r\n          if (result >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            result >>= 128;\r\n            re += 1;\r\n          } else result >>= 127;\r\n          if (re < -127) return 0; // Underflow\r\n          require (re < 128); // Overflow\r\n        } else {\r\n          x = x * x;\r\n          y >>= 1;\r\n          xe <<= 1;\r\n          if (x >=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\r\n            x >>= 128;\r\n            xe += 1;\r\n          } else x >>= 127;\r\n          if (xe < -127) return 0; // Underflow\r\n          require (xe < 128); // Overflow\r\n        }\r\n      }\r\n\r\n      if (re > 0) result <<= uint256 (re);\r\n      else if (re < 0) result >>= uint256 (-re);\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    if (x == 0) return 0;\r\n    else {\r\n      uint256 xx = x;\r\n      uint256 r = 1;\r\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n      if (xx >= 0x8) { r <<= 1; }\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1;\r\n      r = (r + x / r) >> 1; // Seven iterations should be enough\r\n      uint256 r1 = x / r;\r\n      return uint128 (r < r1 ? r : r1);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/FakeDai.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract FakeDai is ERC20, Ownable {\r\n    string private constant TOKEN_NAME = \"DAI\";\r\n    string private constant TOKEN_SYMBOL = \"DAI\";\r\n\r\n    constructor(address owner) ERC20(TOKEN_NAME, TOKEN_SYMBOL) {\r\n        transferOwnership(owner);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/IPrecogMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title IPrecogMarket: simple interface to interact with all Precog Markets\n * @author Marto (https://github.com/0xMarto)\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\n */\ninterface IPrecogMarket {\n    // Public market variables\n    function owner() external view returns (address);\n\n    function token() external view returns (address);\n\n    function id() external view returns (uint256);\n\n    function totalOutcomes() external view returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function startTimestamp() external view returns (uint256);\n\n    function endTimestamp() external view returns (uint256);\n\n    function closeTimestamp() external view returns (uint256);\n\n    function result() external view returns (uint256);\n\n    function accountShares(address _account) external view returns (\n        uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed\n    );\n\n    // Events emitted by markets\n    event SharesBought(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenIn);\n    event SharesSold(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\n    event SharesRedeemed(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @notice Initializes the contract with the specified token\n     * @param _token The address of the ERC-20 token to be used for buy, sell, and redeem shares\n     */\n    function initialize(address _token) external;\n\n    /**\n     * @notice Sets up the market with the specified parameters\n     * @param _id The unique identifier for the market\n     * @param _oracle The address of the oracle that will report results\n     * @param _totalOutcomes The number of possible outcomes for the market\n     * @param _subsidy The initial funding used to seed the market (defined on initialized token)\n     * @param _overround The AMM profit margin in basis points (bps) [recommended: (100 * _totalOutcomes)]\n     */\n    function setup(uint256 _id, address _oracle, uint256 _totalOutcomes, uint256 _subsidy, uint256 _overround) external;\n\n    /**\n     * @notice Buys outcome shares for the specified outcome\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\n     * @param _amount The number of outcome tokens to buy (as a signed 64.64-bit fixed point number)\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\n     */\n    function buy(uint256 _outcome, int128 _amount) external returns (uint256 tokenCost);\n\n    /**\n     * @notice Allows buying market shares for a specified account (limited to only Self or Owner)\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\n     * @param _amount The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\n     * @param _account The address of the buyer\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\n     */\n    function _buy(uint256 _outcome, int128 _amount, address _account) external returns (uint256 tokenCost);\n\n    /**\n     * @notice Sells outcome shares for the specified outcome\n     * @param _outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\n     * @param _amount The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\n     */\n    function sell(uint256 _outcome, int128 _amount) external returns (uint256 tokenReturn);\n\n    /**\n     * @notice Allows selling market shares from a specified account (limited to only Self or Owner)\n     * @param _outcome The outcome for which tokens are being sold (e.g.: 1 for YES, 2 for NO)\n     * @param _amount The number of outcome tokens to sell (as a signed 64.64-bit fixed point number)\n     * @param _account The address of the seller\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\n     */\n    function _sell(uint256 _outcome, int128 _amount, address _account) external returns (uint256 tokenReturn);\n\n    /**\n     * @notice Reports the result of the market (limited to only Oracle)\n     * @param _id The unique identifier of the market\n     * @param _outcome The outcome that is reported as the result of the market\n     */\n    function reportResult(uint256 _id, uint256 _outcome) external;\n\n    /**\n     * @notice Redeems the current sender shares for the result of the market\n     * @return redeemedShares The number of shares redeemed\n     */\n    function redeemShares() external returns (uint256 redeemedShares);\n\n    /**\n     * @notice Redeems the received account shares for the result of the market (limited to only Self or Owner)\n     * @param _account The address of the account with shares of the market\n     * @return redeemedShares The number of shares redeemed\n     */\n    function _redeem(address _account) external returns (uint256 redeemedShares);\n\n    /**\n     * @notice Redeems shares in batch for multiple accounts  (limited to only Oracle)\n     * @param _accounts The list of accounts to redeem shares for\n     * @dev The list of accounts could be calculated using the \"SharesBought\" event\n     * @return redeems The number of successful redeems\n     */\n    function redeemBatch(address[] memory _accounts) external returns (uint256 redeems);\n\n    /**\n     * @notice Withdraws any remaining liquidity from the market (limited to only owner)\n     * @param _token The address of the ERC-20 token to withdraw\n     */\n    function withdraw(address _token) external;\n\n    /**\n     * @notice Transfers the ownership of the contract to a new owner (limited to only current owner)\n     * @param _newOwner The address of the new owner\n     */\n    function transferOwnership(address _newOwner) external;\n\n    /**\n     * @notice Update the oracle address of the market (limited to only owner)\n     * @param _newOracle The address of the EOA or contract that can close the market\n     */\n    function updateOracle(address _newOracle) external;\n\n    /**\n     * @notice Updates the start and end timestamps for the market (limited to only owner)\n     * @param _startTimestamp The timestamp when the market starts allowing trading\n     * @param _endTimestamp The timestamp when the market stops allowing trading\n     */\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) external;\n\n    /**\n     * @notice Gets the total collateral spent in the market\n     * @return totalCost The total cost in the form of a signed 64.64-bit fixed point number\n     */\n    function cost() external view returns (int128 totalCost);\n\n    /**\n     * @notice Gets the cost of buying the specified amount of outcome tokens\n     * @param _outcome The outcome for which tokens are being bought\n     * @param _amount The number of outcome tokens to buy (as signed 64.64-bit fixed point number)\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\n     */\n    function buyPrice(uint256 _outcome, int128 _amount) external view returns (int128 tokenCost);\n\n    /**\n     * @notice Gets the return from selling the specified amount of outcome tokens\n     * @param _outcome The outcome for which tokens are being sold\n     * @param _amount The number of outcome tokens to sell (as signed 64.64-bit fixed point number)\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\n     */\n    function sellPrice(uint256 _outcome, int128 _amount) external view returns (int128 tokenReturn);\n\n    /**\n     * @notice Gets the current market state information\n     * @return totalShares The current total shares minted for all outcomes of the market\n     * @return sharesBalances All shares balances (indexed by outcome)\n     * @return currentCost The current liquidity of the market\n     * @return totalBuys Buys counter of the market\n     * @return totalSells Sells counter of the market\n     */\n    function getMarketInfo() external view returns (\n        int128 totalShares, int128[] memory sharesBalances, int128 currentCost, uint256 totalBuys, uint256 totalSells\n    );\n\n    /**\n     * @notice Get current market buy and sell prices for all outcomes\n     * @dev Helper function to fast calculate market prediction and spreads\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\n     */\n    function getPrices() external view returns (uint256[] memory buyPrices, uint256[] memory sellPrices);\n\n    /**\n     * @notice Gets the amount of shares that an account owns for all outcomes\n     * @param _account The address of the account with shares of the market\n     * @return balances The balances of shares for all outcomes (indexed by outcome)\n     */\n    function getAccountOutcomeBalances(address _account) external view returns (uint256[] memory balances);\n}\n"
    },
    "contracts/IPrecogToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title IPrecogToken: interface to interact with Precog Token\r\n */\r\ninterface IPrecogToken is IERC20 {\r\n    /**\r\n     * @notice Mint new tokens for the specified address (limited to only owner)\r\n     * @param to The address of the new tokens receiver\r\n     * @param amount The amount of tokens to be minted\r\n     * @dev Emits a {Transfer} event from the zero address as source\r\n     */\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Burn already minted tokens from the specified address (limited to only owner)\r\n     * @param from The address of the token source\r\n     * @param amount The amount of tokens to be burn\r\n     * @dev Emits a {Transfer} event to the zero address as destination\r\n     */\r\n    function burn(address from, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another (limited to only owner)\r\n     * @param from The address of the token source\r\n     * @param to The address of the token receiver\r\n     * @dev Emits a {Transfer} event\r\n     */\r\n    function move(address from, address to, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Transfer ownership of the contract to a new address (limited to only owner)\r\n     * @param newOwner The address of the new owner\r\n     * @dev Emits a {OwnershipTransferred} event with the previous and new owner addresses\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    /**\r\n     * @notice Get the current owner of the contract\r\n     * @return Address of the current owner\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * @notice Emitted when ownership of the contract is transferred to a new address\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n"
    },
    "contracts/PrecogMarketV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport {ABDKMath} from \"./ABDKMath64x64.sol\";\n\n/**\n * @title PrecogMasterV6: An implementation for liquidity-sensitive LMSR market maker in Solidity\n * @author Marto (built based on Abdulla Al-Kamil implementation)\n * @dev Feel free to make any adjustments to the code\n */\ncontract PrecogMarketV6 {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    struct SharesInfo {\n        uint256 buys;  // Counter on Buy\n        uint256 sells;  // Counter on Sell\n        uint256 deposited; // Collateral-In on Buys\n        uint256 withdrew; // Collateral-Out on Sells\n        uint256 redeemed; // Collateral-Out on Redeems\n        mapping(uint256 => uint256) balances;  // Shares balances (by outcome) [has an custom getter]\n    }\n\n    // Public market variables\n    address public owner;  // Should be the PrecogMaster contract\n    address public token;  // Collateral to Buy and redeem shares\n    uint256 public id;  // Unique Identifier for the market\n    address public oracle;  // EOA or Contract in change to reportResults\n    uint256 public startTimestamp;  // Time when Buy/Sell shares are enabled\n    uint256 public endTimestamp;  // Time when Buy/Sell shares are disabled\n    uint256 public closeTimestamp;  // Time when results were reported\n    uint256 public result;  // Final outcome of the market (published by the oracle)\n    mapping(address => SharesInfo) public accountShares;  // Account shares balances and info\n\n    // Private market variables\n    // Note: This contract uses the ABDKMath library to allow for math functions such as logarithms and exponents.\n    //       All the sensitive state variables are stored as int128 (signed 64.64 bit fixed point number).\n    uint256 private totalOutcomes;\n    int128[] private shares;\n    int128 private beta;\n    int128 private alpha;\n    int128 private dust;\n    int128 private currentCost;\n    int128 private totalShares;\n    uint256 private totalBuys;\n    uint256 private totalSells;\n    bool private marketSetup;\n    bool private internalCall;\n\n    event SharesBought(address indexed account, uint256 amount, uint256 tokenIn);\n    event SharesSold(address indexed account, uint256 amount, uint256 tokenOut);\n    event SharesRedeemed(address indexed account, uint256 amount, uint256 tokenOut);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyAfterSetup {\n        require(marketSetup == true, \"Not setup\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner\");\n        _;\n    }\n\n    modifier onlyOwnerOrInternal() {\n        require(msg.sender == owner || internalCall, \"Only owner or self\");\n        _;\n        internalCall = false;\n    }\n\n    modifier onlyOracle() {\n        require(msg.sender == oracle, \"Only oracle\");\n        _;\n    }\n\n    /**\n     * @notice Constructor like function for the market maker\n     * @param _token ERC-20 token will be used to purchase and redeem rewards for this Market\n     */\n    function initialize(address _token) public {\n        require(owner == address(0) && token == address(0), \"Already initialized\");\n        owner = msg.sender;\n        token = _token;\n    }\n\n    /**\n     * @notice Set up some of the variables for the market maker\n     * @param _id The market id should be unique for each master\n     * @param _oracle The address for the EOA or contract which will report the result for this Market\n     * @param _totalOutcomes The number of different outcomes possible for this market (currently fixed at 2)\n     * @param _subsidy How much initial funding is used to seed the market (denominated on initialized token)\n     * @param _overround AMM profit margin in bps (Note that 200 represents 2% of the subsidy)\n     */\n    function setup(uint _id, address _oracle, uint _totalOutcomes, uint _subsidy, uint _overround) public onlyOwner {\n        require(!marketSetup, \"Already setup\");\n        require(_overround > 0, \"Unsupported overround\");\n\n        // Get subsidy tokens\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _subsidy);\n\n        // Save basic parameters\n        id = _id;\n        oracle = _oracle;\n        totalOutcomes = _totalOutcomes;\n\n        // Calculate initialization variables\n        int128 initialSubsidy = getTokenEth(token, _subsidy);\n        int128 n = ABDKMath.fromUInt(_totalOutcomes);\n        int128 overround = ABDKMath.divu(_overround, 10000); // Note: if the overround is too low, then exp overflows\n        alpha = ABDKMath.div(overround, ABDKMath.mul(n, ABDKMath.ln(n)));\n        beta = ABDKMath.mul(ABDKMath.mul(initialSubsidy, n), alpha);\n        shares = new int128[](totalOutcomes.add(1));\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\n            shares[outcome] = initialSubsidy;\n            totalShares = ABDKMath.add(totalShares, initialSubsidy);\n        }\n\n        // Initialize token leak mitigation of 0.001% (could be a setup parameter in the future)\n        // Note: Needed to avoid leaks due to rounding errors on math logarithmic and exponential approximations\n        dust = ABDKMath.fromUInt(100000);  // 100k as signed 64.64 bit fixed point\n\n        // Register successful initialization\n        marketSetup = true;\n\n        // Optimization: pre calculate current cost to avoid extra calculation on buys and sells\n        currentCost = cost();\n    }\n\n    /**\n     * @notice This function is used to buy outcome tokens.\n     * @param _outcome The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)\n     * @param _amount This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)\n     * @return _cost The total amount of tokens received from selling the _amount of shares\n     */\n    function buy(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 _cost) {\n        // Send BUY call to internal function with msg sender\n        internalCall = true;\n        return _buy(_outcome, _amount, msg.sender);\n    }\n\n    /**\n     * Internal Buy function used by the public Buy function and PrecogMaster (to facilitate token approvals)\n     */\n    function _buy(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal returns (uint256 _cost) {\n        require(_outcome > 0 && _outcome <= totalOutcomes, \"Invalid outcome\");\n        require(_amount > 0, \"Invalid amount\");\n        require(block.timestamp >= startTimestamp, \"Market not started\");\n        require(endTimestamp == 0 || block.timestamp <= endTimestamp, \"Market already ended\");\n        require(closeTimestamp == 0, \"Market already closed\");\n\n        // Add amount of shares to be bought from individual and total shares counters\n        shares[_outcome] = ABDKMath.add(shares[_outcome], _amount);\n        totalShares = ABDKMath.add(totalShares, _amount);\n\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\n        beta = ABDKMath.mul(totalShares, alpha);\n\n        // Calculate new current cost and price to pay. After that, update current cost variable\n        int128 sumTotal;\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\n        }\n        int128 newCost = ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\n        int128 deltaCost = ABDKMath.sub(newCost, currentCost);\n        currentCost = newCost;\n\n        // Get amount of tokens from sender (as current payment)\n        uint tokenCost = getTokenWei(token, deltaCost);\n        require(tokenCost > 0, \"Invalid cost\");\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenCost);\n        uint outcomeShares = getTokenWei(token, _amount);\n\n        // Register BUY in market total and Account details\n        totalBuys = totalBuys.add(1);\n        accountShares[_account].buys = accountShares[_account].buys.add(1);\n        accountShares[_account].deposited = accountShares[_account].deposited.add(tokenCost);\n        accountShares[_account].balances[_outcome] = accountShares[_account].balances[_outcome].add(outcomeShares);\n\n        emit SharesBought(_account, outcomeShares, tokenCost);\n        return tokenCost;\n    }\n\n    /**\n     * @notice This function is used to sell outcome tokens already bought.\n     * @param _outcome The outcome(s) which a user is buying tokens for (e.g.: 1 for YES, 2 for NO)\n     * @param _amount This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)\n     * @return _returned The total amount of tokens received from selling the _amount of shares\n     */\n    function sell(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 _returned) {\n        // Send SELL call to internal function\n        internalCall = true;\n        return _sell(_outcome, _amount, msg.sender);\n    }\n\n    /**\n     * Internal Sell function used by the public Sell function and PrecogMaster (to facilitate token approvals)\n     */\n    function _sell(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal returns (uint256) {\n        require(_outcome > 0 && _outcome <= totalOutcomes, \"Invalid outcome\");\n        require(_amount > 0, \"Invalid amount\");\n        require(block.timestamp >= startTimestamp, \"Market not started\");\n        require(endTimestamp == 0 || block.timestamp <= endTimestamp, \"Market already ended\");\n        require(closeTimestamp == 0, \"Market already closed\");\n\n        // Remove amount of shares to be sold from individual and total shares counters\n        shares[_outcome] = ABDKMath.sub(shares[_outcome], _amount);\n        totalShares = ABDKMath.sub(totalShares, _amount);\n\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\n        beta = ABDKMath.mul(totalShares, alpha);\n\n        // Calculate new cost and tokens to return. After that, update current cost variable\n        int128 sumTotal;\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\n        }\n        int128 newCost = ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\n        int128 deltaCost = ABDKMath.sub(currentCost, newCost);\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // Token leak mitigation\n        currentCost = newCost;\n\n        // Calculate return amount of token to send\n        uint tokenReturn = getTokenWei(token, ABDKMath.sub(deltaCost, deltaDust));\n\n        require(tokenReturn > 0, \"Invalid return\");\n        uint outcomeShares = getTokenWei(token, _amount);\n\n        // Check that the received account have the amount of shares to sell\n        require(accountShares[_account].balances[_outcome] >= outcomeShares, \"Insufficient balance\");\n\n        // Register SELL in market total and Account details\n        totalSells = totalSells.add(1);\n        accountShares[_account].sells = accountShares[_account].sells.add(1);\n        accountShares[_account].withdrew = accountShares[_account].withdrew.add(tokenReturn);\n        accountShares[_account].balances[_outcome] = accountShares[_account].balances[_outcome].sub(outcomeShares);\n\n        // Transfer collateral tokens to received account\n        IERC20(token).safeTransfer(_account, tokenReturn);\n\n        emit SharesSold(_account, outcomeShares, tokenReturn);\n        return tokenReturn;\n    }\n\n    /**\n     * @notice Used to update open market periods\n     * @param _startTimestamp Block timestamp when the market start allowing shares trading\n     * @param _endTimestamp Block timestamp when the market ends trading and enable report results\n     */\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) public onlyOwner {\n        startTimestamp = _startTimestamp;\n        endTimestamp = _endTimestamp;\n    }\n\n    /**\n     * @notice Used to update oracle address\n     * @param _newOracle address of an EOA or contract that can close the market\n     */\n    function updateOracle(address _newOracle) public onlyOwner {\n        require(_newOracle != address(0), \"Invalid new oracle\");\n        oracle = _newOracle;\n    }\n\n    /**\n     * @notice Used to report results of the market (only for defined oracle)\n     * @param _id Unique identifier received on market setup\n     * @param _outcome The resulted outcome of the market\n     */\n    function reportResult(uint256 _id, uint256 _outcome) public onlyOracle {\n        // Validate received inputs\n        require(_id == id, \"Invalid market\");\n        require(_outcome > 0 && _outcome <= totalOutcomes, \"Invalid outcome\");\n\n        // Check current state of the market\n        require(block.timestamp > endTimestamp, \"Market not ended\");\n        require(closeTimestamp == 0, \"Market already closed\");\n\n        // Register reported results and register current time\n        result = _outcome;\n        closeTimestamp = block.timestamp;\n    }\n\n    /**\n     * @notice Used to redeem token gains (only the market is already closed)\n     * @dev The redeem account will be the current msg sender of the tx\n     */\n    function redeemShares() public onlyAfterSetup returns (uint256 redeemedShares) {\n        internalCall = true;\n        return _redeem(msg.sender);\n    }\n\n    /**\n     * @notice Used to redeem token gains in batch (could only be used by the oracle)\n     * @dev The list of accounts could be calculated using the \"SharesBought\" event\n     */\n    function redeemBatch(address[] memory _accounts) public onlyAfterSetup onlyOracle returns (uint256 redeems) {\n        internalCall = true;\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            try this._redeem(_accounts[i]) {\n                redeems.add(1);\n            } catch {\n                // CASE: `_redeem` call reverted\n                // This could be a expected if the account don't have redeemable shares\n            }\n        }\n        return redeems;\n    }\n\n    /**\n     * Internal Redeem function used by single share redeeming and redeem in batch\n     */\n    function _redeem(address _account) public onlyOwnerOrInternal returns (uint256 redeemedShares) {\n        // Check current state of the market and received account\n        require(closeTimestamp > 0, \"Market not closed\");\n        require(accountShares[_account].redeemed == 0, \"Shares already redeemed\");\n\n        // Get amount of shares to be redeemed for received account\n        redeemedShares = accountShares[_account].balances[result];\n        require(redeemedShares > 0, \"Nothing to redeem\");\n\n        // Register amount of shares redeemed and send corresponding collateral tokens (ratio 1:1)\n        accountShares[_account].redeemed = redeemedShares;\n        IERC20(token).safeTransfer(_account, redeemedShares);\n\n        emit SharesRedeemed(_account, redeemedShares, redeemedShares);\n        return redeemedShares;\n    }\n\n    /**\n     * @notice Used to retrieve any liquidity left on the market (allowed only when market is closed)\n     */\n    function withdraw(address _token) public onlyAfterSetup onlyOwner {\n        require(closeTimestamp > 0, \"Market not closed\");\n        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Admin function to transfer the ownership of this contract\n     */\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\n        require(_newOwner != address(0), \"Invalid new owner\");\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n    /**\n     *  @notice Total amount of collateral spent in this Market\n     *  For example, if a market was seeded with 2000 PRE and then a further 20 PRE has been spent,\n     *  this function will return 2020 PRE.\n     */\n    function cost() public view onlyAfterSetup returns (int128) {\n        int128 sumTotal;\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\n        }\n        return ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\n    }\n\n    /**\n     *  This function will tell you the cost (similar to above) after a proposed BUY transaction.\n     */\n    function costAfterBuy(uint256 _outcome, int128 _amount) internal view returns (int128) {\n        int128 newSumTotal;\n        int128[] memory newShares = new int128[](shares.length);\n        int128 newTotalShares = totalShares;\n\n        // Add new amount of shares to received outcome\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\n            if (outcome == _outcome) {\n                newShares[outcome] = ABDKMath.add(shares[outcome], _amount);\n                newTotalShares = ABDKMath.add(newTotalShares, _amount);\n            } else {\n                newShares[outcome] = shares[outcome];\n            }\n        }\n\n        // Calculate new cost based on newTotalShares and newQ values\n        int128 newBeta = ABDKMath.mul(newTotalShares, alpha);\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newShares[outcome], newBeta)));\n        }\n        return ABDKMath.mul(newBeta, ABDKMath.ln(newSumTotal));\n    }\n\n    /**\n     *  This function will tell you the cost (similar to above) after a proposed SELL transaction.\n     */\n    function costAfterSell(uint256 _outcome, int128 _amount) internal view returns (int128) {\n        int128 newSumTotal;\n        int128[] memory newShares = new int128[](shares.length);\n        int128 newTotalShares = totalShares;\n\n        // Add new amount of shares to received outcome\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\n            if (outcome == _outcome) {\n                newShares[outcome] = ABDKMath.sub(shares[outcome], _amount);\n                newTotalShares = ABDKMath.sub(newTotalShares, _amount);\n            } else {\n                newShares[outcome] = shares[outcome];\n            }\n        }\n\n        // Calculate new cost based on newTotalShares and newShares values\n        int128 newBeta = ABDKMath.mul(newTotalShares, alpha);\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newShares[outcome], newBeta)));\n        }\n        return ABDKMath.mul(newBeta, ABDKMath.ln(newSumTotal));\n    }\n\n    /**\n     *  This function tells you how much it will cost to make a particular BUY trade.\n     *  It does this by calculating the difference between the current cost and the cost after the trade.\n     */\n    function buyPrice(uint256 _outcome, int128 _amount) public view returns (int128) {\n        return ABDKMath.sub(costAfterBuy(_outcome, _amount), currentCost);\n    }\n\n    /**\n     *  This function tells you how much it will return making a particular SELL trade.\n     *  It does this by calculating the difference between the current cost and the cost after the trade.\n     */\n    function sellPrice(uint256 _outcome, int128 _amount) public view returns (int128) {\n        int128 deltaCost = ABDKMath.sub(currentCost, costAfterSell(_outcome, _amount));\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // token leak mitigation\n        return ABDKMath.sub(deltaCost, deltaDust);\n    }\n\n    /**\n     *  Get current market state information:\n     *  total shares (all outcomes), shares balances (by outcome), current liquidity, buys counter, sells counter\n     */\n    function getMarketInfo() public view returns (int128, int128[] memory, int128, uint256, uint256) {\n        int128[] memory sharesBalances = new int128[](totalOutcomes.add(1));\n\n        if (!marketSetup) {\n            return (0, sharesBalances, 0, 0, 0);\n        }\n\n        // Populate shares balances based on total outcomes configured for this market\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\n            sharesBalances[outcome] = shares[outcome];\n        }\n\n        return (totalShares, sharesBalances, currentCost, totalBuys, totalSells);\n    }\n\n    /**\n     *  Get amount of shares that an account owns for all outcomes (index 0 should will always be empty)\n     */\n    function getAccountOutcomeBalances(address _account) public view returns (uint256[] memory) {\n        uint256[] memory balances = new uint256[](totalOutcomes.add(1));\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\n            balances[outcome] = accountShares[_account].balances[outcome];\n        }\n        return balances;\n    }\n\n    /**\n     *  Helper function: int128 (signed 64.64 bit fixed point number) [in ether] -> uint256 token amount [in wei]\n     */\n    function getTokenWei(address _token, int128 _amount) internal view returns (uint256) {\n        uint256 d = ERC20(_token).decimals();\n        return ABDKMath.mulu(_amount, 10 ** d);\n    }\n\n    /**\n     *  Helper function: uint256 token amount [in wei] -> int128 (signed 64.64 bit fixed point number) [in ether]\n     */\n    function getTokenEth(address _token, uint256 _amount) internal view returns (int128) {\n        uint256 d = ERC20(_token).decimals();\n        return ABDKMath.divu(_amount, 10 ** d);\n    }\n}\n"
    },
    "contracts/PrecogMarketV7.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./ABDKMath64x64.sol\";\r\n\r\n/**\r\n * @title PrecogMasterV7: An implementation for liquidity-sensitive LMSR market maker in Solidity\r\n * @author Marto (https://github.com/0xMarto)\r\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\r\n */\r\ncontract PrecogMarketV7 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct SharesInfo {\r\n        uint256 buys;  // Total amount of Buys\r\n        uint256 sells;  // Total amount of Sells\r\n        uint256 deposited; // Total collateral-in on Buys\r\n        uint256 withdrew; // Total collateral-Out on Sells\r\n        uint256 redeemed; // Total collateral-Out on Redeems\r\n        mapping(uint256 => uint256) balances;  // Shares balances by outcome (has an custom getter)\r\n    }\r\n\r\n    // Public variables\r\n    address public owner;  // Should be the PrecogMaster contract\r\n    address public token;  // Collateral to Buy and redeem shares\r\n    uint256 public id;  // Unique Identifier for the market\r\n    uint256 public totalOutcomes; // Amount of outcomes (2 usually mean 1=YES, 2=NO)\r\n    address public oracle;  // EOA or Contract in change to reportResults\r\n    uint256 public startTimestamp;  // Time when Buy/Sell shares are enabled\r\n    uint256 public endTimestamp;  // Time when Buy/Sell shares are disabled\r\n    uint256 public closeTimestamp;  // Time when results were reported\r\n    uint256 public result;  // Final outcome of the market (published by the oracle)\r\n    mapping(address => SharesInfo) public accountShares;  // Account shares balances and info\r\n\r\n    // Private variables\r\n    int128[] private shares;  // Amount of shares indexed by outcome (signed 64.64 bit fixed point number)\r\n    int128 private beta;  // LMSR market liquidity variable (signed 64.64 bit fixed point number)\r\n    int128 private alpha;  // Liquidity-Sensitive LMSR market variable (signed 64.64 bit fixed point number)\r\n    int128 private dust;  // Token leak mitigation variable used in share sells (signed 64.64 bit fixed point number)\r\n    int128 private currentCost;  // Current amount of liquidity in the market (signed 64.64 bit fixed point number)\r\n    int128 private totalShares;  // Total amount of shares of all outcomes (signed 64.64 bit fixed point number)\r\n    uint256 private totalBuys;  // Total amount of buys made from all account\r\n    uint256 private totalSells;  // Total amount of sells made from all account\r\n    bool private marketSetup;  // Flag that indicates that a market was configured correctly\r\n    bool private internalCall;  // Flag that indicates that the current call is internal\r\n\r\n    // Events emitted\r\n    event SharesBought(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenIn);\r\n    event SharesSold(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\r\n    event SharesRedeemed(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Modifiers\r\n    modifier onlyAfterSetup {\r\n        require(marketSetup == true, \"Not setup\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrInternal() {\r\n        require(msg.sender == owner || internalCall, \"Only owner or self\");\r\n        _;\r\n        internalCall = false;\r\n    }\r\n\r\n    modifier onlyOracle() {\r\n        require(msg.sender == oracle, \"Only oracle\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor like function for the market maker\r\n     * @param _token ERC-20 token will be used to purchase and redeem rewards for this Market\r\n     */\r\n    function initialize(address _token) public {\r\n        require(owner == address(0) && token == address(0), \"Already initialized\");\r\n        owner = msg.sender;\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets up the market with the specified parameters\r\n     * @param _id The unique identifier for the market\r\n     * @param _oracle The address of the oracle that will report results\r\n     * @param _totalOutcomes The number of possible outcomes for the market\r\n     * @param _subsidy The initial funding used to seed the market (defined on initialized token)\r\n     * @param _overround The AMM profit margin in basis points (bps) [recommended: (100 * _totalOutcomes)]\r\n     */\r\n    function setup(uint _id, address _oracle, uint _totalOutcomes, uint _subsidy, uint _overround) public onlyOwner {\r\n        require(!marketSetup, \"Already setup\");\r\n        require(_overround > 0, \"Unsupported overround\");\r\n        require(_totalOutcomes > 0, \"Unsupported outcomes\");\r\n\r\n        // Get initial funding tokens from sender\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _subsidy);\r\n\r\n        // Save basic parameters\r\n        id = _id;\r\n        oracle = _oracle;\r\n        totalOutcomes = _totalOutcomes;\r\n\r\n        // Calculate initialization variables\r\n        int128 initialSubsidy = getTokenEth(token, _subsidy);\r\n        int128 n = ABDKMath.fromUInt(_totalOutcomes);\r\n        int128 overround = ABDKMath.divu(_overround, 10_000); // if the overround is too low the exp function overflows\r\n        alpha = ABDKMath.div(overround, ABDKMath.mul(n, ABDKMath.ln(n)));\r\n        beta = ABDKMath.mul(ABDKMath.mul(initialSubsidy, n), alpha);\r\n        shares = new int128[](totalOutcomes.add(1));\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            shares[outcome] = initialSubsidy;\r\n            totalShares = ABDKMath.add(totalShares, initialSubsidy);\r\n        }\r\n\r\n        // Initialize token leak mitigation of 0.001% (could be a setup parameter in the future)\r\n        // Note: Needed to avoid leaks due to rounding errors on math logarithmic and exponential approximations\r\n        dust = ABDKMath.fromUInt(100_000);  // 100k as signed 64.64 bit fixed point\r\n\r\n        // Register successful initialization\r\n        marketSetup = true;\r\n\r\n        // Optimization: pre calculate current cost to avoid extra calculation on buys and sells\r\n        currentCost = cost();\r\n    }\r\n\r\n    /**\r\n     * @notice Buys outcome shares for the specified outcome\r\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\r\n     * @param _amount The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\r\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\r\n     */\r\n    function buy(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 tokenCost) {\r\n        // Send BUY call to internal function with msg sender\r\n        internalCall = true;\r\n        return _buy(_outcome, _amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows buying market shares for a specified account (limited to only Self or Owner)\r\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\r\n     * @param _amount The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\r\n     * @param _account The address of the buyer\r\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\r\n     */\r\n    function _buy(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal\r\n    returns (uint256 tokenCost) {\r\n        require(_outcome > 0 && _outcome <= totalOutcomes, \"Invalid outcome\");\r\n        require(_amount > 0, \"Invalid amount\");\r\n        require(block.timestamp >= startTimestamp, \"Market not started\");\r\n        require(endTimestamp == 0 || block.timestamp <= endTimestamp, \"Market already ended\");\r\n        require(closeTimestamp == 0, \"Market already closed\");\r\n\r\n        // Add amount of shares to be bought from individual and total shares counters\r\n        shares[_outcome] = ABDKMath.add(shares[_outcome], _amount);\r\n        totalShares = ABDKMath.add(totalShares, _amount);\r\n\r\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\r\n        beta = ABDKMath.mul(totalShares, alpha);\r\n\r\n        // Calculate new current cost and price to pay. After that, update current cost variable\r\n        int128 sumTotal;\r\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\r\n        }\r\n        int128 newCost = ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\r\n        int128 deltaCost = ABDKMath.sub(newCost, currentCost);\r\n        currentCost = newCost;\r\n\r\n        // Get amount of tokens from sender (as current payment)\r\n        tokenCost = getTokenWei(token, deltaCost);\r\n        require(tokenCost > 0, \"Invalid cost\");\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenCost);\r\n        uint outcomeShares = getTokenWei(token, _amount);\r\n\r\n        // Register BUY in market total and Account details\r\n        totalBuys = totalBuys.add(1);\r\n        accountShares[_account].buys = accountShares[_account].buys.add(1);\r\n        accountShares[_account].deposited = accountShares[_account].deposited.add(tokenCost);\r\n        accountShares[_account].balances[_outcome] = accountShares[_account].balances[_outcome].add(outcomeShares);\r\n\r\n        emit SharesBought(_account, _outcome, outcomeShares, tokenCost);\r\n        return tokenCost;\r\n    }\r\n\r\n    /**\r\n     * @notice Sells outcome shares for the specified outcome\r\n     * @param _outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\r\n     * @param _amount The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\r\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\r\n     */\r\n    function sell(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 tokenReturn) {\r\n        // Send SELL call to internal function\r\n        internalCall = true;\r\n        return _sell(_outcome, _amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows selling market shares from a specified account (limited to only Self or Owner)\r\n     * @param _outcome The outcome for which shares are being sold (e.g.: 1 for YES, 2 for NO)\r\n     * @param _amount The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\r\n     * @param _account The address of the seller\r\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\r\n     */\r\n    function _sell(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal\r\n    returns (uint256 tokenReturn) {\r\n        require(_outcome > 0 && _outcome <= totalOutcomes, \"Invalid outcome\");\r\n        require(_amount > 0, \"Invalid amount\");\r\n        require(block.timestamp >= startTimestamp, \"Market not started\");\r\n        require(endTimestamp == 0 || block.timestamp <= endTimestamp, \"Market already ended\");\r\n        require(closeTimestamp == 0, \"Market already closed\");\r\n\r\n        // Remove amount of shares to be sold from individual and total shares counters\r\n        shares[_outcome] = ABDKMath.sub(shares[_outcome], _amount);\r\n        totalShares = ABDKMath.sub(totalShares, _amount);\r\n\r\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\r\n        beta = ABDKMath.mul(totalShares, alpha);\r\n\r\n        // Calculate new cost and tokens to return. After that, update current cost variable\r\n        int128 sumTotal;\r\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\r\n        }\r\n        int128 newCost = ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\r\n        int128 deltaCost = ABDKMath.sub(currentCost, newCost);\r\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // Token leak mitigation\r\n        currentCost = newCost;\r\n\r\n        // Calculate return amount of token to send\r\n        tokenReturn = getTokenWei(token, ABDKMath.sub(deltaCost, deltaDust));\r\n\r\n        require(tokenReturn > 0, \"Invalid return\");\r\n        uint outcomeShares = getTokenWei(token, _amount);\r\n\r\n        // Check that the received account have the amount of shares to sell\r\n        require(accountShares[_account].balances[_outcome] >= outcomeShares, \"Insufficient balance\");\r\n\r\n        // Register SELL in market total and Account details\r\n        totalSells = totalSells.add(1);\r\n        accountShares[_account].sells = accountShares[_account].sells.add(1);\r\n        accountShares[_account].withdrew = accountShares[_account].withdrew.add(tokenReturn);\r\n        accountShares[_account].balances[_outcome] = accountShares[_account].balances[_outcome].sub(outcomeShares);\r\n\r\n        // Transfer collateral tokens to received account\r\n        IERC20(token).safeTransfer(_account, tokenReturn);\r\n\r\n        emit SharesSold(_account, _outcome, outcomeShares, tokenReturn);\r\n        return tokenReturn;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the start and end timestamps for the market (limited to only owner)\r\n     * @param _startTimestamp The timestamp when the market starts allowing trading\r\n     * @param _endTimestamp The timestamp when the market stops allowing trading\r\n     */\r\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) public onlyOwner {\r\n        startTimestamp = _startTimestamp;\r\n        endTimestamp = _endTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Update the oracle address of the market (limited to only owner)\r\n     * @param _newOracle The address of the EOA or contract that can close the market\r\n     */\r\n    function updateOracle(address _newOracle) public onlyOwner {\r\n        require(_newOracle != address(0), \"Invalid new oracle\");\r\n        oracle = _newOracle;\r\n    }\r\n\r\n    /**\r\n     * @notice Reports the result of the market (limited to only Oracle)\r\n     * @param _id The unique identifier of the market\r\n     * @param _outcome The outcome that is reported as the result of the market\r\n     */\r\n    function reportResult(uint256 _id, uint256 _outcome) public onlyOracle {\r\n        // Validate received inputs\r\n        require(_id == id, \"Invalid market\");\r\n        require(_outcome > 0 && _outcome <= totalOutcomes, \"Invalid outcome\");\r\n\r\n        // Check current state of the market\r\n        require(block.timestamp > endTimestamp, \"Market not ended\");\r\n        require(closeTimestamp == 0, \"Market already closed\");\r\n\r\n        // Register reported results and register current time\r\n        result = _outcome;\r\n        closeTimestamp = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the current sender shares for the result of the market\r\n     * @return redeemedShares The number of shares redeemed\r\n     */\r\n    function redeemShares() public onlyAfterSetup returns (uint256 redeemedShares) {\r\n        internalCall = true;\r\n        return _redeem(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems shares in batch for multiple accounts  (limited to only Oracle)\r\n     * @param _accounts The list of accounts to redeem shares for\r\n     * @dev The list of accounts could be calculated using the \"SharesBought\" event\r\n     * @return redeems The number of successful redeems\r\n     */\r\n    function redeemBatch(address[] memory _accounts) public onlyAfterSetup onlyOracle returns (uint256 redeems) {\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            internalCall = true;\r\n            try this._redeem(_accounts[i]) {\r\n                redeems.add(1);\r\n            } catch {\r\n                // CASE: `_redeem` call reverted (expected if the account don't have redeemable shares)\r\n                internalCall = false; // Disable internal just incase of revert\r\n            }\r\n        }\r\n        return redeems;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the received account shares for the result of the market (limited to only Self or Owner)\r\n     * @param _account The address of the account with shares of the market\r\n     * @return redeemedShares The number of shares redeemed\r\n     */\r\n    function _redeem(address _account) public onlyOwnerOrInternal returns (uint256 redeemedShares) {\r\n        // Check current state of the market and received account\r\n        require(closeTimestamp > 0, \"Market not closed\");\r\n        require(accountShares[_account].redeemed == 0, \"Shares already redeemed\");\r\n\r\n        // Get amount of shares to be redeemed for received account\r\n        redeemedShares = accountShares[_account].balances[result];\r\n        require(redeemedShares > 0, \"Nothing to redeem\");\r\n\r\n        // Register amount of shares redeemed and send corresponding collateral tokens (ratio 1:1)\r\n        accountShares[_account].redeemed = redeemedShares;\r\n        IERC20(token).safeTransfer(_account, redeemedShares);\r\n\r\n        emit SharesRedeemed(_account, result, redeemedShares, redeemedShares);\r\n        return redeemedShares;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws any remaining liquidity from the market (limited to only owner)\r\n     * @param _token The address of the ERC-20 token to withdraw\r\n     */\r\n    function withdraw(address _token) public onlyAfterSetup onlyOwner {\r\n        require(closeTimestamp > 0, \"Market not closed\");\r\n        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers the ownership of the contract to a new owner (limited to only current owner)\r\n     * @param _newOwner The address of the new owner\r\n     */\r\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid new owner\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the total collateral spent in the market\r\n     * @return totalCost The total cost in the form of a signed 64.64-bit fixed point number\r\n     */\r\n    function cost() public view onlyAfterSetup returns (int128 totalCost) {\r\n        int128 sumTotal;\r\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\r\n        }\r\n        return ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the cost of buying the specified amount of outcome shares\r\n     * @param _outcome The outcome for which shares are being bought\r\n     * @param _amount The number of outcome shares to buy (as signed 64.64-bit fixed point number)\r\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\r\n     */\r\n    function buyPrice(uint256 _outcome, int128 _amount) public view returns (int128 tokenCost) {\r\n        return ABDKMath.sub(costAfterBuy(_outcome, _amount), currentCost);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the return from selling the specified amount of outcome shares\r\n     * @param _outcome The outcome for which shares are being sold\r\n     * @param _amount The number of outcome shares to sell (as signed 64.64-bit fixed point number)\r\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\r\n     */\r\n    function sellPrice(uint256 _outcome, int128 _amount) public view returns (int128 tokenReturn) {\r\n        int128 deltaCost = ABDKMath.sub(currentCost, costAfterSell(_outcome, _amount));\r\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // token leak mitigation\r\n        return ABDKMath.sub(deltaCost, deltaDust);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current market state information\r\n     * @return totalShares The current total shares minted for all outcomes of the market\r\n     * @return sharesBalances All shares balances (indexed by outcome)\r\n     * @return currentCost The current liquidity of the market\r\n     * @return totalBuys Buys counter of the market\r\n     * @return totalSells Sells counter of the market\r\n     */\r\n    function getMarketInfo() public view returns (int128, int128[] memory, int128, uint256, uint256) {\r\n        int128[] memory sharesBalances = new int128[](totalOutcomes.add(1));\r\n\r\n        if (!marketSetup) {\r\n            return (0, sharesBalances, 0, 0, 0);\r\n        }\r\n\r\n        // Populate shares balances based on total outcomes configured for this market\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            sharesBalances[outcome] = shares[outcome];\r\n        }\r\n\r\n        return (totalShares, sharesBalances, currentCost, totalBuys, totalSells);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets current market buy and sell prices for all outcomes\r\n     * @dev Helper function to fast calculate market prediction and spreads\r\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\r\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\r\n     */\r\n    function getPrices() public view returns (uint256[] memory buyPrices, uint256[] memory sellPrices) {\r\n        buyPrices = new uint256[](totalOutcomes.add(1));\r\n        sellPrices = new uint256[](totalOutcomes.add(1));\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            int128 oneShare = 18446744073709551616;  // 1 share as int128 (signed 64.64 bit fixed point number)\r\n            buyPrices[outcome] = getTokenWei(token, buyPrice(outcome, oneShare));\r\n            sellPrices[outcome] = getTokenWei(token, sellPrice(outcome, oneShare));\r\n        }\r\n        return (buyPrices, sellPrices);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of shares that an account owns for all outcomes\r\n     * @param _account The address of the account with shares of the market\r\n     * @return balances The balances of shares for all outcomes (indexed by outcome)\r\n     */\r\n    function getAccountOutcomeBalances(address _account) public view returns (uint256[] memory balances) {\r\n        balances = new uint256[](totalOutcomes.add(1));\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            balances[outcome] = accountShares[_account].balances[outcome];\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    /**\r\n     *  @notice Gets the total collateral spent in the market after a received BUY trade\r\n     *  @dev Internal function used to calculate buy price\r\n     */\r\n    function costAfterBuy(uint256 _outcome, int128 _amount) internal view returns (int128) {\r\n        int128 newSumTotal;\r\n        int128[] memory newShares = new int128[](shares.length);\r\n        int128 newTotalShares = totalShares;\r\n\r\n        // Add new amount of shares to received outcome\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            if (outcome == _outcome) {\r\n                newShares[outcome] = ABDKMath.add(shares[outcome], _amount);\r\n                newTotalShares = ABDKMath.add(newTotalShares, _amount);\r\n            } else {\r\n                newShares[outcome] = shares[outcome];\r\n            }\r\n        }\r\n\r\n        // Calculate new cost based on newTotalShares and newQ values\r\n        int128 newBeta = ABDKMath.mul(newTotalShares, alpha);\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newShares[outcome], newBeta)));\r\n        }\r\n        return ABDKMath.mul(newBeta, ABDKMath.ln(newSumTotal));\r\n    }\r\n\r\n    /**\r\n     *  @notice Gets the total collateral spent in the market after a received SELL trade\r\n     *  @dev Internal function used to calculate sell price\r\n     */\r\n    function costAfterSell(uint256 _outcome, int128 _amount) internal view returns (int128) {\r\n        int128 newSumTotal;\r\n        int128[] memory newShares = new int128[](shares.length);\r\n        int128 newTotalShares = totalShares;\r\n\r\n        // Add new amount of shares to received outcome\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            if (outcome == _outcome) {\r\n                newShares[outcome] = ABDKMath.sub(shares[outcome], _amount);\r\n                newTotalShares = ABDKMath.sub(newTotalShares, _amount);\r\n            } else {\r\n                newShares[outcome] = shares[outcome];\r\n            }\r\n        }\r\n\r\n        // Calculate new cost based on newTotalShares and newShares values\r\n        int128 newBeta = ABDKMath.mul(newTotalShares, alpha);\r\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\r\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newShares[outcome], newBeta)));\r\n        }\r\n        return ABDKMath.mul(newBeta, ABDKMath.ln(newSumTotal));\r\n    }\r\n\r\n    /**\r\n     *  @notice Translate int128 (signed 64.64 bit fixed point number) [in ether] to uint256 token amount [in wei]\r\n     *  @dev Internal function used to transform encoded number values\r\n     */\r\n    function getTokenWei(address _token, int128 _amount) internal view returns (uint256) {\r\n        uint256 decimals = ERC20(_token).decimals();\r\n        return ABDKMath.mulu(_amount, 10 ** decimals);\r\n    }\r\n\r\n    /**\r\n     *  @notice Translate uint256 token amount [in wei] to int128 (signed 64.64 bit fixed point number) [in ether]\r\n     *  @dev Internal function used to transform encoded number values\r\n     */\r\n    function getTokenEth(address _token, uint256 _amount) internal view returns (int128) {\r\n        uint256 decimals = ERC20(_token).decimals();\r\n        return ABDKMath.divu(_amount, 10 ** decimals);\r\n    }\r\n}\r\n"
    },
    "contracts/PrecogMasterV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n//import \"hardhat/console.sol\";\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"./IPrecogToken.sol\";\r\nimport \"./IPrecogMarket.sol\";\r\n\r\n/**\r\n * @title PrecogMasterV6: Contract to manage PrecogMarkets interactions and PrecogToken claims\r\n * @author Marto\r\n * @dev Feel free to make any adjustments to the code\r\n */\r\ncontract PrecogMasterV6 is AccessControl {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    bytes32 public constant CALLER_ROLE = keccak256(\"CALLER_ROLE\");\r\n    bytes32 public constant MARKET_CREATOR_ROLE = keccak256(\"MARKET_CREATOR_ROLE\");\r\n\r\n    struct TokenClaim {\r\n        address account;\r\n        uint256 user;\r\n        uint256 claimedAmount;\r\n        uint256 claimedTimestamp;\r\n    }\r\n\r\n    struct MiningSeason {\r\n        uint256 startTimestamp;\r\n        uint256 endTimestamp;\r\n        uint256 maxUserClaim;\r\n        uint256 maxTotalClaim;\r\n        uint256 maxTotalMint;\r\n        uint256 claimedAmount;\r\n        uint256 mintedAmount;\r\n    }\r\n\r\n    struct MarketInfo {\r\n        string name;\r\n        string description;\r\n        string category;\r\n        uint256 startTimestamp;\r\n        uint256 endTimestamp;\r\n        address creator;\r\n        address market;\r\n    }\r\n\r\n    struct MarketConfig {\r\n        uint256 totalOutcomes;\r\n        uint256 funding;\r\n        uint256 overround;\r\n        address collateralToken;\r\n        address collateralFunder;\r\n        address marketOracle;\r\n    }\r\n\r\n    address public token;\r\n    uint256 public createdMarkets;\r\n    uint256 public currentSeason;\r\n    address private market; // Used as recipe for all created markets\r\n    address private oracle; // Used as default for all non custom markets\r\n\r\n    mapping(address => TokenClaim) public accountTokenClaims;\r\n    mapping(uint256 => TokenClaim) public userTokenClaims;\r\n    mapping(uint256 => MiningSeason) public miningSeasons;\r\n    mapping(uint256 => MarketInfo) public markets;\r\n\r\n    event TokensClaimed(address indexed account, uint256 indexed user, uint256 amount, uint256 timestamp);\r\n    event TokensMinted(address indexed account, uint256 amount, uint256 timestamp);\r\n    event MarketCreated(address indexed creator, uint256 id, address market);\r\n\r\n    constructor(address precogToken, address initialAdmin) {\r\n        // Grant DEFAULT_ADMIN_ROLE to the initial admin (this is the admin to the ADMIN_ROLE list)\r\n        _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\r\n        // Set ADMIN_ROLE as admin of CALLER_ROLE list\r\n        _setRoleAdmin(CALLER_ROLE, ADMIN_ROLE);\r\n        // Set already deployed precogToken as claimable token and collateral token for all Markets\r\n        token = precogToken;\r\n        // Grant ADMIN_ROLE to initial Admin (this enables to call \"addAdmin\" helper function)\r\n        _setupRole(ADMIN_ROLE, initialAdmin);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"Only Admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(hasRole(CALLER_ROLE, msg.sender), \"Only Caller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMarketCreator() {\r\n        require(hasRole(MARKET_CREATOR_ROLE, msg.sender), \"Only Market Creator\");\r\n        _;\r\n    }\r\n\r\n    // Public functions to interact with created markets\r\n    function marketBuy(\r\n        uint256 marketId,\r\n        uint256 outcome,\r\n        int128 sharesAmount,\r\n        uint256 maxAmountIn\r\n    ) external returns (uint256 amountIn) {\r\n        require(block.timestamp >= markets[marketId].startTimestamp, 'Market not started');\r\n        require(block.timestamp <= markets[marketId].endTimestamp, 'Market already ended');\r\n\r\n        // Get maxAmountIn of tokens from the buyer to Master (this reverts if there is no balance on buyer)\r\n        address marketCollateral = IPrecogMarket(markets[marketId].market).token();\r\n        if (marketCollateral == token) {\r\n            // Case PrecogToken market: just move the max amount to this contract (no approve needed)\r\n            IPrecogToken(token).move(msg.sender, address(this), maxAmountIn);\r\n        } else {\r\n            // Case custom token market: try to transfer from sender (this reverts is there is no allowance)\r\n            IERC20(marketCollateral).safeTransferFrom(msg.sender, address(this), maxAmountIn);\r\n        }\r\n\r\n        // Send remote BUY to market contract (to be assigned to the sender)\r\n        amountIn = IPrecogMarket(markets[marketId].market)._buy(outcome, sharesAmount, msg.sender);\r\n        require(amountIn <= maxAmountIn, \"Max amount reach!\");  // Just in case there is some balance on this contract\r\n\r\n        // If there is any leftover, return tokens to sender\r\n        if (amountIn < maxAmountIn) {\r\n            IERC20(marketCollateral).safeTransfer(msg.sender, maxAmountIn.sub(amountIn));\r\n        }\r\n        return amountIn;\r\n    }\r\n\r\n    function marketSell(\r\n        uint256 marketId,\r\n        uint256 outcome,\r\n        int128 sharesAmount,\r\n        uint256 minAmountOut\r\n    ) external returns (uint256 amountOut) {\r\n        require(block.timestamp >= markets[marketId].startTimestamp, \"Market not started\");\r\n        require(block.timestamp <= markets[marketId].endTimestamp, \"Market already ended\");\r\n\r\n        // Send remote SELL to market contract (to be assigned to the sender)\r\n        amountOut = IPrecogMarket(markets[marketId].market)._sell(outcome, sharesAmount, msg.sender);\r\n\r\n        // Check that the sell price was equal or higher seller expected\r\n        require(amountOut >= minAmountOut, \"Min amount reach!\");\r\n\r\n        return amountOut;\r\n    }\r\n\r\n    function marketRedeemShares(uint256 marketId) external returns (uint256 shares) {\r\n        return IPrecogMarket(markets[marketId].market)._redeem(msg.sender);\r\n    }\r\n\r\n    function marketBuyPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view returns (int128) {\r\n        return IPrecogMarket(markets[marketId].market).buyPrice(outcome, sharesAmount);\r\n    }\r\n\r\n    function marketSellPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view returns (int128) {\r\n        return IPrecogMarket(markets[marketId].market).sellPrice(outcome, sharesAmount);\r\n    }\r\n\r\n    function marketAccountShares(uint256 marketId, address account) external view\r\n    returns (uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed,\r\n        uint256[] memory balances) {\r\n        // Get market based on received id (should be valid id)\r\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\r\n        // Get sharesInfo on received account for selected market\r\n        (buys, sells, deposited, withdrew, redeemed) = createdMarket.accountShares(account);\r\n        // Get outcome balances on received account for selected market\r\n        balances = createdMarket.getAccountOutcomeBalances(account);\r\n    }\r\n\r\n    function marketSharesInfo(uint256 marketId) external view\r\n    returns (int128 totalShares, int128[] memory sharesBalances, int128 cost, uint256 totalBuys, uint256 totalSells) {\r\n        // Get market based on received id (should be valid id)\r\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\r\n        (totalShares, sharesBalances, cost, totalBuys, totalSells) = createdMarket.getMarketInfo();\r\n    }\r\n\r\n    // Public helper view function\r\n    function hasRedeemedShares(uint256 marketId, address account) external view returns (bool) {\r\n        (,,,,uint256 redeemed) = IPrecogMarket(markets[marketId].market).accountShares(account);\r\n        return redeemed > 0;\r\n    }\r\n\r\n    function hadClaimed(address account, uint256 user) external view returns (bool) {\r\n        return accountTokenClaims[account].claimedTimestamp != 0 || userTokenClaims[user].claimedTimestamp != 0;\r\n    }\r\n\r\n    // Only caller functions\r\n    function claimToken(address account, uint256 user, uint256 amount) external onlyCaller returns (bool) {\r\n        // Validate token claim\r\n        require(accountTokenClaims[account].claimedTimestamp == 0, \"Account already claimed\");\r\n        require(userTokenClaims[user].claimedTimestamp == 0, \"User already claimed\");\r\n        MiningSeason storage season = miningSeasons[currentSeason];\r\n        if (season.startTimestamp > 0) {\r\n            require(block.timestamp >= season.startTimestamp, \"Season not started\");\r\n            require(block.timestamp < season.endTimestamp, \"Season already ended\");\r\n            require(amount <= season.maxUserClaim, \"Invalid user claim amount\");\r\n            require(amount.add(season.claimedAmount) <= season.maxTotalClaim, \"Season max token claims\");\r\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \"Season max token mints\");\r\n        }\r\n\r\n        // Register current token claim\r\n        TokenClaim memory claim = TokenClaim({\r\n            account: account,\r\n            user: user,\r\n            claimedAmount: amount,\r\n            claimedTimestamp: block.timestamp\r\n        });\r\n        accountTokenClaims[account] = claim;\r\n        userTokenClaims[user] = claim;\r\n        season.claimedAmount = season.claimedAmount.add(amount);\r\n        season.mintedAmount = season.mintedAmount.add(amount);\r\n\r\n        // Mint tokens to received account\r\n        IPrecogToken(token).mint(account, amount);\r\n\r\n        emit TokensClaimed(account, user, amount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function createMarket(\r\n        string calldata name,\r\n        string calldata description,\r\n        string calldata category,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        address creator,\r\n        uint256 totalOutcomes,\r\n        uint256 funding,\r\n        uint256 overround\r\n    ) external onlyCaller returns (uint256 newMarketId) {\r\n        // Mint tokens to seed the new market\r\n        IPrecogToken(token).mint(address(this), funding);\r\n\r\n        // Pack all received information (with defaults), create new market and return new market id\r\n        MarketInfo memory marketInfo = MarketInfo(\r\n            name, description, category, startTimestamp, endTimestamp, creator, address(0)\r\n        );\r\n        MarketConfig memory marketConfig = MarketConfig(\r\n            totalOutcomes,\r\n            funding,\r\n            overround,\r\n            token,  // collateralToken: Precog Token\r\n            address(this),  // collateralFunder: This contract\r\n            oracle  // marketOracle: Preset oracle\r\n        );\r\n        return _createMarket(marketInfo, marketConfig);\r\n    }\r\n\r\n    function createCustomMarket(\r\n        string memory name,\r\n        string memory description,\r\n        string memory category,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        address creator,\r\n        uint256 totalOutcomes,\r\n        uint256 funding,\r\n        uint256 overround,\r\n        address collateralToken,\r\n        address collateralFunder,\r\n        address marketOracle\r\n    ) public onlyMarketCreator returns (uint256 newMarketId) {\r\n        // Pack all received information, create new market and return new market id\r\n        MarketInfo memory marketInfo = MarketInfo(\r\n            name, description, category, startTimestamp, endTimestamp, creator, address(0)\r\n        );\r\n        MarketConfig memory marketConfig = MarketConfig(\r\n            totalOutcomes, funding, overround, collateralToken, collateralFunder, marketOracle\r\n        );\r\n        return _createMarket(marketInfo, marketConfig);\r\n    }\r\n\r\n    function _createMarket(MarketInfo memory info, MarketConfig memory config) internal returns (uint256 newMarketId) {\r\n        // Deploy a new market contract and initialize it with the collateral token\r\n        address newMarketAddress = Clones.clone(market);\r\n        IPrecogMarket newMarket = IPrecogMarket(newMarketAddress);\r\n        newMarket.initialize(config.collateralToken);\r\n\r\n        // Get funding amount to seed the new market (optimization: except in a self-funder usecase)\r\n        if (config.collateralFunder != address(this)) {\r\n            IERC20(config.collateralToken).safeTransferFrom(config.collateralFunder, address(this), config.funding);\r\n        }\r\n        // Pre approve all trades with\r\n        IERC20(config.collateralToken).approve(newMarketAddress, type(uint256).max);\r\n\r\n        // Get new Id and Setup deployed new market\r\n        newMarketId = createdMarkets;\r\n        newMarket.setup(newMarketId, config.marketOracle, config.totalOutcomes, config.funding, config.overround);\r\n        newMarket.updateDates(info.startTimestamp, info.endTimestamp);\r\n\r\n        // Save created market address in received info and save it in local storage (indexed by id)\r\n        info.market = newMarketAddress;\r\n        markets[newMarketId] = info;\r\n\r\n        // Increase created markets counter and return new market id\r\n        createdMarkets = createdMarkets.add(1);\r\n\r\n        emit MarketCreated(info.creator, newMarketId, newMarketAddress);\r\n        return newMarketId;\r\n    }\r\n\r\n    // Only admin functions\r\n    function addMarketCreator(address account) external onlyAdmin {\r\n        grantRole(MARKET_CREATOR_ROLE, account);\r\n    }\r\n\r\n    function removeMarketCreator(address account) external onlyAdmin {\r\n        revokeRole(MARKET_CREATOR_ROLE, account);\r\n    }\r\n\r\n    function addCaller(address account) external onlyAdmin {\r\n        grantRole(CALLER_ROLE, account);\r\n    }\r\n\r\n    function removeCaller(address account) external onlyAdmin {\r\n        revokeRole(CALLER_ROLE, account);\r\n    }\r\n\r\n    function addAdmin(address account) external onlyAdmin {\r\n        grantRole(ADMIN_ROLE, account);\r\n    }\r\n\r\n    function removeAdmin(address account) external onlyAdmin {\r\n        revokeRole(ADMIN_ROLE, account);\r\n    }\r\n\r\n    function updateCurrentSeason(uint256 seasonIndex) external onlyAdmin {\r\n        currentSeason = seasonIndex;\r\n    }\r\n\r\n    function setMiningSeason(\r\n        uint256 seasonIndex,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        uint256 maxUserClaim,\r\n        uint256 maxTotalClaim,\r\n        uint256 maxTotalMint,\r\n        uint256 claimedAmount,\r\n        uint256 mintedAmount\r\n    ) external onlyAdmin {\r\n        miningSeasons[seasonIndex] = MiningSeason({\r\n            startTimestamp: startTimestamp,\r\n            endTimestamp: endTimestamp,\r\n            maxUserClaim: maxUserClaim,\r\n            maxTotalClaim: maxTotalClaim,\r\n            maxTotalMint: maxTotalMint,\r\n            claimedAmount: claimedAmount,\r\n            mintedAmount: mintedAmount\r\n        });\r\n    }\r\n\r\n    function setBaseOracle(address _oracle) external onlyAdmin {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    function setBaseMarket(address _market) external onlyAdmin {\r\n        market = _market;\r\n    }\r\n\r\n    function updateMarket(\r\n        uint256 id,\r\n        string memory name,\r\n        string memory description,\r\n        string memory category,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        address marketCreator,\r\n        address marketOracle\r\n    ) external onlyAdmin {\r\n        if (bytes(name).length > 0) {\r\n            markets[id].name = name;\r\n        }\r\n        if (bytes(description).length > 0) {\r\n            markets[id].description = description;\r\n        }\r\n        if (bytes(category).length > 0) {\r\n            markets[id].category = category;\r\n        }\r\n        if (marketCreator != address(0)) {\r\n            markets[id].creator = marketCreator;\r\n        }\r\n        if (marketOracle != address(0)) {\r\n            IPrecogMarket(markets[id].market).updateOracle(marketOracle);\r\n        }\r\n        bool updateDates = false;\r\n        if (startTimestamp > 0) {\r\n            markets[id].startTimestamp = startTimestamp;\r\n            updateDates = true;\r\n        }\r\n        if (endTimestamp > 0) {\r\n            markets[id].endTimestamp = endTimestamp;\r\n            updateDates = true;\r\n        }\r\n        if (updateDates) {\r\n            IPrecogMarket(markets[id].market).updateDates(markets[id].startTimestamp, markets[id].endTimestamp);\r\n        }\r\n    }\r\n\r\n    function marketWithdraw(uint256 marketId, address marketToken) external onlyAdmin {\r\n        IPrecogMarket(markets[marketId].market).withdraw(marketToken);\r\n    }\r\n\r\n    function marketTransferOwnership(uint256 marketId, address newOwner) external onlyAdmin {\r\n        IPrecogMarket(markets[marketId].market).transferOwnership(newOwner);\r\n    }\r\n\r\n    function updateTokenClaim(address account, uint256 amount, uint256 timestamp) external onlyAdmin {\r\n        // Used to reset token claims\r\n        accountTokenClaims[account].claimedAmount = amount;\r\n        accountTokenClaims[account].claimedTimestamp = timestamp;\r\n        uint256 user = accountTokenClaims[account].user;\r\n        userTokenClaims[user].claimedAmount = amount;\r\n        userTokenClaims[user].claimedTimestamp = timestamp;\r\n    }\r\n\r\n    function precogMint(address to, uint256 amount) external onlyAdmin {\r\n        // Validate token mint\r\n        MiningSeason storage season = miningSeasons[currentSeason];\r\n        if (season.startTimestamp > 0) {\r\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \"Season max token mints\");\r\n        }\r\n\r\n        // Register token mint\r\n        season.mintedAmount = season.mintedAmount.add(amount);\r\n\r\n        // Mint tokens to received account\r\n        IPrecogToken(token).mint(to, amount);\r\n\r\n        emit TokensMinted(to, amount, block.timestamp);\r\n    }\r\n\r\n    function precogBurn(address from, uint256 amount) external onlyAdmin {\r\n        // Here we should decrease `season.mintedAmount` for the current season\r\n        IPrecogToken(token).burn(from, amount);\r\n    }\r\n\r\n    function precogTransferOwnership(address newPrecogMaster) external onlyAdmin {\r\n        IPrecogToken(token).transferOwnership(newPrecogMaster);\r\n    }\r\n\r\n    function withdraw(address _token) public onlyAdmin {\r\n        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n"
    },
    "contracts/PrecogMasterV7.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"./IPrecogToken.sol\";\r\nimport \"./IPrecogMarket.sol\";\r\n\r\n/**\r\n * @title PrecogMaster: Manager of prediction markets and Precog token claims\r\n * @author Marto (https://github.com/0xMarto)\r\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\r\n */\r\ncontract PrecogMasterV7 is AccessControl {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    bytes32 public constant CALLER_ROLE = keccak256(\"CALLER_ROLE\");\r\n    bytes32 public constant MARKET_CREATOR_ROLE = keccak256(\"MARKET_CREATOR_ROLE\");\r\n\r\n    // State objects\r\n    struct TokenClaim {\r\n        address account;\r\n        uint256 user;\r\n        uint256 claimedAmount;\r\n        uint256 claimedTimestamp;\r\n    }\r\n\r\n    struct MiningSeason {\r\n        uint256 startTimestamp;\r\n        uint256 endTimestamp;\r\n        uint256 maxUserClaim;\r\n        uint256 maxTotalClaim;\r\n        uint256 maxTotalMint;\r\n        uint256 claimedAmount;\r\n        uint256 mintedAmount;\r\n    }\r\n\r\n    struct MarketInfo {\r\n        string name;\r\n        string description;\r\n        string category;\r\n        string outcomes;\r\n        uint256 startTimestamp;\r\n        uint256 endTimestamp;\r\n        address creator;\r\n        address market;\r\n    }\r\n\r\n    struct MarketConfig {\r\n        uint256 totalOutcomes;\r\n        uint256 funding;\r\n        uint256 overround;\r\n        address collateralToken;\r\n        address collateralFunder;\r\n        address marketOracle;\r\n    }\r\n\r\n    // Public variables\r\n    address public token;  // Claim token and default collateral for non custom markets\r\n    address private oracle; // default oracle for all non custom markets\r\n    address private market; // base market recipe for all created markets\r\n    uint256 public createdMarkets;  // Total markets created\r\n    uint256 public currentSeason;  // Current claiming season number\r\n    mapping(address => TokenClaim) public accountTokenClaims;\r\n    mapping(uint256 => TokenClaim) public userTokenClaims;\r\n    mapping(uint256 => MiningSeason) public miningSeasons;\r\n    mapping(uint256 => MarketInfo) public markets;\r\n\r\n    // Events emitted\r\n    event TokensClaimed(address indexed account, uint256 indexed user, uint256 amount, uint256 timestamp);\r\n    event TokensMinted(address indexed account, uint256 amount, uint256 timestamp);\r\n    event MarketCreated(address indexed creator, uint256 id, address market);\r\n\r\n    // Modifiers\r\n    modifier onlyAdmin() {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"Only Admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(hasRole(CALLER_ROLE, msg.sender), \"Only Caller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMarketCreator() {\r\n        require(hasRole(MARKET_CREATOR_ROLE, msg.sender), \"Only Market Creator\");\r\n        _;\r\n    }\r\n\r\n    // Functions\r\n    constructor(address precogToken, address initialAdmin) {\r\n        // Grant DEFAULT_ADMIN_ROLE to the initial admin (this is the admin to the ADMIN_ROLE list)\r\n        _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\r\n        // Set ADMIN_ROLE as admin of CALLER_ROLE list\r\n        _setRoleAdmin(CALLER_ROLE, ADMIN_ROLE);\r\n        // Set already deployed precogToken as claimable token and collateral token for all Markets\r\n        token = precogToken;\r\n        // Grant ADMIN_ROLE to initial Admin (this enables to call \"addAdmin\" helper function)\r\n        _setupRole(ADMIN_ROLE, initialAdmin);\r\n    }\r\n\r\n    /**\r\n     * @notice Buys shares for the specified outcome in the desired market\r\n     * @param marketId unique market identifier to trade\r\n     * @param outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\r\n     * @param sharesAmount Number of outcome shares to buy (as a signed 64.64-bit fixed point number)\r\n     * @param maxAmountIn Max amount of tokens able to spend in this trade (front-run mitigation)\r\n     * @return amountIn Token amount used for buying the specified amount of shares\r\n     */\r\n    function marketBuy(\r\n        uint256 marketId,\r\n        uint256 outcome,\r\n        int128 sharesAmount,\r\n        uint256 maxAmountIn\r\n    ) external returns (uint256 amountIn) {\r\n        require(block.timestamp >= markets[marketId].startTimestamp, 'Market not started');\r\n        require(block.timestamp <= markets[marketId].endTimestamp, 'Market already ended');\r\n\r\n        // Get maxAmountIn of tokens from the buyer to Master (this reverts if there is no balance on buyer)\r\n        address marketCollateral = IPrecogMarket(markets[marketId].market).token();\r\n        if (marketCollateral == token) {\r\n            // Case PrecogToken market: just move the max amount to this contract (no approve needed)\r\n            IPrecogToken(token).move(msg.sender, address(this), maxAmountIn);\r\n        } else {\r\n            // Case custom token market: try to transfer from sender (this reverts is there is no allowance)\r\n            IERC20(marketCollateral).safeTransferFrom(msg.sender, address(this), maxAmountIn);\r\n        }\r\n\r\n        // Send remote BUY to market contract (to be assigned to the sender)\r\n        amountIn = IPrecogMarket(markets[marketId].market)._buy(outcome, sharesAmount, msg.sender);\r\n        require(amountIn <= maxAmountIn, \"Max amount reach!\");  // Just in case there is some balance on this contract\r\n\r\n        // If there is any leftover, return tokens to sender\r\n        if (amountIn < maxAmountIn) {\r\n            IERC20(marketCollateral).safeTransfer(msg.sender, maxAmountIn.sub(amountIn));\r\n        }\r\n        return amountIn;\r\n    }\r\n\r\n    /**\r\n     * @notice Sells shares for the specified outcome in the desired market\r\n     * @param marketId unique market identifier to trade\r\n     * @param outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\r\n     * @param sharesAmount Number of outcome shares to sell (as a signed 64.64-bit fixed point number)\r\n     * @param minAmountOut Min amount of tokens to obtain in this trade (front-run mitigation)\r\n     * @return amountOut Token amount obtain from selling the specified amount of shares\r\n     */\r\n    function marketSell(\r\n        uint256 marketId,\r\n        uint256 outcome,\r\n        int128 sharesAmount,\r\n        uint256 minAmountOut\r\n    ) external returns (uint256 amountOut) {\r\n        require(block.timestamp >= markets[marketId].startTimestamp, \"Market not started\");\r\n        require(block.timestamp <= markets[marketId].endTimestamp, \"Market already ended\");\r\n\r\n        // Send remote SELL to market contract (to be assigned to the sender)\r\n        amountOut = IPrecogMarket(markets[marketId].market)._sell(outcome, sharesAmount, msg.sender);\r\n\r\n        // Check that the sell price was equal or higher seller expected\r\n        require(amountOut >= minAmountOut, \"Min amount reach!\");\r\n\r\n        return amountOut;\r\n    }\r\n\r\n    /**\r\n     * @notice Redeems the total sender shares in the desired market\r\n     * @param marketId unique market identifier to trade\r\n     * @return shares Number of shares redeemed\r\n     */\r\n    function marketRedeemShares(uint256 marketId) external returns (uint256 shares) {\r\n        return IPrecogMarket(markets[marketId].market)._redeem(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the cost of buying the specified amount of outcome shares in the desired market\r\n     * @param marketId unique market identifier to trade\r\n     * @param outcome The outcome for which tokens are being bought\r\n     * @param sharesAmount Number of outcome shares to buy (as signed 64.64-bit fixed point number)\r\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\r\n     */\r\n    function marketBuyPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view\r\n    returns (int128 tokenCost) {\r\n        return IPrecogMarket(markets[marketId].market).buyPrice(outcome, sharesAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the return from selling the specified amount of outcome shares in the desired market\r\n     * @param marketId unique market identifier to trade\r\n     * @param outcome The outcome for which shares are being sold\r\n     * @param sharesAmount The number of outcome shares to sell (as signed 64.64-bit fixed point number)\r\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\r\n     */\r\n    function marketSellPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view\r\n    returns (int128 tokenReturn) {\r\n        return IPrecogMarket(markets[marketId].market).sellPrice(outcome, sharesAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets market buy and sell prices for all outcomes in the desired market\r\n     * @dev Helper function to fast calculate market prediction and spreads\r\n     * @param marketId unique market identifier to trade\r\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\r\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\r\n     */\r\n    function marketPrices(uint256 marketId) external view\r\n    returns (uint256[] memory buyPrices, uint256[] memory sellPrices) {\r\n        return IPrecogMarket(markets[marketId].market).getPrices();\r\n    }\r\n\r\n    /**\r\n     * @notice Gets market result summary of the desired market\r\n     * @dev Helper function to show closed market info\r\n     * @param marketId unique market identifier to trade\r\n     * @return result Reported market result outcome\r\n     * @return closed Timestamp when the market result was reported\r\n     * @return reporter Address of the market result reporter (market oracle)\r\n     */\r\n    function marketResultInfo(uint256 marketId) external view\r\n    returns (uint256 result, uint256 closed, address reporter) {\r\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\r\n\r\n        // Get market result info\r\n        result = createdMarket.result();\r\n        closed = createdMarket.closeTimestamp();\r\n        reporter = createdMarket.oracle();\r\n        return (result, closed, reporter);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets market account shares summary of the desired market\r\n     * @dev Helper function to show market info about an specific account\r\n     * @param marketId unique market identifier to trade\r\n     * @param account The address of the account with shares of the market\r\n     * @return buys Total amount of Buys in the market\r\n     * @return sells Total amount of Sells in the market\r\n     * @return deposited Total amount of collateral deposited in the market\r\n     * @return withdrew Total amount of collateral withdrew from the market\r\n     * @return redeemed Total amount of collateral redeemed from the market\r\n     * @return balances Account shares balances by outcome\r\n     */\r\n    function marketAccountShares(uint256 marketId, address account) external view\r\n    returns (uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed,\r\n        uint256[] memory balances) {\r\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\r\n        // Get sharesInfo on received account for selected market\r\n        (buys, sells, deposited, withdrew, redeemed) = createdMarket.accountShares(account);\r\n        // Get outcome balances on received account for selected market\r\n        balances = createdMarket.getAccountOutcomeBalances(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current market state info\r\n     * @dev Helper function to show general market shares info\r\n     * @param marketId unique market identifier to trade\r\n     * @return totalShares Current total shares minted for all outcomes of the market\r\n     * @return sharesBalances All shares balances (indexed by outcome)\r\n     * @return cost Current liquidity of the market\r\n     * @return totalBuys Buys counter of the market\r\n     * @return totalSells Sells counter of the market\r\n     */\r\n    function marketSharesInfo(uint256 marketId) external view\r\n    returns (int128 totalShares, int128[] memory sharesBalances, int128 cost, uint256 totalBuys, uint256 totalSells) {\r\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\r\n        (totalShares, sharesBalances, cost, totalBuys, totalSells) = createdMarket.getMarketInfo();\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to check market close state\r\n     */\r\n    function isClosedMarket(uint256 marketId) external view returns (bool) {\r\n        return IPrecogMarket(markets[marketId].market).closeTimestamp() > block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to check if some account has already redeemed market shares\r\n     */\r\n    function hasRedeemedShares(uint256 marketId, address account) external view returns (bool) {\r\n        (,,,,uint256 redeemed) = IPrecogMarket(markets[marketId].market).accountShares(account);\r\n        return redeemed > 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Helper function to check if some account has already claim current season tokens\r\n     */\r\n    function hasClaimed(address account, uint256 user) external view returns (bool) {\r\n        return accountTokenClaims[account].claimedTimestamp != 0 || userTokenClaims[user].claimedTimestamp != 0;\r\n    }\r\n\r\n    // Whitelisted functions: Only caller & Only market creator\r\n    function claimToken(address account, uint256 user, uint256 amount) external onlyCaller returns (bool) {\r\n        // Validate token claim\r\n        require(accountTokenClaims[account].claimedTimestamp == 0, \"Account already claimed\");\r\n        require(userTokenClaims[user].claimedTimestamp == 0, \"User already claimed\");\r\n        MiningSeason storage season = miningSeasons[currentSeason];\r\n        if (season.startTimestamp > 0) {\r\n            require(block.timestamp >= season.startTimestamp, \"Season not started\");\r\n            require(block.timestamp < season.endTimestamp, \"Season already ended\");\r\n            require(amount <= season.maxUserClaim, \"Invalid user claim amount\");\r\n            require(amount.add(season.claimedAmount) <= season.maxTotalClaim, \"Season max token claims\");\r\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \"Season max token mints\");\r\n        }\r\n\r\n        // Register current token claim\r\n        TokenClaim memory claim = TokenClaim({\r\n            account: account,\r\n            user: user,\r\n            claimedAmount: amount,\r\n            claimedTimestamp: block.timestamp\r\n        });\r\n        accountTokenClaims[account] = claim;\r\n        userTokenClaims[user] = claim;\r\n        season.claimedAmount = season.claimedAmount.add(amount);\r\n        season.mintedAmount = season.mintedAmount.add(amount);\r\n\r\n        // Mint tokens to received account\r\n        IPrecogToken(token).mint(account, amount);\r\n\r\n        emit TokensClaimed(account, user, amount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function createMarket(\r\n        string memory name,\r\n        string memory description,\r\n        string memory category,\r\n        string[] memory outcomes,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        address creator,\r\n        uint256 funding,\r\n        uint256 overround\r\n    ) external onlyCaller returns (uint256 newMarketId) {\r\n        // Mint tokens to seed the new market\r\n        IPrecogToken(token).mint(address(this), funding);\r\n\r\n        // Pack all received information (with defaults), create new market and return new market id\r\n        MarketInfo memory marketInfo = MarketInfo(\r\n            name, description, category, arrayToCSV(outcomes), startTimestamp, endTimestamp, creator, address(0)\r\n        );\r\n        MarketConfig memory marketConfig = MarketConfig(\r\n            outcomes.length, // Total number of outcomes\r\n            funding,         // Initial supply of the market\r\n            overround,       // AMM profit margin\r\n            token,           // collateralToken: Precog Token\r\n            address(this),   // collateralFunder: This contract\r\n            oracle           // marketOracle: Preset oracle\r\n        );\r\n        return _createMarket(marketInfo, marketConfig);\r\n    }\r\n\r\n    function createCustomMarket(\r\n        string memory name,\r\n        string memory description,\r\n        string memory category,\r\n        string[] memory outcomes,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        address creator,\r\n        uint256 funding,\r\n        uint256 overround,\r\n        address collateralToken,\r\n        address collateralFunder,\r\n        address marketOracle\r\n    ) public onlyMarketCreator returns (uint256 newMarketId) {\r\n        // Pack all received information, create new market and return new market id\r\n        MarketInfo memory marketInfo = MarketInfo(\r\n            name, description, category, arrayToCSV(outcomes), startTimestamp, endTimestamp, creator, address(0)\r\n        );\r\n        MarketConfig memory marketConfig = MarketConfig(\r\n            outcomes.length, funding, overround, collateralToken, collateralFunder, marketOracle\r\n        );\r\n        return _createMarket(marketInfo, marketConfig);\r\n    }\r\n\r\n    function _createMarket(MarketInfo memory info, MarketConfig memory config) internal returns (uint256 newMarketId) {\r\n        // Deploy a new market contract and initialize it with the collateral token\r\n        address newMarketAddress = Clones.clone(market);\r\n        IPrecogMarket newMarket = IPrecogMarket(newMarketAddress);\r\n        newMarket.initialize(config.collateralToken);\r\n\r\n        // Get funding amount to seed the new market (optimization: except in a self-funder usecase)\r\n        if (config.collateralFunder != address(this)) {\r\n            IERC20(config.collateralToken).safeTransferFrom(config.collateralFunder, address(this), config.funding);\r\n        }\r\n        // Pre approve all trades with\r\n        IERC20(config.collateralToken).approve(newMarketAddress, type(uint256).max);\r\n\r\n        // Get new Id and Setup deployed new market\r\n        newMarketId = createdMarkets;\r\n        newMarket.setup(newMarketId, config.marketOracle, config.totalOutcomes, config.funding, config.overround);\r\n        newMarket.updateDates(info.startTimestamp, info.endTimestamp);\r\n\r\n        // Save created market address in received info and save it in local storage (indexed by id)\r\n        info.market = newMarketAddress;\r\n        markets[newMarketId] = info;\r\n\r\n        // Increase created markets counter and return new market id\r\n        createdMarkets = createdMarkets.add(1);\r\n\r\n        emit MarketCreated(info.creator, newMarketId, newMarketAddress);\r\n        return newMarketId;\r\n    }\r\n\r\n    function arrayToCSV(string[] memory array) internal pure returns (string memory) {\r\n        bytes memory csvBytes;\r\n        for (uint i = 0; i < array.length; i++) {\r\n            csvBytes = abi.encodePacked(csvBytes, array[i]);\r\n            if (i < array.length - 1) {\r\n                csvBytes = abi.encodePacked(csvBytes, \",\");\r\n            }\r\n        }\r\n        return string(csvBytes);\r\n    }\r\n\r\n    // Whitelisted functions: Only admin\r\n    function addMarketCreator(address account) external onlyAdmin {\r\n        grantRole(MARKET_CREATOR_ROLE, account);\r\n    }\r\n\r\n    function removeMarketCreator(address account) external onlyAdmin {\r\n        revokeRole(MARKET_CREATOR_ROLE, account);\r\n    }\r\n\r\n    function addCaller(address account) external onlyAdmin {\r\n        grantRole(CALLER_ROLE, account);\r\n    }\r\n\r\n    function removeCaller(address account) external onlyAdmin {\r\n        revokeRole(CALLER_ROLE, account);\r\n    }\r\n\r\n    function addAdmin(address account) external onlyAdmin {\r\n        grantRole(ADMIN_ROLE, account);\r\n    }\r\n\r\n    function removeAdmin(address account) external onlyAdmin {\r\n        revokeRole(ADMIN_ROLE, account);\r\n    }\r\n\r\n    function updateCurrentSeason(uint256 seasonIndex) external onlyAdmin {\r\n        currentSeason = seasonIndex;\r\n    }\r\n\r\n    function setMiningSeason(\r\n        uint256 seasonIndex,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        uint256 maxUserClaim,\r\n        uint256 maxTotalClaim,\r\n        uint256 maxTotalMint,\r\n        uint256 claimedAmount,\r\n        uint256 mintedAmount\r\n    ) external onlyAdmin {\r\n        miningSeasons[seasonIndex] = MiningSeason({\r\n            startTimestamp: startTimestamp,\r\n            endTimestamp: endTimestamp,\r\n            maxUserClaim: maxUserClaim,\r\n            maxTotalClaim: maxTotalClaim,\r\n            maxTotalMint: maxTotalMint,\r\n            claimedAmount: claimedAmount,\r\n            mintedAmount: mintedAmount\r\n        });\r\n    }\r\n\r\n    function setBaseOracle(address _oracle) external onlyAdmin {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    function setBaseMarket(address _market) external onlyAdmin {\r\n        market = _market;\r\n    }\r\n\r\n    function updateMarket(\r\n        uint256 id,\r\n        string memory name,\r\n        string memory description,\r\n        string memory category,\r\n        string[] memory outcomes,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp,\r\n        address marketCreator,\r\n        address marketOracle\r\n    ) external onlyAdmin {\r\n        if (bytes(name).length > 0) {\r\n            markets[id].name = name;\r\n        }\r\n        if (bytes(description).length > 0) {\r\n            markets[id].description = description;\r\n        }\r\n        if (bytes(category).length > 0) {\r\n            markets[id].category = category;\r\n        }\r\n        if (outcomes.length > 0) {\r\n            // Only updates outcome labels (not total possible outcomes)\r\n            markets[id].outcomes = arrayToCSV(outcomes);\r\n        }\r\n        if (marketCreator != address(0)) {\r\n            markets[id].creator = marketCreator;\r\n        }\r\n        if (marketOracle != address(0)) {\r\n            IPrecogMarket(markets[id].market).updateOracle(marketOracle);\r\n        }\r\n        bool updateDates = false;\r\n        if (startTimestamp > 0) {\r\n            markets[id].startTimestamp = startTimestamp;\r\n            updateDates = true;\r\n        }\r\n        if (endTimestamp > 0) {\r\n            markets[id].endTimestamp = endTimestamp;\r\n            updateDates = true;\r\n        }\r\n        if (updateDates) {\r\n            IPrecogMarket(markets[id].market).updateDates(markets[id].startTimestamp, markets[id].endTimestamp);\r\n        }\r\n    }\r\n\r\n    function marketWithdraw(uint256 marketId, address marketToken) external onlyAdmin {\r\n        IPrecogMarket(markets[marketId].market).withdraw(marketToken);\r\n    }\r\n\r\n    function marketTransferOwnership(uint256 marketId, address newOwner) external onlyAdmin {\r\n        IPrecogMarket(markets[marketId].market).transferOwnership(newOwner);\r\n    }\r\n\r\n    function updateTokenClaim(address account, uint256 amount, uint256 timestamp) external onlyAdmin {\r\n        // Used to reset token claims\r\n        accountTokenClaims[account].claimedAmount = amount;\r\n        accountTokenClaims[account].claimedTimestamp = timestamp;\r\n        uint256 user = accountTokenClaims[account].user;\r\n        userTokenClaims[user].claimedAmount = amount;\r\n        userTokenClaims[user].claimedTimestamp = timestamp;\r\n    }\r\n\r\n    function precogMint(address to, uint256 amount) external onlyAdmin {\r\n        // Validate token mint\r\n        MiningSeason storage season = miningSeasons[currentSeason];\r\n        if (season.startTimestamp > 0) {\r\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \"Season max token mints\");\r\n        }\r\n\r\n        // Register token mint\r\n        season.mintedAmount = season.mintedAmount.add(amount);\r\n\r\n        // Mint tokens to received account\r\n        IPrecogToken(token).mint(to, amount);\r\n\r\n        emit TokensMinted(to, amount, block.timestamp);\r\n    }\r\n\r\n    function precogBurn(address from, uint256 amount) external onlyAdmin {\r\n        IPrecogToken(token).burn(from, amount);\r\n    }\r\n\r\n    function precogTransferOwnership(address newPrecogMaster) external onlyAdmin {\r\n        IPrecogToken(token).transferOwnership(newPrecogMaster);\r\n    }\r\n\r\n    function withdraw(address _token) public onlyAdmin {\r\n        if (_token == address(0)) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        } else {\r\n            IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/PrecogToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract PrecogToken is ERC20, ERC20Burnable, Ownable {\r\n    string private constant TOKEN_NAME = \"PrecogToken\";\r\n    string private constant TOKEN_SYMBOL = \"PRE\";\r\n\r\n    constructor(address precogMaster) ERC20(TOKEN_NAME, TOKEN_SYMBOL) {\r\n        transferOwnership(precogMaster);\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(address from, uint256 amount) public onlyOwner {\r\n        _burn(from, amount);\r\n    }\r\n\r\n    function move(address from, address to, uint256 amount) external onlyOwner {\r\n        _transfer(from, to, amount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}