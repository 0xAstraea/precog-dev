{
  "address": "0x95d4E2E5c49a76c35E52932FC668fe2D31D35F9B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIn",
          "type": "uint256"
        }
      ],
      "name": "SharesBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenOut",
          "type": "uint256"
        }
      ],
      "name": "SharesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenOut",
          "type": "uint256"
        }
      ],
      "name": "SharesSold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sells",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcomeOneBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcomeTwoBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrew",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "buyPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketInfo",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "redeemBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeems",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        }
      ],
      "name": "reportResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "result",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "sellPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalOutcomes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subsidy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_overround",
          "type": "uint256"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "updateDates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9805a3225fb1e03ef4bd511651b8eae511386c261eee84a9793edf771589ad4",
  "receipt": {
    "to": null,
    "from": "0x6FEe026Ae8a76258063C9c67eC78F75b7815D101",
    "contractAddress": "0x95d4E2E5c49a76c35E52932FC668fe2D31D35F9B",
    "transactionIndex": 10,
    "gasUsed": "3363708",
    "logsBloom": "0x
    "blockHash": "0xfd972b6baf168a0bfb5ef195142168ab572d7f9b931f164205cae48025472990",
    "transactionHash": "0xc9805a3225fb1e03ef4bd511651b8eae511386c261eee84a9793edf771589ad4",
    "logs": [],
    "blockNumber": 10998307,
    "cumulativeGasUsed": "6056376",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "be39ec8c19c7a8f377d05d90005b56f8",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIn\",\"type\":\"uint256\"}],\"name\":\"SharesBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenOut\",\"type\":\"uint256\"}],\"name\":\"SharesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenOut\",\"type\":\"uint256\"}],\"name\":\"SharesSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeOneBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeTwoBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketInfo\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"redeemBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeems\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"reportResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"result\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalOutcomes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subsidy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overround\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(uint256,int128)\":{\"params\":{\"_amount\":\"This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)\"},\"returns\":{\"_cost\":\"The total amount of tokens received from selling the _amount of shares\"}},\"initialize(address)\":{\"params\":{\"_token\":\"ERC-20 token will be used to purchase and redeem rewards for this Market\"}},\"reportResult(uint256,uint256)\":{\"params\":{\"_id\":\"Unique identifier received on market setup\",\"_outcome\":\"The resulted outcome of the market\"}},\"sell(uint256,int128)\":{\"params\":{\"_amount\":\"This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)\"},\"returns\":{\"_cost\":\"The total amount of tokens received from selling the _amount of shares\"}},\"setup(uint256,address,uint256,uint256,uint256)\":{\"params\":{\"_id\":\"The market id should be unique for each master\",\"_oracle\":\"The address for the EOA or contract which will report the result for this Market\",\"_overround\":\"Initial gain allocation of the AMM in bps. Note that 200 represents 2%\",\"_subsidy\":\"How much initial funding is used to seed the market (denominated on initialized token)\",\"_totalOutcomes\":\"The number of different outcomes possible for this market (currently fixed at 2)\"}},\"updateDates(uint256,uint256)\":{\"params\":{\"_endTimestamp\":\"Block timestamp when the market ends trading and enable report results\",\"_startTimestamp\":\"Block timestamp when the market start allowing shares trading\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_buy(uint256,int128,address)\":{\"notice\":\"Internal Buy function used by the public Sell function and PrecogMaster (to facilitate token approvals)\"},\"_redeem(address)\":{\"notice\":\"Internal Redeem function used by single share redeeming and redeem in batch\"},\"_sell(uint256,int128,address)\":{\"notice\":\"Internal Sell function used by the public Sell function and PrecogMaster (to facilitate token approvals)\"},\"buy(uint256,int128)\":{\"notice\":\"This function is used to buy outcome tokens.\"},\"buyPrice(uint256,int128)\":{\"notice\":\"This function tells you how much it will cost to make a particular BUY trade.  It does this by calculating the difference between the current cost and the cost after the trade.\"},\"cost()\":{\"notice\":\"Total amount of collateral spent in this Market  For example, if a market was seeded with 2000 PRE and then a further 20 PRE has been spent,  this function will return 2020 PRE.\"},\"getMarketInfo()\":{\"notice\":\"Get current market state information:  total shares (all outcomes), total YES shares, total NO shares, current liquidity, buys counter, sells counter\"},\"initialize(address)\":{\"notice\":\"Constructor like function for the market maker\"},\"reportResult(uint256,uint256)\":{\"notice\":\"Used to report results of the market (only for defined oracle)\"},\"sell(uint256,int128)\":{\"notice\":\"This function is used to sell outcome tokens already bought.\"},\"sellPrice(uint256,int128)\":{\"notice\":\"This function tells you how much it will return making a particular SELL trade.  It does this by calculating the difference between the current cost and the cost after the trade.\"},\"setup(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Set up some of the variables for the market maker\"},\"transferOwnership(address)\":{\"notice\":\"Admin function to transfer the ownership of this contract\"},\"updateDates(uint256,uint256)\":{\"notice\":\"Used to update open market periods\"},\"withdraw(address)\":{\"notice\":\"Used to retrieve any liquidity left on the market (allowed only when market is closed)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrecogMarketV5.sol\":\"PrecogMarketV5\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\r\\n/*\\r\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary ABDKMath {\\r\\n  /*\\r\\n   * Minimum value signed 64.64-bit fixed point number may have.\\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * Maximum value signed 64.64-bit fixed point number may have.\\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    return int64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    require (x >= 0);\\r\\n    return uint64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    int256 result = x >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    return int256 (x) << 64;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) + y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) - y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) * y >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    if (x == MIN_64x64) {\\r\\n      require (\\r\\n        y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n        y <= 0x1000000000000000000000000000000000000000000000000\\r\\n      );\\r\\n      return -y << 63;\\r\\n    } else {\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x;\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int256 (absoluteResult);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    if (y == 0) return 0;\\r\\n\\r\\n    require (x >= 0);\\r\\n\\r\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n    uint256 hi = uint256 (x) * (y >> 128);\\r\\n\\r\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    hi <<= 64;\\r\\n\\r\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n    return hi + lo;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    int256 result = (int256 (x) << 64) / y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    bool negativeResult = false;\\r\\n    if (x < 0) {\\r\\n      x = -x; // We rely on overflow behavior here\\r\\n      negativeResult = true;\\r\\n    }\\r\\n    if (y < 0) {\\r\\n      y = -y; // We rely on overflow behavior here\\r\\n      negativeResult = !negativeResult;\\r\\n    }\\r\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    uint128 result = divuu (x, y);\\r\\n    require (result <= uint128 (MAX_64x64));\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return -x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return x < 0 ? -x : x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    require (x != 0);\\r\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 m = int256 (x) * int256 (y);\\r\\n    require (m >= 0);\\r\\n    require (m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n    return int128 (sqrtu (uint256 (m)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    uint256 absoluteResult;\\r\\n    bool negativeResult = false;\\r\\n    if (x >= 0) {\\r\\n      absoluteResult = powu (uint256 (x) << 63, y);\\r\\n    } else {\\r\\n      // We rely on overflow behavior here\\r\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\r\\n      negativeResult = y & 1 > 0;\\r\\n    }\\r\\n\\r\\n    absoluteResult >>= 63;\\r\\n\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    require (x >= 0);\\r\\n    return int128 (sqrtu (uint256 (x) << 64));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    int256 msb = 0;\\r\\n    int256 xc = x;\\r\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n    int256 result = msb - 64 << 64;\\r\\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\\r\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n      ux *= ux;\\r\\n      uint256 b = ux >> 255;\\r\\n      ux >>= 127 + b;\\r\\n      result += bit * int256 (b);\\r\\n    }\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    return int128 (\\r\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n    if (x & 0x8000000000000000 > 0)\\r\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n    if (x & 0x4000000000000000 > 0)\\r\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n    if (x & 0x2000000000000000 > 0)\\r\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n    if (x & 0x1000000000000000 > 0)\\r\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n    if (x & 0x800000000000000 > 0)\\r\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n    if (x & 0x400000000000000 > 0)\\r\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n    if (x & 0x200000000000000 > 0)\\r\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n    if (x & 0x100000000000000 > 0)\\r\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n    if (x & 0x80000000000000 > 0)\\r\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n    if (x & 0x40000000000000 > 0)\\r\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n    if (x & 0x20000000000000 > 0)\\r\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n    if (x & 0x10000000000000 > 0)\\r\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n    if (x & 0x8000000000000 > 0)\\r\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n    if (x & 0x4000000000000 > 0)\\r\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n    if (x & 0x2000000000000 > 0)\\r\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n    if (x & 0x1000000000000 > 0)\\r\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n    if (x & 0x800000000000 > 0)\\r\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n    if (x & 0x400000000000 > 0)\\r\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n    if (x & 0x200000000000 > 0)\\r\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n    if (x & 0x100000000000 > 0)\\r\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n    if (x & 0x80000000000 > 0)\\r\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n    if (x & 0x40000000000 > 0)\\r\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n    if (x & 0x20000000000 > 0)\\r\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n    if (x & 0x10000000000 > 0)\\r\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n    if (x & 0x8000000000 > 0)\\r\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n    if (x & 0x4000000000 > 0)\\r\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n    if (x & 0x2000000000 > 0)\\r\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n    if (x & 0x1000000000 > 0)\\r\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n    if (x & 0x800000000 > 0)\\r\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n    if (x & 0x400000000 > 0)\\r\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n    if (x & 0x200000000 > 0)\\r\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n    if (x & 0x100000000 > 0)\\r\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n    if (x & 0x80000000 > 0)\\r\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n    if (x & 0x40000000 > 0)\\r\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n    if (x & 0x20000000 > 0)\\r\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n    if (x & 0x10000000 > 0)\\r\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n    if (x & 0x8000000 > 0)\\r\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n    if (x & 0x4000000 > 0)\\r\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n    if (x & 0x2000000 > 0)\\r\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n    if (x & 0x1000000 > 0)\\r\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n    if (x & 0x800000 > 0)\\r\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n    if (x & 0x400000 > 0)\\r\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n    if (x & 0x200000 > 0)\\r\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n    if (x & 0x100000 > 0)\\r\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n    if (x & 0x80000 > 0)\\r\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n    if (x & 0x40000 > 0)\\r\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n    if (x & 0x20000 > 0)\\r\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n    if (x & 0x10000 > 0)\\r\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n    if (x & 0x8000 > 0)\\r\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n    if (x & 0x4000 > 0)\\r\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n    if (x & 0x2000 > 0)\\r\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n    if (x & 0x1000 > 0)\\r\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n    if (x & 0x800 > 0)\\r\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n    if (x & 0x400 > 0)\\r\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n    if (x & 0x200 > 0)\\r\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n    if (x & 0x100 > 0)\\r\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n    if (x & 0x80 > 0)\\r\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n    if (x & 0x40 > 0)\\r\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n    if (x & 0x20 > 0)\\r\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n    if (x & 0x10 > 0)\\r\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n    if (x & 0x8 > 0)\\r\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n    if (x & 0x4 > 0)\\r\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n    if (x & 0x2 > 0)\\r\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n    if (x & 0x1 > 0)\\r\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n    result >>= uint256 (63 - (x >> 64));\\r\\n    require (result <= uint256 (MAX_64x64));\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    return exp_2 (int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    uint256 result;\\r\\n\\r\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n      result = (x << 64) / y;\\r\\n    else {\\r\\n      uint256 msb = 192;\\r\\n      uint256 xc = x >> 192;\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 hi = result * (y >> 128);\\r\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 xh = x >> 192;\\r\\n      uint256 xl = x << 64;\\r\\n\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n      lo = hi << 128;\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n      assert (xh == hi >> 128);\\r\\n\\r\\n      result += xl / y;\\r\\n    }\\r\\n\\r\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    return uint128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\r\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 129.127-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return unsigned 129.127-bit fixed point number\\r\\n   */\\r\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\r\\n    if (y == 0) return 0x80000000000000000000000000000000;\\r\\n    else if (x == 0) return 0;\\r\\n    else {\\r\\n      int256 msb = 0;\\r\\n      uint256 xc = x;\\r\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 xe = msb - 127;\\r\\n      if (xe > 0) x >>= uint256 (xe);\\r\\n      else x <<= uint256 (-xe);\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n      int256 re = 0;\\r\\n\\r\\n      while (y > 0) {\\r\\n        if (y & 1 > 0) {\\r\\n          result = result * x;\\r\\n          y -= 1;\\r\\n          re += xe;\\r\\n          if (result >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            result >>= 128;\\r\\n            re += 1;\\r\\n          } else result >>= 127;\\r\\n          if (re < -127) return 0; // Underflow\\r\\n          require (re < 128); // Overflow\\r\\n        } else {\\r\\n          x = x * x;\\r\\n          y >>= 1;\\r\\n          xe <<= 1;\\r\\n          if (x >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            x >>= 128;\\r\\n            xe += 1;\\r\\n          } else x >>= 127;\\r\\n          if (xe < -127) return 0; // Underflow\\r\\n          require (xe < 128); // Overflow\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (re > 0) result <<= uint256 (re);\\r\\n      else if (re < 0) result >>= uint256 (-re);\\r\\n\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\r\\n    if (x == 0) return 0;\\r\\n    else {\\r\\n      uint256 xx = x;\\r\\n      uint256 r = 1;\\r\\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\r\\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\r\\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\r\\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\r\\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\r\\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\r\\n      if (xx >= 0x8) { r <<= 1; }\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n      uint256 r1 = x / r;\\r\\n      return uint128 (r < r1 ? r : r1);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7367b14ee5d9088255f391fdec40a47bf6f7cad273fdca880038a04d7d4011b5\",\"license\":\"BSD-4-Clause\"},\"contracts/PrecogMarketV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/// @title An implementation for liquidity-sensitive LMSR market maker in Solidity\\n/// @author Marto (built based on Abdulla Al-Kamil implementation)\\n/// @dev Feel free to make any adjustments to the code\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {ABDKMath} from \\\"./ABDKMath64x64.sol\\\";\\n\\ncontract PrecogMarketV5 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    struct ShareInfo {\\n        uint256 buys;  // Counter on Buy\\n        uint256 sells;  // Counter on Sell\\n        uint256 outcomeOneBalance;  // YES shares balance\\n        uint256 outcomeTwoBalance;  // NO shares balance\\n        uint256 deposited; // Collateral In on Buys\\n        uint256 withdrew; // Collateral Out on Sells\\n        uint256 redeemed; // Collateral Out on Redeems\\n    }\\n\\n    // Public market variables\\n    address public owner;  // Should be the PrecogMaster contract\\n    address public token;  // Collateral to Buy and redeem shares\\n    uint256 public id;  // Unique Identifier for the market\\n    address public oracle;  // EOA or Contract in change to reportResults\\n    uint256 public startTimestamp;  // Time when Buy/Sell shares are enabled\\n    uint256 public endTimestamp;  // Time when Buy/Sell shares are disabled\\n    uint256 public closeTimestamp;  // Time when results were reported\\n    uint256 public result;  // Final outcome of the market (published by the oracle)\\n    mapping(address => ShareInfo) public accountShares;  // Account shares balances and info\\n\\n    // Private market variables\\n    // Note: This contract uses the ABDKMath library to allow for math functions such as logarithms and exponents.\\n    //       All the sensitive state variables are stored as int128 (signed 64.64 bit fixed point number).\\n    uint256 private totalOutcomes;\\n    int128[] private q;\\n    int128 private b;\\n    int128 private alpha;\\n    int128 private dust;\\n    int128 private currentCost;\\n    int128 private totalShares;\\n    uint256 private totalBuys;\\n    uint256 private totalSells;\\n    bool private marketSetup;\\n    bool private internalCall;\\n\\n    event SharesBought(address indexed account, uint256 amount, uint256 tokenIn);\\n    event SharesSold(address indexed account, uint256 amount, uint256 tokenOut);\\n    event SharesRedeemed(address indexed account, uint256 amount, uint256 tokenOut);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    modifier onlyAfterSetup {\\n        require(marketSetup == true, \\\"Not setup\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrInternal() {\\n        require(msg.sender == owner || internalCall, \\\"Only owner or self\\\");\\n        _;\\n        internalCall = false;\\n    }\\n\\n    modifier onlyOracle() {\\n        require(msg.sender == oracle, \\\"Only oracle\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor like function for the market maker\\n     * @param _token ERC-20 token will be used to purchase and redeem rewards for this Market\\n     */\\n    function initialize(address _token) public {\\n        require(owner == address(0), \\\"Already initialized\\\");\\n        owner = msg.sender;\\n        token = _token;\\n    }\\n\\n    /**\\n     * @notice Set up some of the variables for the market maker\\n     * @param _id The market id should be unique for each master\\n     * @param _oracle The address for the EOA or contract which will report the result for this Market\\n     * @param _totalOutcomes The number of different outcomes possible for this market (currently fixed at 2)\\n     * @param _subsidy How much initial funding is used to seed the market (denominated on initialized token)\\n     * @param _overround Initial gain allocation of the AMM in bps. Note that 200 represents 2%\\n     */\\n    function setup(uint _id, address _oracle, uint _totalOutcomes, uint _subsidy, uint _overround) public onlyOwner {\\n        require(!marketSetup, \\\"Already initialized\\\");\\n        require(_totalOutcomes == 2, \\\"Only dual market supported\\\");\\n        require(_overround > 0, \\\"Cannot have 0 overround\\\");\\n\\n        // Get subsidy tokens\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _subsidy);\\n\\n        // Save basic parameters\\n        id = _id;\\n        oracle = _oracle;\\n        totalOutcomes = _totalOutcomes;\\n\\n        // Calculate initialization variables\\n        int128 initialSubsidy = getTokenEth(token, _subsidy);\\n        int128 n = ABDKMath.fromUInt(_totalOutcomes);\\n        int128 overround = ABDKMath.divu(_overround, 10000); // Note: if the overround is too low, then exp overflows\\n        alpha = ABDKMath.div(overround, ABDKMath.mul(n, ABDKMath.ln(n)));\\n        b = ABDKMath.mul(ABDKMath.mul(initialSubsidy, n), alpha);\\n        for (uint256 i = 0; i < totalOutcomes; i++) {\\n            q.push(initialSubsidy);\\n        }\\n        totalShares = ABDKMath.mul(initialSubsidy, n);\\n\\n        // Initialize token leak mitigation of 0.001% (could be a setup parameter in the future)\\n        // Note: Needed to avoid leaks due to rounding errors on math logarithmic and exponential approximations\\n        dust = ABDKMath.fromUInt(100000);  // 100k as signed 64.64 bit fixed point\\n\\n        // Register successful initialization\\n        marketSetup = true;\\n\\n        // Optimization: pre calculate current cost to avoid extra calculation on buys and sells\\n        currentCost = cost();\\n    }\\n\\n    /**\\n     * @notice This function is used to buy outcome tokens.\\n     * @param _outcome The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)\\n     * @param _amount This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)\\n     * @return _cost The total amount of tokens received from selling the _amount of shares\\n     */\\n    function buy(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 _cost) {\\n        require(block.timestamp >= startTimestamp, \\\"Market not started\\\");\\n\\n        // If enabled, check if market still open\\n        if (endTimestamp > 0) {\\n            require(block.timestamp <= endTimestamp, \\\"Market already ended\\\");\\n        }\\n\\n        // Send BUY call to internal function\\n        internalCall = true;\\n        return _buy(_outcome, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * Internal Buy function used by the public Sell function and PrecogMaster (to facilitate token approvals)\\n     */\\n    function _buy(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal returns (uint256 _cost) {\\n        // Special buy function to Buy tokens f\\n        require(_outcome > 0, \\\"Invalid outcome\\\");\\n        require(closeTimestamp == 0, \\\"Market already closed\\\");\\n\\n        // Update total and individual shares quantities (q)\\n        for (uint j = 0; j < totalOutcomes; j++) {\\n            // Note: (1 << j) is equal to (1 x 2 ** j)\\n            if ((_outcome & (1 << j)) != 0) {\\n                q[j] = ABDKMath.add(q[j], _amount);\\n                totalShares = ABDKMath.add(totalShares, _amount);\\n            }\\n        }\\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\\n        b = ABDKMath.mul(totalShares, alpha);\\n\\n        int128 sumTotal;\\n        for (uint i = 0; i < totalOutcomes; i++) {\\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(q[i], b)));\\n        }\\n\\n        // Calculate new current cost and price to pay. After that, update current cost variable\\n        int128 newCost = ABDKMath.mul(b, ABDKMath.ln(sumTotal));\\n        int128 deltaCost = ABDKMath.sub(newCost, currentCost);\\n        currentCost = newCost;\\n\\n        // Get amount of tokens from sender (as current payment)\\n        uint tokenCost = getTokenWei(token, deltaCost);\\n        require(tokenCost > 0, \\\"Invalid cost\\\");\\n        require(IERC20(token).transferFrom(msg.sender, address(this), tokenCost), 'Invalid transfer');\\n        uint outcomeShares = getTokenWei(token, _amount);\\n\\n        // Register BUY in market total and Account details\\n        totalBuys = totalBuys.add(1);\\n        accountShares[_account].buys = accountShares[_account].buys.add(1);\\n        accountShares[_account].deposited = accountShares[_account].deposited.add(tokenCost);\\n        if (_outcome == 1) {\\n            accountShares[_account].outcomeOneBalance = accountShares[_account].outcomeOneBalance.add(outcomeShares);\\n        } else if (_outcome == 2) {\\n            accountShares[_account].outcomeTwoBalance = accountShares[_account].outcomeTwoBalance.add(outcomeShares);\\n        }\\n\\n        emit SharesBought(_account, outcomeShares, tokenCost);\\n        return tokenCost;\\n    }\\n\\n    /**\\n     * @notice This function is used to sell outcome tokens already bought.\\n     * @param _outcome The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)\\n     * @param _amount This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)\\n     * @return _cost The total amount of tokens received from selling the _amount of shares\\n     */\\n    function sell(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 _cost) {\\n        require(block.timestamp >= startTimestamp, \\\"Market not started\\\");\\n\\n        // If enabled, check if market still open\\n        if (endTimestamp > 0) {\\n            require(block.timestamp <= endTimestamp, \\\"Market already ended\\\");\\n        }\\n\\n        // Send SELL call to internal function\\n        internalCall = true;\\n        return _sell(_outcome, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * Internal Sell function used by the public Sell function and PrecogMaster (to facilitate token approvals)\\n     */\\n    function _sell(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal returns (uint256 _cost) {\\n        // Special sell function to Sell tokens already bought\\n        require(_outcome > 0, \\\"Invalid outcome\\\");\\n        require(closeTimestamp == 0, \\\"Market already closed\\\");\\n\\n        // Remove amount of shares to be sell\\n        for (uint j = 0; j < totalOutcomes; j++) {\\n            // Note: (1 << j) is equal to (1 x 2 ** j)\\n            if ((_outcome & (1 << j)) != 0) {\\n                q[j] = ABDKMath.sub(q[j], _amount);\\n                totalShares = ABDKMath.sub(totalShares, _amount);\\n            }\\n        }\\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\\n        b = ABDKMath.mul(totalShares, alpha);\\n        int128 sumTotal;\\n        for (uint i = 0; i < totalOutcomes; i++) {\\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(q[i], b)));\\n        }\\n\\n        // Calculate new cost and tokens to return. After that, update current cost variable\\n        int128 newCost = ABDKMath.mul(b, ABDKMath.ln(sumTotal));\\n        int128 deltaCost = ABDKMath.sub(currentCost, newCost);\\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // Token leak mitigation\\n        currentCost = newCost;\\n\\n        // Calculate return amount of token to send\\n        uint tokenReturn = getTokenWei(token, ABDKMath.sub(deltaCost, deltaDust));\\n\\n        require(tokenReturn > 0, \\\"Invalid return\\\");\\n        uint outcomeShares = getTokenWei(token, _amount);\\n\\n        // Check that the received account have the amount of shares to sell\\n        if (_outcome == 1) {\\n            require(accountShares[_account].outcomeOneBalance >= outcomeShares, \\\"Insufficient balance\\\");\\n            accountShares[_account].outcomeOneBalance = accountShares[_account].outcomeOneBalance.sub(outcomeShares);\\n        } else if (_outcome == 2) {\\n            require(accountShares[_account].outcomeTwoBalance >= outcomeShares, \\\"Insufficient balance\\\");\\n            accountShares[_account].outcomeTwoBalance = accountShares[_account].outcomeTwoBalance.sub(outcomeShares);\\n        }\\n\\n        // Transfer collateral tokens to received account\\n        require(IERC20(token).transfer(_account, tokenReturn), \\\"Invalid transfer\\\");\\n\\n        // Register SELL in market total and Account details\\n        totalSells = totalSells.add(1);\\n        accountShares[_account].sells = accountShares[_account].sells.add(1);\\n        accountShares[_account].withdrew = accountShares[_account].withdrew.add(tokenReturn);\\n\\n        emit SharesSold(_account, outcomeShares, tokenReturn);\\n        return tokenReturn;\\n    }\\n\\n    /**\\n     * @notice Used to update open market periods\\n     * @param _startTimestamp Block timestamp when the market start allowing shares trading\\n     * @param _endTimestamp Block timestamp when the market ends trading and enable report results\\n     */\\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) public onlyOwner {\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n    }\\n\\n    /**\\n     * @notice Used to report results of the market (only for defined oracle)\\n     * @param _id Unique identifier received on market setup\\n     * @param _outcome The resulted outcome of the market\\n     */\\n    function reportResult(uint256 _id, uint256 _outcome) public onlyOracle {\\n        // Validate received inputs\\n        require(_id == id, \\\"Invalid market\\\");\\n        require(_outcome <= q.length, \\\"Invalid outcome\\\");\\n\\n        // Check current state of the market\\n        require(block.timestamp > endTimestamp, \\\"Market not ended\\\");\\n        require(closeTimestamp == 0, \\\"Market already closed\\\");\\n\\n        // Register reported results and register current time\\n        result = _outcome;\\n        closeTimestamp = block.timestamp;\\n    }\\n\\n    function redeemShares() public onlyAfterSetup returns (uint256 shares) {\\n        internalCall = true;\\n        return _redeem(msg.sender);\\n    }\\n\\n    function redeemBatch(address[] memory _accounts) public onlyAfterSetup onlyOracle returns (uint256 redeems) {\\n        internalCall = true;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            try this._redeem(_accounts[i]) {\\n                redeems.add(1);\\n            } catch {\\n                // `_redeem` call reverted, this could be a expected case\\n            }\\n        }\\n        return redeems;\\n    }\\n\\n    /**\\n     * Internal Redeem function used by single share redeeming and redeem in batch\\n     */\\n    function _redeem(address _account) public onlyOwnerOrInternal returns (uint256 shares) {\\n        // Check current state of the market and received account\\n        require(closeTimestamp > 0, \\\"Market not closed\\\");\\n        require(accountShares[_account].redeemed == 0, \\\"Shares already redeemed\\\");\\n\\n        // Get amount of shares to be redeemed for received account\\n        if (result == 1) {\\n            shares = accountShares[_account].outcomeOneBalance;\\n        } else if (result == 2) {\\n            shares = accountShares[_account].outcomeTwoBalance;\\n        }\\n        require(shares > 0, \\\"Nothing to redeem\\\");\\n\\n        // Register amount of shares redeemed and send corresponding collateral tokens (ratio 1:1)\\n        accountShares[_account].redeemed = shares;\\n        require(IERC20(token).transfer(_account, shares), \\\"Invalid transfer\\\");\\n\\n        emit SharesRedeemed(_account, shares, shares);\\n        return shares;\\n    }\\n\\n    /**\\n     * @notice Used to retrieve any liquidity left on the market (allowed only when market is closed)\\n     */\\n    function withdraw(address _token) public onlyAfterSetup onlyOwner {\\n        require(closeTimestamp > 0, \\\"Market not closed\\\");\\n        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Admin function to transfer the ownership of this contract\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     *  @notice Total amount of collateral spent in this Market\\n     *  For example, if a market was seeded with 2000 PRE and then a further 20 PRE has been spent,\\n     *  this function will return 2020 PRE.\\n     */\\n    function cost() public view onlyAfterSetup returns (int128) {\\n        int128 sumTotal;\\n        for (uint i = 0; i < totalOutcomes; i++) {\\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(q[i], b)));\\n        }\\n        return ABDKMath.mul(b, ABDKMath.ln(sumTotal));\\n    }\\n\\n    /**\\n     *  This function will tell you the cost (similar to above) after a proposed BUY transaction.\\n     */\\n    function costAfterBuy(uint256 _outcome, int128 _amount) internal view returns (int128) {\\n        int128 newSumTotal;\\n        int128[] memory newQ = new int128[](q.length);\\n        int128 newTotalShares = totalShares;\\n\\n        // Add new amount of shares to received outcome\\n        for (uint j = 0; j < totalOutcomes; j++) {\\n            // Note: (1 << j) is equal to (1 x 2 ** j)\\n            if ((_outcome & (1 << j)) != 0) {\\n                newQ[j] = ABDKMath.add(q[j], _amount);\\n                newTotalShares = ABDKMath.add(newTotalShares, _amount);\\n            } else {\\n                newQ[j] = q[j];\\n            }\\n        }\\n\\n        // Calculate new cost based on newTotalShares and newQ values\\n        int128 newB = ABDKMath.mul(newTotalShares, alpha);\\n        for (uint i = 0; i < totalOutcomes; i++) {\\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newQ[i], newB)));\\n        }\\n        return ABDKMath.mul(newB, ABDKMath.ln(newSumTotal));\\n    }\\n\\n    /**\\n     *  This function will tell you the cost (similar to above) after a proposed SELL transaction.\\n     */\\n    function costAfterSell(uint256 _outcome, int128 _amount) internal view returns (int128) {\\n        int128 newSumTotal;\\n        int128[] memory newQ = new int128[](q.length);\\n        int128 newTotalShares = totalShares;\\n\\n        // Add new amount of shares to received outcome\\n        for (uint j = 0; j < totalOutcomes; j++) {\\n            // Note: (1 << j) is equal to (1 x 2 ** j)\\n            if ((_outcome & (1 << j)) != 0) {\\n                newQ[j] = ABDKMath.sub(q[j], _amount);\\n                newTotalShares = ABDKMath.sub(newTotalShares, _amount);\\n            } else {\\n                newQ[j] = q[j];\\n            }\\n        }\\n\\n        // Calculate new cost based on newTotalShares and newQ values\\n        int128 newB = ABDKMath.mul(newTotalShares, alpha);\\n        for (uint i = 0; i < totalOutcomes; i++) {\\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newQ[i], newB)));\\n        }\\n        return ABDKMath.mul(newB, ABDKMath.ln(newSumTotal));\\n    }\\n\\n    /**\\n     *  This function tells you how much it will cost to make a particular BUY trade.\\n     *  It does this by calculating the difference between the current cost and the cost after the trade.\\n     */\\n    function buyPrice(uint256 _outcome, int128 _amount) public view returns (int128) {\\n        return ABDKMath.sub(costAfterBuy(_outcome, _amount), currentCost);\\n    }\\n\\n    /**\\n     *  This function tells you how much it will return making a particular SELL trade.\\n     *  It does this by calculating the difference between the current cost and the cost after the trade.\\n     */\\n    function sellPrice(uint256 _outcome, int128 _amount) public view returns (int128) {\\n        int128 deltaCost = ABDKMath.sub(currentCost, costAfterSell(_outcome, _amount));\\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // token leak mitigation\\n        return ABDKMath.sub(deltaCost, deltaDust);\\n    }\\n\\n    /**\\n     *  Get current market state information:\\n     *  total shares (all outcomes), total YES shares, total NO shares, current liquidity, buys counter, sells counter\\n     */\\n    function getMarketInfo() public view returns (int128, int128, int128, int128, uint256, uint256) {\\n        if (q.length < 1) {\\n            return (0, 0, 0, 0, 0, 0);\\n        }\\n        // Note: q[0] = outcome 1 shares, q[1] = outcome 2 shares\\n        return (totalShares, q[0], q[1], currentCost, totalBuys, totalSells);\\n    }\\n\\n    /**\\n     *  Helper function: int128 (signed 64.64 bit fixed point number) [in ether] -> uint256 token amount [in wei]\\n     */\\n    function getTokenWei(address _token, int128 _amount) internal view returns (uint256) {\\n        uint256 d = ERC20(_token).decimals();\\n        return ABDKMath.mulu(_amount, 10 ** d);\\n    }\\n\\n    /**\\n     *  Helper function: uint256 token amount [in wei] -> int128 (signed 64.64 bit fixed point number) [in ether]\\n     */\\n    function getTokenEth(address _token, uint256 _amount) internal view returns (int128) {\\n        uint256 d = ERC20(_token).decimals();\\n        return ABDKMath.divu(_amount, 10 ** d);\\n    }\\n}\\n\",\"keccak256\":\"0x14bdbfe9c8b6fb232294b8e5be2c9e8b020ed1304b458e74ffd33317f3f4794c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c8063a85adeab116100ee578063c4d66de811610097578063e6fd48bc11610071578063e6fd48bc14610554578063f2fde38b1461055c578063f76da1d914610582578063fc0c546a146105a8576101ae565b8063c4d66de8146104d6578063cae32606146104fc578063e6b2c87c14610531576101ae565b8063af640d0f116100c8578063af640d0f14610423578063b460481d1461042b578063bc0e610a14610433576101ae565b8063a85adeab146103d2578063ad094f3d146103da578063ae92a93d146103fd576101ae565b806352c8b2f91161015b578063653721471161013557806365372147146103695780637dc0d1d014610371578063898b51a7146103955780638da5cb5b146103ca576101ae565b806352c8b2f9146102a7578063535f02ee146103055780635467a7511461032b576101ae565b80633dcb8b811161018c5780633dcb8b81146102335780633f7361eb1461025957806351cff8d91461027f576101ae565b8063052d7c00146101b357806313faede6146101cd57806323341a05146101ec575b600080fd5b6101bb6105b0565b60408051918252519081900360200190f35b6101d56105b6565b60408051600f9290920b8252519081900360200190f35b6101f4610687565b60408051600f97880b815295870b602087015293860b858501529190940b6060840152608083019390935260a082019290925290519081900360c00190f35b6101d56004803603604081101561024957600080fd5b5080359060200135600f0b61074b565b6101bb6004803603602081101561026f57600080fd5b50356001600160a01b031661079e565b6102a56004803603602081101561029557600080fd5b50356001600160a01b0316610aa0565b005b6102cd600480360360208110156102bd57600080fd5b50356001600160a01b0316610c1c565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6101d56004803603604081101561031b57600080fd5b5080359060200135600f0b610c59565b6102a5600480360360a081101561034157600080fd5b508035906001600160a01b036020820135169060408101359060608101359060800135610c81565b6101bb610fef565b610379610ff5565b604080516001600160a01b039092168252519081900360200190f35b6101bb600480360360608110156103ab57600080fd5b508035906020810135600f0b90604001356001600160a01b0316611004565b610379611679565b6101bb611688565b6102a5600480360360408110156103f057600080fd5b508035906020013561168e565b6101bb6004803603604081101561041357600080fd5b5080359060200135600f0b61182f565b6101bb61194a565b6101bb611950565b6101bb6004803603602081101561044957600080fd5b81019060208101813564010000000081111561046457600080fd5b82018360208201111561047657600080fd5b8035906020019184602083028401116401000000008311171561049857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119b8945050505050565b6102a5600480360360208110156104ec57600080fd5b50356001600160a01b0316611b18565b6101bb6004803603606081101561051257600080fd5b508035906020810135600f0b90604001356001600160a01b0316611bb3565b6102a56004803603604081101561054757600080fd5b5080359060200135612126565b6101bb61217d565b6102a56004803603602081101561057257600080fd5b50356001600160a01b0316612183565b6101bb6004803603604081101561059857600080fd5b5080359060200135600f0b61227c565b610379612397565b60065481565b60105460009060ff161515600114610601576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6000805b6009548110156106685761065e82610659610654600a858154811061062657fe5b60009182526020909120600282040154600b5460019092166010026101000a9004600f90810b91900b6123a6565b61240b565b612465565b9150600101610605565b50600b5461068190600f0b61067c836124aa565b6124e4565b91505090565b6000806000806000806001600a8054905010156106b557506000945084935083925082915081905080610743565b600d54600a8054600f9290920b916000906106cc57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b600a6001815481106106fd57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b600c60109054906101000a9004600f0b600e54600f549550955095509550955095505b909192939495565b600c54600090819061077090600160801b9004600f0b61076b868661252c565b6126ce565b600c54909150600090610787908390600f0b6123a6565b905061079382826126ce565b925050505b92915050565b600080546001600160a01b03163314806107bf5750601054610100900460ff165b610805576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b60006006541161085c576040805162461bcd60e51b815260206004820152601160248201527f4d61726b6574206e6f7420636c6f736564000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216600090815260086020526040902060060154156108ca576040805162461bcd60e51b815260206004820152601760248201527f53686172657320616c72656164792072656465656d6564000000000000000000604482015290519081900360640190fd5b600754600114156108f757506001600160a01b038116600090815260086020526040902060020154610920565b6007546002141561092057506001600160a01b0381166000908152600860205260409020600301545b60008111610975576040805162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038083166000818152600860209081526040808320600601869055600154815163a9059cbb60e01b8152600481019590955260248501879052905194169363a9059cbb93604480820194918390030190829087803b1580156109dd57600080fd5b505af11580156109f1573d6000803e3d6000fd5b505050506040513d6020811015610a0757600080fd5b5051610a4d576040805162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103a3930b739b332b960811b604482015290519081900360640190fd5b604080518281526020810183905281516001600160a01b038516927ff18a1e0eb1d585d2194cdc081f34e04df407e94de5238f45531482467e31705f928290030190a26010805461ff0019169055919050565b60105460ff161515600114610ae8576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6000546001600160a01b03163314610b34576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b600060065411610b8b576040805162461bcd60e51b815260206004820152601160248201527f4d61726b6574206e6f7420636c6f736564000000000000000000000000000000604482015290519081900360640190fd5b610c1933826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bdc57600080fd5b505afa158015610bf0573d6000803e3d6000fd5b505050506040513d6020811015610c0657600080fd5b50516001600160a01b0384169190612713565b50565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b6000610c7a610c68848461277f565b600c54600160801b9004600f0b6126ce565b9392505050565b6000546001600160a01b03163314610ccd576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b60105460ff1615610d25576040805162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b82600214610d7a576040805162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206475616c206d61726b657420737570706f72746564000000000000604482015290519081900360640190fd5b60008111610dcf576040805162461bcd60e51b815260206004820152601760248201527f43616e6e6f7420686176652030206f766572726f756e64000000000000000000604482015290519081900360640190fd5b600154610de7906001600160a01b03163330856128fa565b60028590556003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03868116919091179091556009849055600154600091610e2f91168461296f565b90506000610e3c856129f2565b90506000610e4c84612710612a10565b9050610e6481610e5f8461067c866124aa565b6123a6565b600b60106101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550610eac610e9a84846124e4565b600b54600160801b9004600f0b6124e4565b600b8054600f9290920b6001600160801b03166001600160801b031990921691909117905560005b600954811015610f4657600a8054600180820183556000929092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8600282040180549183166010026101000a6001600160801b0381810219909316600f89900b939093160291909117905501610ed4565b50610f5183836124e4565b600d8054600f9290920b6001600160801b03166001600160801b0319909216919091179055610f82620186a06129f2565b600c8054600f9290920b6001600160801b03166001600160801b03199092169190911790556010805460ff19166001179055610fbc6105b6565b600c60106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055505050505050505050565b60075481565b6003546001600160a01b031681565b600080546001600160a01b03163314806110255750601054610100900460ff165b61106b576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b600084116110b2576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b60065415611107576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b60005b6009548110156111e8576001811b8516156111e057611158600a828154811061112f57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b856126ce565b600a828154811061116557fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506111ba600d60009054906101000a9004600f0b856126ce565b600d8054600f9290920b6001600160801b03166001600160801b03199092169190911790555b60010161110a565b50600d54600b5461120791600f90810b91600160801b9004900b6124e4565b600b8054600f9290920b6001600160801b03166001600160801b03199092169190911790556000805b60095481101561125b5761125182610659610654600a858154811061062657fe5b9150600101611230565b50600b5460009061127290600f0b61067c846124aa565b600c5490915060009061128f90600160801b9004600f0b836126ce565b600c549091506000906112a6908390600f0b6123a6565b600c8054600f86900b6001600160801b03908116600160801b0291161790556001549091506000906112ea906001600160a01b03166112e585856126ce565b612a50565b905060008111611341576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c69642072657475726e000000000000000000000000000000000000604482015290519081900360640190fd5b60015460009061135a906001600160a01b03168a612a50565b9050896001141561141c576001600160a01b0388166000908152600860205260409020600201548111156113d5576040805162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0388166000908152600860205260409020600201546113fb9082612acb565b6001600160a01b0389166000908152600860205260409020600201556114d8565b89600214156114d8576001600160a01b038816600090815260086020526040902060030154811115611495576040805162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0388166000908152600860205260409020600301546114bb9082612acb565b6001600160a01b0389166000908152600860205260409020600301555b6001546040805163a9059cbb60e01b81526001600160a01b038b81166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561152e57600080fd5b505af1158015611542573d6000803e3d6000fd5b505050506040513d602081101561155857600080fd5b505161159e576040805162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103a3930b739b332b960811b604482015290519081900360640190fd5b600f546115ac906001612b28565b600f556001600160a01b03881660009081526008602052604090206001908101546115d691612b28565b6001600160a01b03891660009081526008602052604090206001810191909155600501546116049083612b28565b6001600160a01b038916600081815260086020908152604091829020600501939093558051848152928301859052805191927f15d424bdac3ab52a065da0bac1452a0aa9453a23554ce765d3fbe0df6f5eb9ce929081900390910190a2506010805461ff001916905598975050505050505050565b6000546001600160a01b031681565b60055481565b6003546001600160a01b031633146116db576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f7261636c6560a81b604482015290519081900360640190fd5b6002548214611731576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206d61726b6574000000000000000000000000000000000000604482015290519081900360640190fd5b600a5481111561177a576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b60055442116117d0576040805162461bcd60e51b815260206004820152601060248201527f4d61726b6574206e6f7420656e64656400000000000000000000000000000000604482015290519081900360640190fd5b60065415611825576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b6007555042600655565b60105460009060ff16151560011461187a576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6004544210156118d1576040805162461bcd60e51b815260206004820152601260248201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604482015290519081900360640190fd5b6005541561193057600554421115611930576040805162461bcd60e51b815260206004820152601460248201527f4d61726b657420616c726561647920656e646564000000000000000000000000604482015290519081900360640190fd5b6010805461ff001916610100179055610c7a838333611004565b60025481565b60105460009060ff16151560011461199b576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6010805461ff0019166101001790556119b33361079e565b905090565b60105460009060ff161515600114611a03576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6003546001600160a01b03163314611a50576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f7261636c6560a81b604482015290519081900360640190fd5b6010805461ff00191661010017905560005b8251811015611b1157306001600160a01b0316633f7361eb848381518110611a8657fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b158015611acd57600080fd5b505af1925050508015611af257506040513d6020811015611aed57600080fd5b505160015b611afb57611b09565b50611b07826001612b28565b505b600101611a62565b505b919050565b6000546001600160a01b031615611b76576040805162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b600080543373ffffffffffffffffffffffffffffffffffffffff1991821617909155600180549091166001600160a01b0392909216919091179055565b600080546001600160a01b0316331480611bd45750601054610100900460ff165b611c1a576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b60008411611c61576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b60065415611cb6576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b60005b600954811015611d97576001811b851615611d8f57611d07600a8281548110611cde57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b85612465565b600a8281548110611d1457fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611d69600d60009054906101000a9004600f0b85612465565b600d8054600f9290920b6001600160801b03166001600160801b03199092169190911790555b600101611cb9565b50600d54600b54611db691600f90810b91600160801b9004900b6124e4565b600b8054600f9290920b6001600160801b03166001600160801b03199092169190911790556000805b600954811015611e0a57611e0082610659610654600a858154811061062657fe5b9150600101611ddf565b50600b54600090611e2190600f0b61067c846124aa565b90506000611e3e82600c60109054906101000a9004600f0b6126ce565b600c8054600f85900b6001600160801b03908116600160801b029116179055600154909150600090611e79906001600160a01b031683612a50565b905060008111611ed0576040805162461bcd60e51b815260206004820152600c60248201527f496e76616c696420636f73740000000000000000000000000000000000000000604482015290519081900360640190fd5b600154604080516323b872dd60e01b81523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015611f2a57600080fd5b505af1158015611f3e573d6000803e3d6000fd5b505050506040513d6020811015611f5457600080fd5b5051611f9a576040805162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103a3930b739b332b960811b604482015290519081900360640190fd5b600154600090611fb3906001600160a01b031689612a50565b600e54909150611fc4906001612b28565b600e556001600160a01b038716600090815260086020526040902054611feb906001612b28565b6001600160a01b0388166000908152600860205260409020908155600401546120149083612b28565b6001600160a01b0388166000908152600860205260409020600401556001891415612080576001600160a01b03871660009081526008602052604090206002015461205f9082612b28565b6001600160a01b0388166000908152600860205260409020600201556120cc565b88600214156120cc576001600160a01b0387166000908152600860205260409020600301546120af9082612b28565b6001600160a01b0388166000908152600860205260409020600301555b604080518281526020810184905281516001600160a01b038a16927f2ac0c7a344c07faca0c8fb818361b688d571a347db8c184800fce2207531dd1e928290030190a2506010805461ff0019169055979650505050505050565b6000546001600160a01b03163314612172576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b600491909155600555565b60045481565b6000546001600160a01b031633146121cf576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b6001600160a01b0381166122145760405162461bcd60e51b8152600401808060200182810382526026815260200180613b836026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60105460009060ff1615156001146122c7576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b60045442101561231e576040805162461bcd60e51b815260206004820152601260248201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604482015290519081900360640190fd5b6005541561237d5760055442111561237d576040805162461bcd60e51b815260206004820152601460248201527f4d61726b657420616c726561647920656e646564000000000000000000000000604482015290519081900360640190fd5b6010805461ff001916610100179055610c7a838333611bb3565b6001546001600160a01b031681565b600081600f0b600014156123b957600080fd5b600082600f0b604085600f0b901b816123ce57fe5b0590506f7fffffffffffffffffffffffffffffff19811280159061240257506f7fffffffffffffffffffffffffffffff8113155b610c7a57600080fd5b60006840000000000000000082600f0b1261242557600080fd5b683fffffffffffffffff1982600f0b121561244257506000611b13565b610798608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d612b82565b6000600f83810b9083900b016f7fffffffffffffffffffffffffffffff19811280159061240257506f7fffffffffffffffffffffffffffffff811315610c7a57600080fd5b60008082600f0b136124bb57600080fd5b60806124c683613655565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b6000600f83810b9083900b0260401d6f7fffffffffffffffffffffffffffffff19811280159061240257506f7fffffffffffffffffffffffffffffff811315610c7a57600080fd5b6000806000600a8054905067ffffffffffffffff8111801561254d57600080fd5b50604051908082528060200260200182016040528015612577578160200160208202803683370190505b50600d54909150600f0b60005b60095481101561265c576001811b871615612603576125d2600a82815481106125a957fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b876126ce565b8382815181106125de57fe5b6020026020010190600f0b9081600f0b815250506125fc82876126ce565b9150612654565b600a818154811061261057fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b83828151811061263f57fe5b6020026020010190600f0b9081600f0b815250505b600101612584565b50600b54600090612678908390600160801b9004600f0b6124e4565b905060005b6009548110156126b5576126ab8561065961065487858151811061269d57fe5b6020026020010151866123a6565b945060010161267d565b506126c38161067c866124aa565b979650505050505050565b6000600f82810b9084900b036f7fffffffffffffffffffffffffffffff19811280159061240257506f7fffffffffffffffffffffffffffffff811315610c7a57600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261277a908490613739565b505050565b6000806000600a8054905067ffffffffffffffff811180156127a057600080fd5b506040519080825280602002602001820160405280156127ca578160200160208202803683370190505b50600d54909150600f0b60005b6009548110156128af576001811b87161561285657612825600a82815481106127fc57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b87612465565b83828151811061283157fe5b6020026020010190600f0b9081600f0b8152505061284f8287612465565b91506128a7565b600a818154811061286357fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b83828151811061289257fe5b6020026020010190600f0b9081600f0b815250505b6001016127d7565b50600b546000906128cb908390600160801b9004600f0b6124e4565b905060005b6009548110156126b5576128f08561065961065487858151811061269d57fe5b94506001016128d0565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052612969908590613739565b50505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156129ab57600080fd5b505afa1580156129bf573d6000803e3d6000fd5b505050506040513d60208110156129d557600080fd5b505160ff1690506129ea83600a83900a612a10565b949350505050565b6000677fffffffffffffff821115612a0957600080fd5b5060401b90565b600081612a1c57600080fd5b6000612a2884846137ea565b90506f7fffffffffffffffffffffffffffffff6001600160801b0382161115610c7a57600080fd5b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612a8c57600080fd5b505afa158015612aa0573d6000803e3d6000fd5b505050506040513d6020811015612ab657600080fd5b505160ff1690506129ea83600a83900a613945565b600082821115612b22576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610c7a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006840000000000000000082600f0b12612b9c57600080fd5b683fffffffffffffffff1982600f0b1215612bb957506000611b13565b6f8000000000000000000000000000000060006780000000000000008416600f0b1315612bf75770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315612c24577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315612c51577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315612c7e5770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315612cab577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315612cd857700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315612d055770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b1315612d3257700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315612d5e5770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315612d8a577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b1315612db657700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315612de2577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b1315612e0e57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b1315612e3a5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315612e66577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b1315612e925770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315612ebd577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315612ee857700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315612f135770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315612f3e57700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315612f695770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315612f94577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315612fbf57700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315612fea577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561301457700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b131561303e5770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315613068577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156130925770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b13156130bc577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b13156130e657700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156131105770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b131561313a57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156131635770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b131561318c577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b13156131b557700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156131de577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561320757700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156132305770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315613259577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156132825770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b13156132aa577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156132d257700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156132fa5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b131561332257700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b131561334a5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315613372577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561339a57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b13156133c2577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156133e957700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156134105770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315613437577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b131561345e5770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613485577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b13156134ac57700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156134d35770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b13156134fa57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156135205770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315613546577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b131561356c57700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315613592577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156135b857700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156135de5770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315613604577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b131561362a5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff81111561079857600080fd5b60008082600f0b1361366657600080fd5b6000600f83900b680100000000000000008112613685576040918201911d5b6401000000008112613699576020918201911d5b6201000081126136ab576010918201911d5b61010081126136bc576008918201911d5b601081126136cc576004918201911d5b600481126136dc576002918201911d5b600281126136eb576001820191505b603f19820160401b600f85900b607f8490031b6780000000000000005b600081131561372e5790800260ff81901c8281029390930192607f011c9060011d613708565b509095945050505050565b600061378e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139be9092919063ffffffff16565b80519091501561277a578080602001905160208110156137ad57600080fd5b505161277a5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ba9602a913960400191505060405180910390fd5b6000816137f657600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff841161382c5782604085901b8161382457fe5b049050613931565b60c084811c6401000000008110613845576020918201911c5b620100008110613857576010918201911c5b6101008110613868576008918201911c5b60108110613878576004918201911c5b60048110613888576002918201911c5b60028110613897576001820191505b60bf820360018603901c6001018260ff0387901b816138b257fe5b0492506001600160801b038311156138c957600080fd5b608085901c83026001600160801b038616840260c088901c604089901b828110156138f5576001820391505b608084901b9290038281101561390c576001820391505b829003608084901c821461391c57fe5b88818161392557fe5b04870196505050505050505b6001600160801b03811115610c7a57600080fd5b60008161395457506000610798565b600083600f0b121561396557600080fd5b600f83900b6001600160801b038316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff8111156139a557600080fd5b60401b81198111156139b657600080fd5b019392505050565b60606129ea8484600085856139d285613ad8565b613a23576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613a615780518252601f199092019160209182019101613a42565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613ac3576040519150601f19603f3d011682016040523d82523d6000602084013e613ac8565b606091505b50915091506126c3828286613ade565b3b151590565b60608315613aed575081610c7a565b825115613afd5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613b47578181015183820152602001613b2f565b50505050905090810190601f168015613b745780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220c7dae39054a94a693a804528f6f640334999509bc2d6a16204bb099b7e3f4c4a64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(uint256,int128)": {
        "params": {
          "_amount": "This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)",
          "_outcome": "The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)"
        },
        "returns": {
          "_cost": "The total amount of tokens received from selling the _amount of shares"
        }
      },
      "initialize(address)": {
        "params": {
          "_token": "ERC-20 token will be used to purchase and redeem rewards for this Market"
        }
      },
      "reportResult(uint256,uint256)": {
        "params": {
          "_id": "Unique identifier received on market setup",
          "_outcome": "The resulted outcome of the market"
        }
      },
      "sell(uint256,int128)": {
        "params": {
          "_amount": "This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)",
          "_outcome": "The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)"
        },
        "returns": {
          "_cost": "The total amount of tokens received from selling the _amount of shares"
        }
      },
      "setup(uint256,address,uint256,uint256,uint256)": {
        "params": {
          "_id": "The market id should be unique for each master",
          "_oracle": "The address for the EOA or contract which will report the result for this Market",
          "_overround": "Initial gain allocation of the AMM in bps. Note that 200 represents 2%",
          "_subsidy": "How much initial funding is used to seed the market (denominated on initialized token)",
          "_totalOutcomes": "The number of different outcomes possible for this market (currently fixed at 2)"
        }
      },
      "updateDates(uint256,uint256)": {
        "params": {
          "_endTimestamp": "Block timestamp when the market ends trading and enable report results",
          "_startTimestamp": "Block timestamp when the market start allowing shares trading"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_buy(uint256,int128,address)": {
        "notice": "Internal Buy function used by the public Sell function and PrecogMaster (to facilitate token approvals)"
      },
      "_redeem(address)": {
        "notice": "Internal Redeem function used by single share redeeming and redeem in batch"
      },
      "_sell(uint256,int128,address)": {
        "notice": "Internal Sell function used by the public Sell function and PrecogMaster (to facilitate token approvals)"
      },
      "buy(uint256,int128)": {
        "notice": "This function is used to buy outcome tokens."
      },
      "buyPrice(uint256,int128)": {
        "notice": "This function tells you how much it will cost to make a particular BUY trade.  It does this by calculating the difference between the current cost and the cost after the trade."
      },
      "cost()": {
        "notice": "Total amount of collateral spent in this Market  For example, if a market was seeded with 2000 PRE and then a further 20 PRE has been spent,  this function will return 2020 PRE."
      },
      "getMarketInfo()": {
        "notice": "Get current market state information:  total shares (all outcomes), total YES shares, total NO shares, current liquidity, buys counter, sells counter"
      },
      "initialize(address)": {
        "notice": "Constructor like function for the market maker"
      },
      "reportResult(uint256,uint256)": {
        "notice": "Used to report results of the market (only for defined oracle)"
      },
      "sell(uint256,int128)": {
        "notice": "This function is used to sell outcome tokens already bought."
      },
      "sellPrice(uint256,int128)": {
        "notice": "This function tells you how much it will return making a particular SELL trade.  It does this by calculating the difference between the current cost and the cost after the trade."
      },
      "setup(uint256,address,uint256,uint256,uint256)": {
        "notice": "Set up some of the variables for the market maker"
      },
      "transferOwnership(address)": {
        "notice": "Admin function to transfer the ownership of this contract"
      },
      "updateDates(uint256,uint256)": {
        "notice": "Used to update open market periods"
      },
      "withdraw(address)": {
        "notice": "Used to retrieve any liquidity left on the market (allowed only when market is closed)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12511,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12513,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12515,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "id",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12517,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12519,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 12521,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "endTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12523,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "closeTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12525,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "result",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12529,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "accountShares",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(ShareInfo)12509_storage)"
      },
      {
        "astId": 12531,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "totalOutcomes",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12534,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "q",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_int128)dyn_storage"
      },
      {
        "astId": 12536,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "b",
        "offset": 0,
        "slot": "11",
        "type": "t_int128"
      },
      {
        "astId": 12538,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "alpha",
        "offset": 16,
        "slot": "11",
        "type": "t_int128"
      },
      {
        "astId": 12540,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "dust",
        "offset": 0,
        "slot": "12",
        "type": "t_int128"
      },
      {
        "astId": 12542,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "currentCost",
        "offset": 16,
        "slot": "12",
        "type": "t_int128"
      },
      {
        "astId": 12544,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "totalShares",
        "offset": 0,
        "slot": "13",
        "type": "t_int128"
      },
      {
        "astId": 12546,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "totalBuys",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 12548,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "totalSells",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12550,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "marketSetup",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 12552,
        "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
        "label": "internalCall",
        "offset": 1,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_int128)dyn_storage": {
        "base": "t_int128",
        "encoding": "dynamic_array",
        "label": "int128[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_struct(ShareInfo)12509_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PrecogMarketV5.ShareInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ShareInfo)12509_storage"
      },
      "t_struct(ShareInfo)12509_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMarketV5.ShareInfo",
        "members": [
          {
            "astId": 12496,
            "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
            "label": "buys",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12498,
            "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
            "label": "sells",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12500,
            "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
            "label": "outcomeOneBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12502,
            "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
            "label": "outcomeTwoBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12504,
            "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
            "label": "deposited",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12506,
            "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
            "label": "withdrew",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12508,
            "contract": "contracts/PrecogMarketV5.sol:PrecogMarketV5",
            "label": "redeemed",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}