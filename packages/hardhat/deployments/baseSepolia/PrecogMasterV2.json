{
  "address": "0x0D512A2176737Fdb5C9973DB92fB100A234cD738",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "precogToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "funding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dustFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newMarketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdMarkets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "marketAccountShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outTwo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "marketBuy",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketSharesInfo",
      "outputs": [
        {
          "internalType": "int128",
          "name": "totalShares",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "qOne",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "qTwo",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "cost",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "totalBuys",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "beta",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "marketWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miningSeasons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPrecogMaster",
          "type": "address"
        }
      ],
      "name": "precogTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ct",
          "type": "address"
        }
      ],
      "name": "setConditionalTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMiningSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        }
      ],
      "name": "updateCurrentSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "updateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateTokenClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x996e4e77d5e0a4385538d804d5bc2c7730461e0c44cb5766f9cb55fa5f21eebb",
  "receipt": {
    "to": null,
    "from": "0x6FEe026Ae8a76258063C9c67eC78F75b7815D101",
    "contractAddress": "0x0D512A2176737Fdb5C9973DB92fB100A234cD738",
    "transactionIndex": 8,
    "gasUsed": "5536982",
    "logsBloom": "0x000000040000000008000000000000000800000000000000000000002000000000a0000100000020020000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000020000400000000000000800000000000000000800000000000000000000000000000000000000000000004000000000010000000000000000000000080000000000080000000000000000000000000000000000001004000000000000000000080400000000000000000000000000000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7774291de00178ec86c2cbced172566bc97d50aeb3050579c80b1015304bdece",
    "transactionHash": "0x996e4e77d5e0a4385538d804d5bc2c7730461e0c44cb5766f9cb55fa5f21eebb",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 9479022,
        "transactionHash": "0x996e4e77d5e0a4385538d804d5bc2c7730461e0c44cb5766f9cb55fa5f21eebb",
        "address": "0x0D512A2176737Fdb5C9973DB92fB100A234cD738",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x0000000000000000000000006fee026ae8a76258063c9c67ec78f75b7815d101"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x7774291de00178ec86c2cbced172566bc97d50aeb3050579c80b1015304bdece"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 9479022,
        "transactionHash": "0x996e4e77d5e0a4385538d804d5bc2c7730461e0c44cb5766f9cb55fa5f21eebb",
        "address": "0x0D512A2176737Fdb5C9973DB92fB100A234cD738",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x7774291de00178ec86c2cbced172566bc97d50aeb3050579c80b1015304bdece"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 9479022,
        "transactionHash": "0x996e4e77d5e0a4385538d804d5bc2c7730461e0c44cb5766f9cb55fa5f21eebb",
        "address": "0x0D512A2176737Fdb5C9973DB92fB100A234cD738",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x0000000000000000000000006fee026ae8a76258063c9c67ec78f75b7815d101"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x7774291de00178ec86c2cbced172566bc97d50aeb3050579c80b1015304bdece"
      }
    ],
    "blockNumber": 9479022,
    "cumulativeGasUsed": "6492899",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7779ec685Aa0bf5483B3e0c15dAf246d2d978888",
    "0x9475A4C1BF5Fc80aE079303f14B523da19619c16"
  ],
  "numDeployments": 1,
  "solcInputHash": "a9af11639b7fe6fca8d0f33a80cc9132",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"precogToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"marketAccountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"marketBuy\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketSharesInfo\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"totalShares\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"qOne\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"qTwo\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"cost\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"totalBuys\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"beta\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"marketWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningSeasons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrecogMaster\",\"type\":\"address\"}],\"name\":\"precogTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ct\",\"type\":\"address\"}],\"name\":\"setConditionalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"setMiningSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"}],\"name\":\"updateCurrentSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateTokenClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract to manage Precog token claims and PredictionMarkets\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"title\":\"PrecogMasterV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrecogMasterV2.sol\":\"PrecogMasterV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":50},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x3fef0eeb248c7109ce0f9adce59543d8b4141b78382d3ec34db33dabdbbc13f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd918cca1b659f588a6d12d05fd7196179a8b1eac9133d7f77da7ef3133e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x2690a9b7f4f7489b8d25a4fc6bffc02ec3971fb41ed6c8b59adef2833bdab07c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have.\\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have.\\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    return int64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    require (x >= 0);\\n    return uint64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    int256 result = x >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    return int256 (x) << 64;\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) + y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) - y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) * y >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    if (x == MIN_64x64) {\\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n        y <= 0x1000000000000000000000000000000000000000000000000);\\n      return -y << 63;\\n    } else {\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x;\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <=\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <=\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (absoluteResult);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    if (y == 0) return 0;\\n\\n    require (x >= 0);\\n\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n    uint256 hi = uint256 (x) * (y >> 128);\\n\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    hi <<= 64;\\n\\n    require (hi <=\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n    return hi + lo;\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    require (y != 0);\\n    int256 result = (int256 (x) << 64) / y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    require (y != 0);\\n\\n    bool negativeResult = false;\\n    if (x < 0) {\\n      x = -x; // We rely on overflow behavior here\\n      negativeResult = true;\\n    }\\n    if (y < 0) {\\n      y = -y; // We rely on overflow behavior here\\n      negativeResult = !negativeResult;\\n    }\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n    if (negativeResult) {\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    require (y != 0);\\n    uint128 result = divuu (x, y);\\n    require (result <= uint128 (MAX_64x64));\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return -x;\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return x < 0 ? -x : x;\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    require (x != 0);\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    int256 m = int256 (x) * int256 (y);\\n    require (m >= 0);\\n    require (m <\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\n    return int128 (sqrtu (uint256 (m)));\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    uint256 absoluteResult;\\n    bool negativeResult = false;\\n    if (x >= 0) {\\n      absoluteResult = powu (uint256 (x) << 63, y);\\n    } else {\\n      // We rely on overflow behavior here\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\n      negativeResult = y & 1 > 0;\\n    }\\n\\n    absoluteResult >>= 63;\\n\\n    if (negativeResult) {\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    require (x >= 0);\\n    return int128 (sqrtu (uint256 (x) << 64));\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    int256 msb = 0;\\n    int256 xc = x;\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n    int256 result = msb - 64 << 64;\\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n      ux *= ux;\\n      uint256 b = ux >> 255;\\n      ux >>= 127 + b;\\n      result += bit * int256 (b);\\n    }\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    return int128 (\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    uint256 result = 0x80000000000000000000000000000000;\\n\\n    if (x & 0x8000000000000000 > 0)\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n    if (x & 0x4000000000000000 > 0)\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n    if (x & 0x2000000000000000 > 0)\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n    if (x & 0x1000000000000000 > 0)\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n    if (x & 0x800000000000000 > 0)\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n    if (x & 0x400000000000000 > 0)\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n    if (x & 0x200000000000000 > 0)\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n    if (x & 0x100000000000000 > 0)\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n    if (x & 0x80000000000000 > 0)\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n    if (x & 0x40000000000000 > 0)\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n    if (x & 0x20000000000000 > 0)\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n    if (x & 0x10000000000000 > 0)\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n    if (x & 0x8000000000000 > 0)\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n    if (x & 0x4000000000000 > 0)\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n    if (x & 0x2000000000000 > 0)\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n    if (x & 0x1000000000000 > 0)\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n    if (x & 0x800000000000 > 0)\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n    if (x & 0x400000000000 > 0)\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n    if (x & 0x200000000000 > 0)\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n    if (x & 0x100000000000 > 0)\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n    if (x & 0x80000000000 > 0)\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n    if (x & 0x40000000000 > 0)\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n    if (x & 0x20000000000 > 0)\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n    if (x & 0x10000000000 > 0)\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n    if (x & 0x8000000000 > 0)\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n    if (x & 0x4000000000 > 0)\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n    if (x & 0x2000000000 > 0)\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n    if (x & 0x1000000000 > 0)\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n    if (x & 0x800000000 > 0)\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n    if (x & 0x400000000 > 0)\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n    if (x & 0x200000000 > 0)\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n    if (x & 0x100000000 > 0)\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n    if (x & 0x80000000 > 0)\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n    if (x & 0x40000000 > 0)\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n    if (x & 0x20000000 > 0)\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n    if (x & 0x10000000 > 0)\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n    if (x & 0x8000000 > 0)\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n    if (x & 0x4000000 > 0)\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n    if (x & 0x2000000 > 0)\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n    if (x & 0x1000000 > 0)\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n    if (x & 0x800000 > 0)\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n    if (x & 0x400000 > 0)\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n    if (x & 0x200000 > 0)\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n    if (x & 0x100000 > 0)\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n    if (x & 0x80000 > 0)\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n    if (x & 0x40000 > 0)\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n    if (x & 0x20000 > 0)\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n    if (x & 0x10000 > 0)\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n    if (x & 0x8000 > 0)\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n    if (x & 0x4000 > 0)\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n    if (x & 0x2000 > 0)\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n    if (x & 0x1000 > 0)\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n    if (x & 0x800 > 0)\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n    if (x & 0x400 > 0)\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n    if (x & 0x200 > 0)\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n    if (x & 0x100 > 0)\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n    if (x & 0x80 > 0)\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n    if (x & 0x40 > 0)\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n    if (x & 0x20 > 0)\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n    if (x & 0x10 > 0)\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n    if (x & 0x8 > 0)\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n    if (x & 0x4 > 0)\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n    if (x & 0x2 > 0)\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n    if (x & 0x1 > 0)\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n    result >>= uint256 (63 - (x >> 64));\\n    require (result <= uint256 (MAX_64x64));\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    return exp_2 (\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    require (y != 0);\\n\\n    uint256 result;\\n\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n      result = (x << 64) / y;\\n    else {\\n      uint256 msb = 192;\\n      uint256 xc = x >> 192;\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 hi = result * (y >> 128);\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 xh = x >> 192;\\n      uint256 xl = x << 64;\\n\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n      lo = hi << 128;\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n\\n      assert (xh == hi >> 128);\\n\\n      result += xl / y;\\n    }\\n\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    return uint128 (result);\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x unsigned 129.127-bit fixed point number\\n   * @param y uint256 value\\n   * @return unsigned 129.127-bit fixed point number\\n   */\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\n    if (y == 0) return 0x80000000000000000000000000000000;\\n    else if (x == 0) return 0;\\n    else {\\n      int256 msb = 0;\\n      uint256 xc = x;\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 xe = msb - 127;\\n      if (xe > 0) x >>= uint256 (xe);\\n      else x <<= uint256 (-xe);\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n      int256 re = 0;\\n\\n      while (y > 0) {\\n        if (y & 1 > 0) {\\n          result = result * x;\\n          y -= 1;\\n          re += xe;\\n          if (result >=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            result >>= 128;\\n            re += 1;\\n          } else result >>= 127;\\n          if (re < -127) return 0; // Underflow\\n          require (re < 128); // Overflow\\n        } else {\\n          x = x * x;\\n          y >>= 1;\\n          xe <<= 1;\\n          if (x >=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            x >>= 128;\\n            xe += 1;\\n          } else x >>= 127;\\n          if (xe < -127) return 0; // Underflow\\n          require (xe < 128); // Overflow\\n        }\\n      }\\n\\n      if (re > 0) result <<= uint256 (re);\\n      else if (re < 0) result >>= uint256 (-re);\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    if (x == 0) return 0;\\n    else {\\n      uint256 xx = x;\\n      uint256 r = 1;\\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n      if (xx >= 0x8) { r <<= 1; }\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1; // Seven iterations should be enough\\n      uint256 r1 = x / r;\\n      return uint128 (r < r1 ? r : r1);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x106a74099e49c8ccbf01103b2c3f62a457da08e317e0839d129591b283149d92\",\"license\":\"BSD-4-Clause\"},\"contracts/CTHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary CTHelpers {\\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function getConditionId(address oracle, bytes32 questionId, uint outcomeSlotCount) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount));\\n    }\\n\\n    uint constant P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint constant B = 3;\\n\\n    function sqrt(uint x) private pure returns (uint y) {\\n        uint p = P;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // add chain generated via https://crypto.stackexchange.com/q/27179/71252\\n            // and transformed to the following program:\\n\\n            // x=1; y=x+x; z=y+y; z=z+z; y=y+z; x=x+y; y=y+x; z=y+y; t=z+z; t=z+t; t=t+t;\\n            // t=t+t; z=z+t; x=x+z; z=x+x; z=z+z; y=y+z; z=y+y; z=z+z; z=z+z; z=y+z; x=x+z;\\n            // z=x+x; z=z+z; z=z+z; z=x+z; y=y+z; x=x+y; z=x+x; z=z+z; y=y+z; z=y+y; t=z+z;\\n            // t=t+t; t=t+t; z=z+t; x=x+z; y=y+x; z=y+y; z=z+z; z=z+z; x=x+z; z=x+x; z=z+z;\\n            // z=x+z; z=z+z; z=z+z; z=x+z; y=y+z; z=y+y; t=z+z; t=t+t; t=z+t; t=y+t; t=t+t;\\n            // t=t+t; t=t+t; t=t+t; z=z+t; x=x+z; z=x+x; z=x+z; y=y+z; z=y+y; z=y+z; z=z+z;\\n            // t=z+z; t=z+t; w=t+t; w=w+w; w=w+w; w=w+w; w=w+w; t=t+w; z=z+t; x=x+z; y=y+x;\\n            // z=y+y; x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; z=x+x; z=x+z; z=z+z; y=y+z; z=y+y;\\n            // z=z+z; x=x+z; y=y+x; z=y+y; z=y+z; x=x+z; y=y+x; x=x+y; y=y+x; z=y+y; z=z+z;\\n            // z=y+z; x=x+z; z=x+x; z=x+z; y=y+z; x=x+y; y=y+x; x=x+y; y=y+x; z=y+y; z=y+z;\\n            // z=z+z; x=x+z; y=y+x; z=y+y; z=y+z; z=z+z; x=x+z; z=x+x; t=z+z; t=t+t; t=z+t;\\n            // t=x+t; t=t+t; t=t+t; t=t+t; t=t+t; z=z+t; y=y+z; x=x+y; y=y+x; x=x+y; z=x+x;\\n            // z=x+z; z=z+z; z=z+z; z=z+z; z=x+z; y=y+z; z=y+y; z=y+z; z=z+z; x=x+z; z=x+x;\\n            // z=x+z; y=y+z; x=x+y; z=x+x; z=z+z; y=y+z; x=x+y; z=x+x; y=y+z; x=x+y; y=y+x;\\n            // z=y+y; z=y+z; x=x+z; y=y+x; z=y+y; z=y+z; z=z+z; z=z+z; x=x+z; z=x+x; z=z+z;\\n            // z=z+z; z=x+z; y=y+z; x=x+y; z=x+x; t=x+z; t=t+t; t=t+t; z=z+t; y=y+z; z=y+y;\\n            // x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; y=y+x; z=y+y; t=y+z; z=y+t; z=z+z; z=z+z;\\n            // z=t+z; x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; z=x+x; z=x+z; y=y+z; x=x+y; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; res=y+x\\n            // res == (P + 1) // 4\\n\\n            y := mulmod(x, x, p)\\n            {\\n                let z := mulmod(y, y, p)\\n                z := mulmod(z, z, p)\\n                y := mulmod(y, z, p)\\n                x := mulmod(x, y, p)\\n                y := mulmod(y, x, p)\\n                z := mulmod(y, y, p)\\n                {\\n                    let t := mulmod(z, z, p)\\n                    t := mulmod(z, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(z, t, p)\\n                    t := mulmod(y, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(z, t, p)\\n                    {\\n                        let w := mulmod(t, t, p)\\n                        w := mulmod(w, w, p)\\n                        w := mulmod(w, w, p)\\n                        w := mulmod(w, w, p)\\n                        w := mulmod(w, w, p)\\n                        t := mulmod(t, w, p)\\n                    }\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(z, t, p)\\n                    t := mulmod(x, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    t := mulmod(x, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    t := mulmod(y, z, p)\\n                    z := mulmod(y, t, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(t, z, p)\\n                }\\n                x := mulmod(x, z, p)\\n                y := mulmod(y, x, p)\\n                x := mulmod(x, y, p)\\n                y := mulmod(y, x, p)\\n                x := mulmod(x, y, p)\\n                z := mulmod(x, x, p)\\n                z := mulmod(x, z, p)\\n                y := mulmod(y, z, p)\\n            }\\n            x := mulmod(x, y, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            y := mulmod(y, x, p)\\n        }\\n    }\\n\\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    function getCollectionId(bytes32 parentCollectionId, bytes32 conditionId, uint indexSet) internal view returns (bytes32) {\\n        uint x1 = uint(keccak256(abi.encodePacked(conditionId, indexSet)));\\n        bool odd = x1 >> 255 != 0;\\n        uint y1;\\n        uint yy;\\n        do {\\n            x1 = addmod(x1, 1, P);\\n            yy = addmod(mulmod(x1, mulmod(x1, x1, P), P), B, P);\\n            y1 = sqrt(yy);\\n        } while(mulmod(y1, y1, P) != yy);\\n        if(odd && y1 % 2 == 0 || !odd && y1 % 2 == 1)\\n            y1 = P - y1;\\n\\n        uint x2 = uint(parentCollectionId);\\n        if(x2 != 0) {\\n            odd = x2 >> 254 != 0;\\n            x2 = (x2 << 2) >> 2;\\n            yy = addmod(mulmod(x2, mulmod(x2, x2, P), P), B, P);\\n            uint y2 = sqrt(yy);\\n            if(odd && y2 % 2 == 0 || !odd && y2 % 2 == 1)\\n                y2 = P - y2;\\n            require(mulmod(y2, y2, P) == yy, \\\"invalid parent collection ID\\\");\\n\\n            (bool success, bytes memory ret) = address(6).staticcall(abi.encode(x1, y1, x2, y2));\\n            require(success, \\\"ecadd failed\\\");\\n            (x1, y1) = abi.decode(ret, (uint, uint));\\n        }\\n\\n        if(y1 % 2 == 1)\\n            x1 ^= 1 << 254;\\n\\n        return bytes32(x1);\\n    }\\n\\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\\n    /// @param collateralToken Collateral token which backs the position.\\n    /// @param collectionId ID of the outcome collection associated with this position.\\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) internal pure returns (uint) {\\n        return uint(keccak256(abi.encodePacked(collateralToken, collectionId)));\\n    }\\n}\\n\",\"keccak256\":\"0xb3cb86bd3aa6c3d870930eb33bc647ebfc987a67865a99ab1f6dd1be0222ae4a\",\"license\":\"MIT\"},\"contracts/ConditionalTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC1155, SafeMath } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport { CTHelpers } from \\\"./CTHelpers.sol\\\";\\n\\n// Mainnet (ID: 1) canonical address: 0xC59b0e4De5F1248C1140964E0fF287B192407E0C\\n// Rinkeby (ID: 4) canonical address: 0x36bede640D19981A82090519bC1626249984c908\\n\\ncontract ConditionalTokens is ERC1155 {\\n    using SafeMath for uint256;\\n\\n    /// @dev Emitted upon the successful preparation of a condition.\\n    /// @param conditionId The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    event ConditionPreparation(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint outcomeSlotCount\\n    );\\n\\n    event ConditionResolution(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint outcomeSlotCount,\\n        uint[] payoutNumerators\\n    );\\n\\n    /// @dev Emitted when a position is successfully split.\\n    event PositionSplit(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint[] partition,\\n        uint amount\\n    );\\n    /// @dev Emitted when positions are successfully merged.\\n    event PositionsMerge(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint[] partition,\\n        uint amount\\n    );\\n    event PayoutRedemption(\\n        address indexed redeemer,\\n        IERC20 indexed collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] indexSets,\\n        uint payout\\n    );\\n\\n\\n    /// Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount.\\n    mapping(bytes32 => uint[]) public payoutNumerators;\\n    /// Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved.\\n    mapping(bytes32 => uint) public payoutDenominator;\\n\\n    constructor() ERC1155('') {}\\n\\n    /// @dev This function prepares a condition by initializing a payout vector associated with the condition.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function prepareCondition(address oracle, bytes32 questionId, uint outcomeSlotCount) external {\\n        // Limit of 256 because we use a partition array that is a number of 256 bits.\\n        require(outcomeSlotCount <= 256, \\\"too many outcome slots\\\");\\n        require(outcomeSlotCount > 1, \\\"there should be more than one outcome slot\\\");\\n        bytes32 conditionId = CTHelpers.getConditionId(oracle, questionId, outcomeSlotCount);\\n        require(payoutNumerators[conditionId].length == 0, \\\"condition already prepared\\\");\\n        payoutNumerators[conditionId] = new uint[](outcomeSlotCount);\\n        emit ConditionPreparation(conditionId, oracle, questionId, outcomeSlotCount);\\n    }\\n\\n    /// @dev Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.\\n    /// @param questionId The question ID the oracle is answering for\\n    /// @param payouts The oracle's answer\\n    function reportPayouts(bytes32 questionId, uint[] calldata payouts) external {\\n        uint outcomeSlotCount = payouts.length;\\n        require(outcomeSlotCount > 1, \\\"there should be more than one outcome slot\\\");\\n        // IMPORTANT, the oracle is enforced to be the sender because it's part of the hash.\\n        bytes32 conditionId = CTHelpers.getConditionId(msg.sender, questionId, outcomeSlotCount);\\n        require(payoutNumerators[conditionId].length == outcomeSlotCount, \\\"condition not prepared or found\\\");\\n        require(payoutDenominator[conditionId] == 0, \\\"payout denominator already set\\\");\\n\\n        uint den = 0;\\n        for (uint i = 0; i < outcomeSlotCount; i++) {\\n            uint num = payouts[i];\\n            den = den.add(num);\\n\\n            require(payoutNumerators[conditionId][i] == 0, \\\"payout numerator already set\\\");\\n            payoutNumerators[conditionId][i] = num;\\n        }\\n        require(den > 0, \\\"payout is all zeroes\\\");\\n        payoutDenominator[conditionId] = den;\\n        emit ConditionResolution(conditionId, msg.sender, questionId, outcomeSlotCount, payoutNumerators[conditionId]);\\n    }\\n\\n    /// @dev This function splits a position. If splitting from the collateral, this contract will attempt to transfer `amount` collateral from the message sender to itself. Otherwise, this contract will burn `amount` stake held by the message sender in the position being split worth of EIP 1155 tokens. Regardless, if successful, `amount` stake will be minted in the split target positions. If any of the transfers, mints, or burns fail, the transaction will revert. The transaction will also revert if the given partition is trivial, invalid, or refers to more slots than the condition is prepared with.\\n    /// @param collateralToken The address of the positions' backing collateral token.\\n    /// @param parentCollectionId The ID of the outcome collections common to the position being split and the split target positions. May be null, in which only the collateral is shared.\\n    /// @param conditionId The ID of the condition to split on.\\n    /// @param partition An array of disjoint index sets representing a nontrivial partition of the outcome slots of the given condition. E.g. A|B and C but not A|B and B|C (is not disjoint). Each element's a number which, together with the condition, represents the outcome collection. E.g. 0b110 is A|B, 0b010 is B, etc.\\n    /// @param amount The amount of collateral or stake to split.\\n    function splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external {\\n        require(partition.length > 1, \\\"got empty or singleton partition\\\");\\n        uint outcomeSlotCount = payoutNumerators[conditionId].length;\\n        require(outcomeSlotCount > 0, \\\"condition not prepared yet\\\");\\n\\n        // For a condition with 4 outcomes fullIndexSet's 0b1111; for 5 it's 0b11111...\\n        uint fullIndexSet = (1 << outcomeSlotCount) - 1;\\n        // freeIndexSet starts as the full collection\\n        uint freeIndexSet = fullIndexSet;\\n        // This loop checks that all condition sets are disjoint (the same outcome is not part of more than 1 set)\\n        uint[] memory positionIds = new uint[](partition.length);\\n        uint[] memory amounts = new uint[](partition.length);\\n        for (uint i = 0; i < partition.length; i++) {\\n            uint indexSet = partition[i];\\n            require(indexSet > 0 && indexSet < fullIndexSet, \\\"got invalid index set\\\");\\n            require((indexSet & freeIndexSet) == indexSet, \\\"partition not disjoint\\\");\\n            freeIndexSet ^= indexSet;\\n            positionIds[i] = CTHelpers.getPositionId(collateralToken, CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet));\\n            amounts[i] = amount;\\n        }\\n\\n        if (freeIndexSet == 0) {\\n            // Partitioning the full set of outcomes for the condition in this branch\\n            if (parentCollectionId == bytes32(0)) {\\n                require(collateralToken.transferFrom(msg.sender, address(this), amount), \\\"could not receive collateral tokens\\\");\\n            } else {\\n                _burn(\\n                    msg.sender,\\n                    CTHelpers.getPositionId(collateralToken, parentCollectionId),\\n                    amount\\n                );\\n            }\\n        } else {\\n            // Partitioning a subset of outcomes for the condition in this branch.\\n            // For example, for a condition with three outcomes A, B, and C, this branch\\n            // allows the splitting of a position $:(A|C) to positions $:(A) and $:(C).\\n            _burn(\\n                msg.sender,\\n                CTHelpers.getPositionId(collateralToken,\\n                    CTHelpers.getCollectionId(parentCollectionId, conditionId, fullIndexSet ^ freeIndexSet)),\\n                amount\\n            );\\n        }\\n\\n        _mintBatch(\\n            msg.sender,\\n            // position ID is the ERC 1155 token ID\\n            positionIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n        emit PositionSplit(msg.sender, collateralToken, parentCollectionId, conditionId, partition, amount);\\n    }\\n\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external {\\n        require(partition.length > 1, \\\"got empty or singleton partition\\\");\\n        uint outcomeSlotCount = payoutNumerators[conditionId].length;\\n        require(outcomeSlotCount > 0, \\\"condition not prepared yet\\\");\\n\\n        uint fullIndexSet = (1 << outcomeSlotCount) - 1;\\n        uint freeIndexSet = fullIndexSet;\\n        uint[] memory positionIds = new uint[](partition.length);\\n        uint[] memory amounts = new uint[](partition.length);\\n        for (uint i = 0; i < partition.length; i++) {\\n            uint indexSet = partition[i];\\n            require(indexSet > 0 && indexSet < fullIndexSet, \\\"got invalid index set\\\");\\n            require((indexSet & freeIndexSet) == indexSet, \\\"partition not disjoint\\\");\\n            freeIndexSet ^= indexSet;\\n            positionIds[i] = CTHelpers.getPositionId(collateralToken, CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet));\\n            amounts[i] = amount;\\n        }\\n        _burnBatch(\\n            msg.sender,\\n            positionIds,\\n            amounts\\n        );\\n\\n        if (freeIndexSet == 0) {\\n            if (parentCollectionId == bytes32(0)) {\\n                require(collateralToken.transfer(msg.sender, amount), \\\"could not send collateral tokens\\\");\\n            } else {\\n                _mint(\\n                    msg.sender,\\n                    CTHelpers.getPositionId(collateralToken, parentCollectionId),\\n                    amount,\\n                    \\\"\\\"\\n                );\\n            }\\n        } else {\\n            _mint(\\n                msg.sender,\\n                CTHelpers.getPositionId(collateralToken,\\n                    CTHelpers.getCollectionId(parentCollectionId, conditionId, fullIndexSet ^ freeIndexSet)),\\n                amount,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        emit PositionsMerge(msg.sender, collateralToken, parentCollectionId, conditionId, partition, amount);\\n    }\\n\\n    function redeemPositions(IERC20 collateralToken, bytes32 parentCollectionId, bytes32 conditionId, uint[] calldata indexSets) external {\\n        uint den = payoutDenominator[conditionId];\\n        require(den > 0, \\\"result for condition not received yet\\\");\\n        uint outcomeSlotCount = payoutNumerators[conditionId].length;\\n        require(outcomeSlotCount > 0, \\\"condition not prepared yet\\\");\\n\\n        uint totalPayout = 0;\\n\\n        uint fullIndexSet = (1 << outcomeSlotCount) - 1;\\n        for (uint i = 0; i < indexSets.length; i++) {\\n            uint indexSet = indexSets[i];\\n            require(indexSet > 0 && indexSet < fullIndexSet, \\\"got invalid index set\\\");\\n            uint positionId = CTHelpers.getPositionId(collateralToken,\\n                CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet));\\n\\n            uint payoutNumerator = 0;\\n            for (uint j = 0; j < outcomeSlotCount; j++) {\\n                if (indexSet & (1 << j) != 0) {\\n                    payoutNumerator = payoutNumerator.add(payoutNumerators[conditionId][j]);\\n                }\\n            }\\n\\n            uint payoutStake = balanceOf(msg.sender, positionId);\\n            if (payoutStake > 0) {\\n                totalPayout = totalPayout.add(payoutStake.mul(payoutNumerator).div(den));\\n                _burn(msg.sender, positionId, payoutStake);\\n            }\\n        }\\n\\n        if (totalPayout > 0) {\\n            if (parentCollectionId == bytes32(0)) {\\n                require(collateralToken.transfer(msg.sender, totalPayout), \\\"could not transfer payout to message sender\\\");\\n            } else {\\n                _mint(msg.sender, CTHelpers.getPositionId(collateralToken, parentCollectionId), totalPayout, \\\"\\\");\\n            }\\n        }\\n        emit PayoutRedemption(msg.sender, collateralToken, parentCollectionId, conditionId, indexSets, totalPayout);\\n    }\\n\\n    /// @dev Gets the outcome slot count of a condition.\\n    /// @param conditionId ID of the condition.\\n    /// @return Number of outcome slots associated with a condition, or zero if condition has not been prepared yet.\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint) {\\n        return payoutNumerators[conditionId].length;\\n    }\\n\\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function getConditionId(address oracle, bytes32 questionId, uint outcomeSlotCount) external pure returns (bytes32) {\\n        return CTHelpers.getConditionId(oracle, questionId, outcomeSlotCount);\\n    }\\n\\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    function getCollectionId(bytes32 parentCollectionId, bytes32 conditionId, uint indexSet) external view returns (bytes32) {\\n        return CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet);\\n    }\\n\\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\\n    /// @param collateralToken Collateral token which backs the position.\\n    /// @param collectionId ID of the outcome collection associated with this position.\\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) external pure returns (uint) {\\n        return CTHelpers.getPositionId(collateralToken, collectionId);\\n    }\\n}\\n\",\"keccak256\":\"0xb52c9740dc184a506a1b95d019b751beed013ee12badb1aafacd0a688ff84510\",\"license\":\"MIT\"},\"contracts/IPrecogToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n// Interface for PrecogToken contract\\r\\ninterface IPrecogToken is IERC20 {\\r\\n    // Function to mint new tokens and assign to the specified address\\r\\n    // Access restricted to the contract owner\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    // Function to burn tokens from the specified address\\r\\n    // Access restricted to the contract owner\\r\\n    function burn(address from, uint256 amount) external;\\r\\n\\r\\n    // Function to transfer tokens from one address to another\\r\\n    // Access restricted to the contract owner\\r\\n    function move(address from, address to, uint256 amount) external;\\r\\n\\r\\n    // Function to transfer ownership of the contract to a new address\\r\\n    // Access restricted to the current owner\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    // Emitted when ownership of the contract is transferred to a new address\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // Emitted when tokens are burned\\r\\n    event Burn(address indexed from, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0x93df489b0dfb85a0ca16514f3d4bcab38233e9263853651687dfe1f769dc6a20\",\"license\":\"MIT\"},\"contracts/PrecogMarketV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/// @title An implementation for liquidity-sensitive LMSR market maker in Solidity\\n/// @author Marto (based on Abdulla Al-Kamil LsLMSR implementation)\\n/// @dev Feel free to make any adjustments to the code\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {ABDKMath} from \\\"./ABDKMath64x64.sol\\\";\\nimport \\\"./ConditionalTokens.sol\\\";\\n\\ncontract PrecogMarketV2 is IERC1155Receiver, Ownable {\\n    /**\\n     * @dev: the contract uses the ABDKMath library to allow for math functions such as logarithms and exponents.\\n     * As such, all the sensitive state variables are stored as int128(signed 64.64 bit fixed point number).\\n     */\\n    using SafeERC20 for IERC20;\\n\\n    struct ShareInfo {\\n        uint256 buys;\\n        uint256 outcomeOneBalance;\\n        uint256 outcomeTwoBalance;\\n        uint256 deposited;\\n        uint256 withdrawn;\\n        uint256 claimed;\\n    }\\n\\n    uint256 public startTimestamp;\\n    uint256 public endTimestamp;\\n    bytes32 public condition;\\n    address public token;\\n    mapping(address => ShareInfo) public accountShares;\\n\\n    uint public numOutcomes;\\n    int128[] private q;\\n    int128 private b;\\n    int128 private alpha;\\n    int128 private currentCost;\\n    int128 private totalShares;\\n    uint private totalBuys;\\n    ConditionalTokens private CT;\\n    bool private initialized;\\n\\n    modifier onlyAfterInit {\\n        require(initialized == true);\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrSelf() {\\n        require(_msgSender() == owner() || _msgSender() == address(this), \\\"Ownable: caller is not the owner or self\\\");\\n        _;\\n    }\\n    /**\\n     * @notice Constructor function for the market maker\\n     * @param _ct The address for the deployed conditional tokens contract\\n     * @param _token Which ERC-20 token will be used to purchase and redeem outcome tokens for this condition\\n     */\\n    constructor(address _ct, address _token) {\\n        CT = ConditionalTokens(_ct);\\n        token = _token;\\n    }\\n\\n    /**\\n     * @notice Set up some of the variables for the market maker\\n     * @param _oracle The address for the EOA/contract which will act as the oracle for this condition\\n     * @param _questionId The question ID (needs to be unique)\\n     * @param _numOutcomes The number of different outcomes available\\n     * _subsidyToken Which ERC-20 token will be used to purchase and redeem outcome tokens for this condition\\n     * @param _subsidy How much initial funding is used to seed the market maker.\\n     * @param _overround How much 'profit' does the AMM claim? Note that this is\\n     * represented in bips. Therefore inputting 300 represents 0.30%\\n     */\\n    function setup(\\n        address _oracle,\\n        bytes32 _questionId,\\n        uint _numOutcomes,\\n        uint _subsidy,\\n        uint _overround\\n    ) public onlyOwner {\\n        require(initialized == false, 'Already initialized');\\n        require(_overround > 0, 'Cannot have 0 overround');\\n        CT.prepareCondition(_oracle, _questionId, _numOutcomes);\\n        condition = CT.getConditionId(_oracle, _questionId, _numOutcomes);\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _subsidy);\\n\\n        numOutcomes = _numOutcomes;\\n        int128 n = ABDKMath.fromUInt(_numOutcomes);\\n        int128 initial_subsidy = getTokenEth(token, _subsidy);\\n\\n        int128 overround = ABDKMath.divu(_overround, 10000); // Note: if the overround is too low, then exp overflows\\n        alpha = ABDKMath.div(overround, ABDKMath.mul(n, ABDKMath.ln(n)));\\n        b = ABDKMath.mul(ABDKMath.mul(initial_subsidy, n), alpha);\\n\\n        for (uint i = 0; i < _numOutcomes; i++) {\\n            q.push(initial_subsidy);\\n        }\\n\\n        initialized = true;\\n        totalShares = ABDKMath.mul(initial_subsidy, n);\\n        currentCost = cost();\\n    }\\n\\n    /**\\n     * @notice This function is used to buy outcome tokens.\\n     * @param _outcome The outcome(s) which a user is buying tokens for.\\n     * Note: This is the integer representation for the bit array.\\n     * @param _amount This is the number of outcome tokens purchased\\n     * @return _price The cost to purchase _amount number of tokens\\n     */\\n    function buy(uint256 _outcome, int128 _amount) public onlyAfterInit returns (int128 _price) {\\n        // If enabled, check if market already started\\n        if (startTimestamp > 0) {\\n            require(block.timestamp >= startTimestamp, 'Market not started');\\n        }\\n\\n        // If enabled, check if market still open\\n        if (endTimestamp > 0) {\\n            require(block.timestamp <= endTimestamp, 'Market already ended');\\n        }\\n\\n        // Send call to internal\\n        return _buy(_outcome, _amount, msg.sender);\\n    }\\n\\n    function _buy(uint256 _outcome, int128 _amount, address account) public onlyOwnerOrSelf returns (int128 _price) {\\n        // Special buy function to Buy tokens f\\n        require(_outcome > 0, 'Invalid outcome');\\n        require(CT.payoutDenominator(condition) == 0, 'Market already resolved');\\n\\n        for (uint j = 0; j < numOutcomes; j++) {\\n            // Note: (1 << j) is equal to (1 x 2 ** j)\\n            if ((_outcome & (1 << j)) != 0) {\\n                q[j] = ABDKMath.add(q[j], _amount);\\n                totalShares = ABDKMath.add(totalShares, _amount);\\n            }\\n        }\\n\\n        // Calculate new Beta parameter (taking into account new total_shares)\\n        b = ABDKMath.mul(totalShares, alpha);\\n        totalBuys += 1;\\n\\n        int128 sum_total;\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            sum_total = ABDKMath.add(sum_total, ABDKMath.exp(ABDKMath.div(q[i], b)));\\n        }\\n\\n        int128 new_cost = ABDKMath.mul(b, ABDKMath.ln(sum_total));\\n        _price = ABDKMath.sub(new_cost, currentCost);\\n        currentCost = new_cost;\\n\\n        uint token_cost = getTokenWei(token, _price);\\n        uint outcomeShares = getTokenWei(token, _amount);\\n        uint position = CT.getPositionId(IERC20(token), CT.getCollectionId(bytes32(0), condition, _outcome));\\n\\n        // Get token_cost amount of token from sender (as current payment)\\n        require(IERC20(token).transferFrom(msg.sender, address(this), token_cost), 'Error transferring tokens');\\n\\n        if (CT.balanceOf(address(this), position) < outcomeShares) {\\n            IERC20(token).approve(address(CT), getTokenWei(token, _amount));\\n            CT.splitPosition(\\n                IERC20(token), bytes32(0), condition, getPositionAndDustPositions(_outcome), outcomeShares\\n            );\\n        }\\n        // Give n_outcome_tokens of shares to current account (as shares bought)\\n        CT.safeTransferFrom(address(this), account, position, outcomeShares, '');\\n\\n        // Register account buy\\n        accountShares[account].buys += 1;\\n        if (_outcome == 1) {\\n            accountShares[account].outcomeOneBalance += outcomeShares;\\n        }\\n        if (_outcome == 2) {\\n            accountShares[account].outcomeTwoBalance += outcomeShares;\\n        }\\n        accountShares[account].deposited += token_cost;\\n    }\\n\\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) public onlyOwner {\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n    }\\n\\n    function withdraw() public onlyAfterInit onlyOwner {\\n        require(CT.payoutDenominator(condition) != 0, 'Market needs to be resolved');\\n        uint[] memory dust = new uint256[](numOutcomes);\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            dust[i] = 1 << i;\\n        }\\n        CT.redeemPositions(IERC20(token), bytes32(0), condition, dust);\\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    function getOnes(uint n) internal pure returns (uint count) {\\n        while (n != 0) {\\n            n = n & (n - 1);\\n            count++;\\n        }\\n        return count;\\n    }\\n\\n    function getPositionAndDustPositions(uint _outcome) public view returns (uint256[] memory) {\\n        uint index = (1 << numOutcomes) - 1;\\n        uint inv = _outcome ^ index;\\n        uint[] memory partx = new uint256[](getOnes(inv) + 1);\\n        uint n = 1;\\n        partx[0] = _outcome;\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            // Note: (1 << i) is equal to (1 x 2 ** i)\\n            if ((inv & 1 << i) != 0) {\\n                partx[n] = 1 << i;\\n                n++;\\n            }\\n        }\\n        return partx;\\n    }\\n\\n    /**\\n     *  @notice View function returning the cost function.\\n     *  This function returns the cost for this inventory state. It will be able\\n     *  to tell you the total amount of collateral spent within the market maker.\\n     *  For example, if a pool was seeded with 100 DAI and then a further 20 DAI\\n     *  has been spent, this function will return 120 DAI.\\n     */\\n    function cost() public view onlyAfterInit returns (int128) {\\n        int128 sum_total;\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            sum_total = ABDKMath.add(sum_total, ABDKMath.exp(ABDKMath.div(q[i], b)));\\n        }\\n        return ABDKMath.mul(b, ABDKMath.ln(sum_total));\\n    }\\n\\n    /**\\n     *  This function will tell you the cost (similar to above) after a proposed transaction.\\n     */\\n    function cost_after_buy(uint256 _outcome, int128 _amount) public view returns (int128) {\\n        int128 sum_total;\\n        int128[] memory newq = new int128[](q.length);\\n        int128 TB = totalShares;\\n\\n        for (uint j = 0; j < numOutcomes; j++) {\\n            // Note: (1 << j) is equal to (1 x 2 ** j)\\n            if ((_outcome & (1 << j)) != 0) {\\n                newq[j] = ABDKMath.add(q[j], _amount);\\n                TB = ABDKMath.add(TB, _amount);\\n            } else {\\n                newq[j] = q[j];\\n            }\\n        }\\n\\n        int128 _b = ABDKMath.mul(TB, alpha);\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            sum_total = ABDKMath.add(sum_total, ABDKMath.exp(ABDKMath.div(newq[i], _b)));\\n        }\\n\\n        return ABDKMath.mul(_b, ABDKMath.ln(sum_total));\\n    }\\n\\n    /**\\n     *  This function tells you how much it will cost to make a particular trade.\\n     *  It does this by calculating the difference between the current cost and the cost after the transaction.\\n     */\\n    function price(uint256 _outcome, int128 _amount) public view returns (int128) {\\n        return cost_after_buy(_outcome, _amount) - currentCost;\\n    }\\n\\n    function getMarketInfo() public view returns (int128, int128, int128, int128, uint256, int128) {\\n        if (q.length < 1) {\\n            return (0, 0, 0, 0, 0, 0);\\n        }\\n        return (totalShares, q[0], q[1], currentCost, totalBuys, b);\\n    }\\n\\n    function getConditionalTokens() public view returns (address) {\\n        return address(CT);\\n    }\\n\\n    function getTokenWei(address _token, int128 _amount) internal view returns (uint) {\\n        uint d = ERC20(_token).decimals();\\n        return ABDKMath.mulu(_amount, 10 ** d);\\n    }\\n\\n    function getTokenEth(address _token, uint _amount) internal view returns (int128) {\\n        uint d = ERC20(_token).decimals();\\n        return ABDKMath.divu(_amount, 10 ** d);\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override pure returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override pure returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x65646f7f510571ec8f805e6f27a05b68140bc7158fdec8fc7d56dca301d51350\",\"license\":\"MIT\"},\"contracts/PrecogMasterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./IPrecogToken.sol\\\";\\r\\nimport \\\"./PrecogMarketV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PrecogMasterV2\\r\\n * @dev Contract to manage Precog token claims and PredictionMarkets\\r\\n */\\r\\ncontract PrecogMasterV2 is AccessControl {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant CALLER_ROLE = keccak256(\\\"CALLER_ROLE\\\");\\r\\n\\r\\n    struct TokenClaim {\\r\\n        address account;\\r\\n        uint256 user;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 claimedTimestamp;\\r\\n    }\\r\\n\\r\\n    struct MiningSeason {\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 maxUserClaim;\\r\\n        uint256 maxTotalClaim;\\r\\n        uint256 maxTotalMint;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 mintedAmount;\\r\\n    }\\r\\n\\r\\n    struct PredictionMarket {\\r\\n        string name;\\r\\n        string description;\\r\\n        string category;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        address market;\\r\\n    }\\r\\n\\r\\n    address public token;\\r\\n    address private conditionalTokens;\\r\\n    uint256 public createdMarkets;\\r\\n    uint256 public currentSeason;\\r\\n\\r\\n    mapping(address => TokenClaim) public accountTokenClaims;\\r\\n    mapping(uint256 => TokenClaim) public userTokenClaims;\\r\\n    mapping(uint256 => MiningSeason) public miningSeasons;\\r\\n    mapping(uint256 => PredictionMarket) public markets;\\r\\n\\r\\n    event TokensClaimed(address indexed account, uint256 indexed user, uint256 amount, uint256 timestamp);\\r\\n    event TokensMinted(address indexed account, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    constructor(address precogToken, address initialAdmin) {\\r\\n        // Grant DEFAULT_ADMIN_ROLE to the initial admin (this is the admin to the ADMIN_ROLE list)\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        // Set ADMIN_ROLE as admin of CALLER_ROLE list\\r\\n        _setRoleAdmin(CALLER_ROLE, ADMIN_ROLE);\\r\\n        // Set already deployed precogToken as claimable token and collateral token for all Markets\\r\\n        token = precogToken;\\r\\n        // Grant ADMIN_ROLE to initial Admin (this enables to call \\\"addAdmin\\\" helper function)\\r\\n        _setupRole(ADMIN_ROLE, initialAdmin);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        require(hasRole(CALLER_ROLE, msg.sender), \\\"Restricted to callers\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Public functions and helpers\\r\\n    function hasClaimed(address account, uint256 user) external view returns (bool) {\\r\\n        return accountTokenClaims[account].claimedTimestamp != 0 || userTokenClaims[user].claimedTimestamp != 0;\\r\\n    }\\r\\n\\r\\n    // Only caller functions\\r\\n    function claimToken(address account, uint256 user, uint256 amount) external onlyCaller returns (bool) {\\r\\n        // Validate token claim\\r\\n        require(accountTokenClaims[account].claimedTimestamp == 0, \\\"Account already claimed\\\");\\r\\n        require(userTokenClaims[user].claimedTimestamp == 0, \\\"User already claimed\\\");\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(block.timestamp >= season.startTimestamp, \\\"Season not started\\\");\\r\\n            require(block.timestamp < season.endTimestamp, \\\"Season already ended\\\");\\r\\n            require(amount <= season.maxUserClaim, \\\"Invalid user claim amount\\\");\\r\\n            require(amount.add(season.claimedAmount) <= season.maxTotalClaim, \\\"Season max token claims reached\\\");\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints reached\\\");\\r\\n        }\\r\\n\\r\\n        // Register current token claim\\r\\n        TokenClaim memory claim = TokenClaim({\\r\\n            account: account,\\r\\n            user: user,\\r\\n            claimedAmount: amount,\\r\\n            claimedTimestamp: block.timestamp\\r\\n        });\\r\\n        accountTokenClaims[account] = claim;\\r\\n        userTokenClaims[user] = claim;\\r\\n        season.claimedAmount = season.claimedAmount.add(amount);\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(account, amount);\\r\\n\\r\\n        emit TokensClaimed(account, user, amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Only admin functions\\r\\n    function addCaller(address account) external onlyAdmin {\\r\\n        grantRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeCaller(address account) external onlyAdmin {\\r\\n        revokeRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function addAdmin(address account) external onlyAdmin {\\r\\n        grantRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address account) external onlyAdmin {\\r\\n        revokeRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function updateCurrentSeason(uint256 seasonIndex) external onlyAdmin {\\r\\n        currentSeason = seasonIndex;\\r\\n    }\\r\\n\\r\\n    function setMiningSeason(\\r\\n        uint256 seasonIndex,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        uint256 maxUserClaim,\\r\\n        uint256 maxTotalClaim,\\r\\n        uint256 maxTotalMint,\\r\\n        uint256 claimedAmount,\\r\\n        uint256 mintedAmount\\r\\n    ) external onlyAdmin {\\r\\n        miningSeasons[seasonIndex] = MiningSeason({\\r\\n            startTimestamp: startTimestamp,\\r\\n            endTimestamp: endTimestamp,\\r\\n            maxUserClaim: maxUserClaim,\\r\\n            maxTotalClaim: maxTotalClaim,\\r\\n            maxTotalMint: maxTotalMint,\\r\\n            claimedAmount: claimedAmount,\\r\\n            mintedAmount: mintedAmount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function setConditionalTokens(address ct) external onlyAdmin {\\r\\n        conditionalTokens = ct;\\r\\n    }\\r\\n\\r\\n    function createMarket(\\r\\n        uint256 funding,\\r\\n        uint256 dustFee,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp\\r\\n    ) external onlyCaller returns (uint256 newMarketId) {\\r\\n        // Create new market\\r\\n        newMarketId = createdMarkets;\\r\\n        address admin = getRoleMember(ADMIN_ROLE, 0);\\r\\n        PrecogMarketV2 newMarket = new PrecogMarketV2(conditionalTokens, token);\\r\\n        require(newMarket.numOutcomes() == 0, 'Invalid created market');\\r\\n        address createdMarket = address(newMarket);\\r\\n\\r\\n        // Mint new funding to seed the new created market\\r\\n        IPrecogToken(token).mint(address(this), funding);\\r\\n        IPrecogToken(token).approve(createdMarket, type(uint256).max);\\r\\n\\r\\n        // Initialize new market\\r\\n        newMarket.setup(admin, bytes32(newMarketId), 2, funding, dustFee);\\r\\n\\r\\n        // Save created market references in local storage\\r\\n        markets[newMarketId] = PredictionMarket({\\r\\n            name: \\\"New Market\\\",\\r\\n            description: \\\"\\\",\\r\\n            category: \\\"RANDOM\\\",\\r\\n            startTimestamp: startTimestamp,\\r\\n            endTimestamp: endTimestamp,\\r\\n            market: createdMarket\\r\\n        });\\r\\n\\r\\n        // Increase created markets global counter and return created market id\\r\\n        createdMarkets = createdMarkets.add(1);\\r\\n        return newMarketId;\\r\\n    }\\r\\n\\r\\n    function updateMarket(\\r\\n        uint256 id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp\\r\\n    ) external onlyAdmin {\\r\\n        require(id < createdMarkets, 'Invalid market');\\r\\n        if (bytes(name).length > 0) {\\r\\n            markets[id].name = name;\\r\\n        }\\r\\n        if (bytes(description).length > 0) {\\r\\n            markets[id].description = description;\\r\\n        }\\r\\n        if (bytes(category).length > 0) {\\r\\n            markets[id].category = category;\\r\\n        }\\r\\n        bool updateDates = false;\\r\\n        if (startTimestamp > 0) {\\r\\n            markets[id].startTimestamp = startTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (endTimestamp > 0) {\\r\\n            markets[id].endTimestamp = endTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (updateDates) {\\r\\n            PrecogMarketV2(markets[id].market).updateDates(markets[id].startTimestamp, markets[id].endTimestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketBuy(\\r\\n        uint256 marketId,\\r\\n        uint256 outcome,\\r\\n        int128 sharesAmount,\\r\\n        uint256 maxAmountIn\\r\\n    ) external onlyCaller returns (int128) {\\r\\n        require(marketId < createdMarkets, 'Invalid market');\\r\\n        // Move maxAmountIn of PRE tokens from buyer to Master\\r\\n        IPrecogToken(token).move(msg.sender, address(this), maxAmountIn);\\r\\n        uint256 balanceBeforeBuy = IPrecogToken(token).balanceOf(address(this));\\r\\n\\r\\n        // Send internal BUY to received market\\r\\n        int128 price = PrecogMarketV2(markets[marketId].market)._buy(outcome, sharesAmount, msg.sender);\\r\\n\\r\\n        // Return any amount not spent back to buyer\\r\\n        uint256 balanceAfterBuy = IPrecogToken(token).balanceOf(address(this));\\r\\n        uint balanceSpent = balanceBeforeBuy.sub(balanceAfterBuy);\\r\\n        IPrecogToken(token).transfer(msg.sender, maxAmountIn.sub(balanceSpent));\\r\\n\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function marketPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view returns (int128) {\\r\\n        require(marketId < createdMarkets, 'Invalid market');\\r\\n        return PrecogMarketV2(markets[marketId].market).price(outcome, sharesAmount);\\r\\n    }\\r\\n\\r\\n    function marketAccountShares(uint256 marketId, address account) external view\\r\\n    returns (uint256 buys, uint256 outOne, uint256 outTwo, uint256 deposited, uint256 withdrawn, uint256 claimed) {\\r\\n        require(marketId < createdMarkets, 'Invalid market');\\r\\n        address marketAddress = markets[marketId].market;\\r\\n        (buys, outOne, outTwo, deposited, withdrawn, claimed) = PrecogMarketV2(marketAddress).accountShares(account);\\r\\n    }\\r\\n\\r\\n    function marketSharesInfo(uint256 marketId) external view\\r\\n    returns (int128 totalShares, int128 qOne, int128 qTwo, int128 cost, uint256 totalBuys, int128 beta) {\\r\\n        require(marketId < createdMarkets, 'Invalid market');\\r\\n        address marketAddress = markets[marketId].market;\\r\\n        (totalShares, qOne, qTwo, cost, totalBuys, beta) = PrecogMarketV2(marketAddress).getMarketInfo();\\r\\n    }\\r\\n\\r\\n    function marketWithdraw(uint256 id) external onlyAdmin {\\r\\n        require(id < createdMarkets, 'Invalid market');\\r\\n        PrecogMarketV2(markets[id].market).withdraw();\\r\\n    }\\r\\n\\r\\n    function updateTokenClaim(address account, uint256 amount, uint256 timestamp) external onlyAdmin {\\r\\n        // Used to reset token claims\\r\\n        accountTokenClaims[account].claimedAmount = amount;\\r\\n        accountTokenClaims[account].claimedTimestamp = timestamp;\\r\\n        uint256 user = accountTokenClaims[account].user;\\r\\n        userTokenClaims[user].claimedAmount = amount;\\r\\n        userTokenClaims[user].claimedTimestamp = timestamp;\\r\\n    }\\r\\n\\r\\n    function precogMint(address to, uint256 amount) external onlyAdmin {\\r\\n        // Validate token mint\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints reached\\\");\\r\\n        }\\r\\n\\r\\n        // Register token mint\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(to, amount);\\r\\n\\r\\n        emit TokensMinted(to, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function precogBurn(address from, uint256 amount) external onlyAdmin {\\r\\n        // Here we should decrease `season.mintedAmount` for the current season\\r\\n        IPrecogToken(token).burn(from, amount);\\r\\n    }\\r\\n\\r\\n    function precogTransferOwnership(address newPrecogMaster) external onlyAdmin {\\r\\n        IPrecogToken(token).transferOwnership(newPrecogMaster);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2bdfc2eab814ad36d2454f9dd0d7abc88e70ea48ea2da17602e4a6061a0bae54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200627b3803806200627b83398101604081905262000034916200023d565b62000041600082620000ba565b6200007c7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b506000805160206200625b833981519152620000ca565b600180546001600160a01b0319166001600160a01b038416179055620000b26000805160206200625b83398151915282620000ba565b505062000274565b620000c682826200011c565b5050565b600082815260208190526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526020829052604090912060020155565b6000828152602081815260409091206200014191839062001fc862000195821b17901c565b15620000c65762000151620001b5565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001ac836001600160a01b038416620001b9565b90505b92915050565b3390565b6000620001c7838362000208565b620001ff57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001af565b506000620001af565b60009081526001919091016020526040902054151590565b80516001600160a01b03811681146200023857600080fd5b919050565b6000806040838503121562000250578182fd5b6200025b8362000220565b91506200026b6020840162000220565b90509250929050565b615fd780620002846000396000f3fe60806040523480156200001157600080fd5b5060043610620002145760003560e01c80639010d07c1162000129578063bcb3962111620000b7578063bcb3962114620004fc578063ca15c8731462000506578063d33bfe4f146200051d578063d547741f1462000534578063d6fb7d79146200054b578063de02852a1462000562578063ed29788c1462000579578063eef21cd21462000590578063f2d2303114620005a7578063fc0c546a14620005be5762000214565b80639010d07c14620003ec57806391d1485414620004125780639c6c412e1462000438578063a217fddf146200044f578063a9683f6e1462000459578063b1283e771462000484578063b293109614620004af578063b590b56f14620004c6578063b608b8f414620004d05762000214565b80633dc2724a11620001a75780633dc2724a14620003145780634836e867146200032b5780634f9451e914620003565780636354eeb3146200036d57806368304cdc14620003845780637048027514620003aa578063747293fb14620003c157806375b238fc14620003d8578063774237fc14620003e25762000214565b8063020917fe1462000219578063057971821462000232578063127e9cbd146200024957806314ae3ffc146200027b5780631785f53c1462000292578063248a9ca314620002a95780632f2ff15d14620002cf5780632fb1541b14620002e657806336568abe14620002fd575b600080fd5b620002306200022a366004620024a8565b620005c8565b005b620002306200024336600462002670565b62000674565b620002606200025a366004620024a8565b6200082e565b6040516200027294939291906200294e565b60405180910390f35b620002306200028c366004620024c5565b6200085f565b62000230620002a3366004620024a8565b62000905565b620002c0620002ba36600462002548565b6200095d565b6040516200027291906200297f565b62000230620002e036600462002561565b62000975565b62000230620002f736600462002812565b620009e3565b620002306200030e36600462002561565b62000a8e565b620002606200032536600462002548565b62000af5565b620003426200033c36600462002561565b62000b26565b604051620002729695949392919062002c7f565b620002c06200036736600462002796565b62000c01565b620002306200037e366004620024f1565b62000fda565b6200039b620003953660046200271a565b6200105a565b60405162000272919062002988565b62000230620003bb366004620024a8565b62001120565b62000230620003d2366004620024a8565b62001175565b620002c0620011ca565b620002c0620011dd565b62000403620003fd3660046200258f565b620011f0565b604051620002729190620028b5565b620004296200042336600462002561565b62001213565b60405162000272919062002974565b6200042962000449366004620024f1565b6200122d565b620002c0620015c3565b620004706200046a36600462002548565b620015c8565b604051620002729695949392919062002996565b6200049b6200049536600462002548565b6200169c565b6040516200027296959493929190620029c8565b62000429620004c0366004620024c5565b62001896565b620002c0620018d5565b620004e7620004e136600462002548565b620018db565b60405162000272979695949392919062002ca7565b620002c062001918565b620002c06200051736600462002548565b6200191e565b6200039b6200052e36600462002755565b62001937565b620002306200054536600462002561565b62001c6a565b620002306200055c36600462002548565b62001cc8565b6200023062000573366004620024c5565b62001d07565b620002306200058a36600462002548565b62001e5a565b62000230620005a1366004620024a8565b62001f08565b62000230620005b8366004620024a8565b62001f5d565b6200040362001fb9565b620005e360008051602062005f538339815191523362001213565b6200060b5760405162461bcd60e51b8152600401620006029062002b4e565b60405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b039091169063f2fde38b906200063d908490600401620028b5565b600060405180830381600087803b1580156200065857600080fd5b505af11580156200066d573d6000803e3d6000fd5b5050505050565b6200068f60008051602062005f538339815191523362001213565b620006ae5760405162461bcd60e51b8152600401620006029062002b4e565b6003548610620006d25760405162461bcd60e51b8152600401620006029062002b26565b845115620006fd5760008681526008602090815260409091208651620006fb928801906200235d565b505b8351156200072e57600086815260086020908152604090912085516200072c926001909201918701906200235d565b505b8251156200075f57600086815260086020908152604090912084516200075d926002909201918601906200235d565b505b60008215620007805750600086815260086020526040902060030182905560015b81156200079f5750600086815260086020526040902060040181905560015b80156200082557600087815260086020526040908190206005810154600382015460049283015493516339acb21f60e21b81526001600160a01b039092169363e6b2c87c93620007f0930162002c71565b600060405180830381600087803b1580156200080b57600080fd5b505af115801562000820573d6000803e3d6000fd5b505050505b50505050505050565b60056020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6200087a60008051602062005f538339815191523362001213565b620008995760405162461bcd60e51b8152600401620006029062002b4e565b600154604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90620008cd9085908590600401620028ed565b600060405180830381600087803b158015620008e857600080fd5b505af1158015620008fd573d6000803e3d6000fd5b505050505050565b6200092060008051602062005f538339815191523362001213565b6200093f5760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f538339815191528262001c6a565b50565b6000818152602081905260409020600201545b919050565b60008281526020819052604090206002015462000996906200042362001fdf565b620009d35760405162461bcd60e51b815260040180806020018281038252602f81526020018062005ed4602f913960400191505060405180910390fd5b620009df828262001fe3565b5050565b620009fe60008051602062005f538339815191523362001213565b62000a1d5760405162461bcd60e51b8152600401620006029062002b4e565b6040805160e0810182529788526020808901978852888201968752606089019586526080890194855260a0890193845260c089019283526000998a52600790529097209551865593516001860155915160028501555160038401555160048301555160058201559051600690910155565b62000a9862001fdf565b6001600160a01b0316816001600160a01b03161462000ae95760405162461bcd60e51b815260040180806020018281038252602f81526020018062005f73602f913960400191505060405180910390fd5b620009df828262002051565b60066020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b600080600080600080600354881062000b535760405162461bcd60e51b8152600401620006029062002b26565b600088815260086020526040908190206005015490516352c8b2f960e01b81526001600160a01b039091169081906352c8b2f99062000b97908b90600401620028b5565b60c06040518083038186803b15801562000bb057600080fd5b505afa15801562000bc5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000beb9190620027c8565b949e939d50919b50995097509095509350505050565b600062000c1e60008051602062005f038339815191523362001213565b62000c3d5760405162461bcd60e51b8152600401620006029062002a5f565b50600354600062000c5e60008051602062005f5383398151915282620011f0565b6002546001546040519293506000926001600160a01b03928316929091169062000c8890620023f2565b62000c9592919062002906565b604051809103906000f08015801562000cb2573d6000803e3d6000fd5b509050806001600160a01b0316638767d64e6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cef57600080fd5b505afa15801562000d04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2a919062002657565b1562000d4a5760405162461bcd60e51b8152600401620006029062002a2f565b6001546040516340c10f1960e01b815282916001600160a01b0316906340c10f199062000d7e9030908c90600401620028ed565b600060405180830381600087803b15801562000d9957600080fd5b505af115801562000dae573d6000803e3d6000fd5b505060015460405163095ea7b360e01b81526001600160a01b03909116925063095ea7b3915062000de890849060001990600401620028ed565b602060405180830381600087803b15801562000e0357600080fd5b505af115801562000e18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e3e919062002526565b506040516347aa795760e11b81526001600160a01b03831690638f54f2ae9062000e7690869088906002908e908e9060040162002920565b600060405180830381600087803b15801562000e9157600080fd5b505af115801562000ea6573d6000803e3d6000fd5b50506040805161010081018252600a60c082019081526913995dc813585c9ad95d60b21b60e0830152815281516020818101845260008083528184019290925283518085018552600681526552414e444f4d60d01b8183015283850152606083018c9052608083018b90526001600160a01b03871660a0840152898252600881529290208151805192955090935062000f449284929101906200235d565b50602082810151805162000f5f92600185019201906200235d565b506040820151805162000f7d9160028401916020909101906200235d565b5060608201516003828101919091556080830151600483015560a090920151600590910180546001600160a01b0319166001600160a01b039092169190911790555462000fcc906001620020bf565b600355505050949350505050565b62000ff560008051602062005f538339815191523362001213565b620010145760405162461bcd60e51b8152600401620006029062002b4e565b6001600160a01b03909216600090815260056020908152604080832060028082018690556003808301889055600190920154855260069093529220908101929092550155565b60006003548410620010805760405162461bcd60e51b8152600401620006029062002b26565b600084815260086020526040908190206005015490516337def63f60e21b81526001600160a01b039091169063df7bd8fc90620010c4908690869060040162002c3e565b60206040518083038186803b158015620010dd57600080fd5b505afa158015620010f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011189190620025b1565b949350505050565b6200113b60008051602062005f538339815191523362001213565b6200115a5760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f538339815191528262000975565b6200119060008051602062005f538339815191523362001213565b620011af5760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f038339815191528262000975565b60008051602062005f5383398151915281565b60008051602062005f0383398151915281565b60008281526020819052604081206200120a908362002118565b90505b92915050565b60008281526020819052604081206200120a908362002126565b60006200124a60008051602062005f038339815191523362001213565b620012695760405162461bcd60e51b8152600401620006029062002a5f565b6001600160a01b03841660009081526005602052604090206003015415620012a55760405162461bcd60e51b8152600401620006029062002b7c565b60008381526006602052604090206003015415620012d75760405162461bcd60e51b8152600401620006029062002ac5565b6004546000908152600760205260409020805415620013d1578054421015620013145760405162461bcd60e51b8152600401620006029062002bad565b806001015442106200133a5760405162461bcd60e51b8152600401620006029062002c10565b8060020154831115620013615760405162461bcd60e51b8152600401620006029062002af3565b6003810154600582015462001378908590620020bf565b1115620013995760405162461bcd60e51b8152600401620006029062002bd9565b60048101546006820154620013b0908590620020bf565b1115620013d15760405162461bcd60e51b8152600401620006029062002a8e565b60006040518060800160405280876001600160a01b031681526020018681526020018581526020014281525090508060056000886001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030155905050806006600087815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030155905050620014ee848360050154620020bf90919063ffffffff16565b60058301556006820154620015049085620020bf565b60068301556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906200153d9089908890600401620028ed565b600060405180830381600087803b1580156200155857600080fd5b505af11580156200156d573d6000803e3d6000fd5b5050505084866001600160a01b03167fe49649ad7d04a14b0d2a43dae89f207c0822143ff6f88a6480e88907e4e5c5488642604051620015af92919062002c71565b60405180910390a350600195945050505050565b600081565b6000806000806000806003548710620015f55760405162461bcd60e51b8152600401620006029062002b26565b600087815260086020526040908190206005015481516323341a0560e01b815291516001600160a01b039091169182916323341a059160048082019260c092909190829003018186803b1580156200164c57600080fd5b505afa15801562001661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016879190620025d0565b949d939c50919a509850965090945092505050565b60086020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015620017375780601f106200170b5761010080835404028352916020019162001737565b820191906000526020600020905b8154815290600101906020018083116200171957829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620017d95780601f10620017ad57610100808354040283529160200191620017d9565b820191906000526020600020905b815481529060010190602001808311620017bb57829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156200186f5780601f1062001843576101008083540402835291602001916200186f565b820191906000526020600020905b8154815290600101906020018083116200185157829003601f168201915b5050505060038301546004840154600590940154929390929091506001600160a01b031686565b6001600160a01b0382166000908152600560205260408120600301541515806200120a5750506000908152600660205260409020600301541515919050565b60035481565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60045481565b60008181526020819052604081206200120d906200213d565b60006200195460008051602062005f038339815191523362001213565b620019735760405162461bcd60e51b8152600401620006029062002a5f565b6003548510620019975760405162461bcd60e51b8152600401620006029062002b26565b60015460405163bb35783b60e01b81526001600160a01b039091169063bb35783b90620019cd90339030908790600401620028c9565b600060405180830381600087803b158015620019e857600080fd5b505af1158015620019fd573d6000803e3d6000fd5b50506001546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319062001a36903090600401620028b5565b60206040518083038186803b15801562001a4f57600080fd5b505afa15801562001a64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a8a919062002657565b600087815260086020526040808220600501549051636571930360e11b815292935090916001600160a01b039091169063cae326069062001ad49089908990339060040162002c4f565b602060405180830381600087803b15801562001aef57600080fd5b505af115801562001b04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b2a9190620025b1565b6001546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319062001b62903090600401620028b5565b60206040518083038186803b15801562001b7b57600080fd5b505afa15801562001b90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bb6919062002657565b9050600062001bc684836200214a565b6001549091506001600160a01b031663a9059cbb3362001be789856200214a565b6040518363ffffffff1660e01b815260040162001c06929190620028ed565b602060405180830381600087803b15801562001c2157600080fd5b505af115801562001c36573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c5c919062002526565b509198975050505050505050565b60008281526020819052604090206002015462001c8b906200042362001fdf565b62000ae95760405162461bcd60e51b815260040180806020018281038252603081526020018062005f236030913960400191505060405180910390fd5b62001ce360008051602062005f538339815191523362001213565b62001d025760405162461bcd60e51b8152600401620006029062002b4e565b600455565b62001d2260008051602062005f538339815191523362001213565b62001d415760405162461bcd60e51b8152600401620006029062002b4e565b600454600090815260076020526040902080541562001d92576004810154600682015462001d71908490620020bf565b111562001d925760405162461bcd60e51b8152600401620006029062002a8e565b600681015462001da39083620020bf565b60068201556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f199062001ddc9086908690600401620028ed565b600060405180830381600087803b15801562001df757600080fd5b505af115801562001e0c573d6000803e3d6000fd5b50505050826001600160a01b03167f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb475834260405162001e4d92919062002c71565b60405180910390a2505050565b62001e7560008051602062005f538339815191523362001213565b62001e945760405162461bcd60e51b8152600401620006029062002b4e565b600354811062001eb85760405162461bcd60e51b8152600401620006029062002b26565b600081815260086020526040808220600501548151633ccfd60b60e01b815291516001600160a01b0390911692633ccfd60b926004808201939182900301818387803b1580156200065857600080fd5b62001f2360008051602062005f538339815191523362001213565b62001f425760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f038339815191528262001c6a565b62001f7860008051602062005f538339815191523362001213565b62001f975760405162461bcd60e51b8152600401620006029062002b4e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b60006200120a836001600160a01b038416620021a8565b3390565b600082815260208190526040902062001ffd908262001fc8565b15620009df576200200d62001fdf565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206200206b9082620021f7565b15620009df576200207b62001fdf565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000828201838110156200120a576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b60006200120a83836200220e565b60006200120a836001600160a01b03841662002275565b60006200120d826200228d565b600082821115620021a2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000620021b6838362002275565b620021ee575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200120d565b5060006200120d565b60006200120a836001600160a01b03841662002291565b81546000908210620022525760405162461bcd60e51b815260040180806020018281038252602281526020018062005eb26022913960400191505060405180910390fd5b8260000182815481106200226257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015620023525783546000198083019190810190600090879083908110620022c657fe5b9060005260206000200154905080876000018481548110620022e457fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806200231557fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506200120d565b60009150506200120d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620023955760008555620023e0565b82601f10620023b057805160ff1916838001178555620023e0565b82800160010185558215620023e0579182015b82811115620023e0578251825591602001919060010190620023c3565b50620023ee92915062002400565b5090565b6131ca8062002ce883390190565b5b80821115620023ee576000815560010162002401565b80356001600160a01b03811681146200097057600080fd5b600082601f83011262002440578081fd5b813567ffffffffffffffff808211156200245657fe5b604051601f8301601f1916810160200182811182821017156200247557fe5b6040528281528483016020018610156200248d578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215620024ba578081fd5b6200120a8262002417565b60008060408385031215620024d8578081fd5b620024e38362002417565b946020939093013593505050565b60008060006060848603121562002506578081fd5b620025118462002417565b95602085013595506040909401359392505050565b60006020828403121562002538578081fd5b815180151581146200120a578182fd5b6000602082840312156200255a578081fd5b5035919050565b6000806040838503121562002574578182fd5b82359150620025866020840162002417565b90509250929050565b60008060408385031215620025a2578182fd5b50508035926020909101359150565b600060208284031215620025c3578081fd5b81516200120a8162002cd7565b60008060008060008060c08789031215620025e9578182fd5b8651620025f68162002cd7565b6020880151909650620026098162002cd7565b60408801519095506200261c8162002cd7565b60608801519094506200262f8162002cd7565b608088015160a08901519194509250620026498162002cd7565b809150509295509295509295565b60006020828403121562002669578081fd5b5051919050565b60008060008060008060c0878903121562002689578182fd5b86359550602087013567ffffffffffffffff80821115620026a8578384fd5b620026b68a838b016200242f565b96506040890135915080821115620026cc578384fd5b620026da8a838b016200242f565b95506060890135915080821115620026f0578384fd5b50620026ff89828a016200242f565b9350506080870135915060a087013590509295509295509295565b6000806000606084860312156200272f578081fd5b833592506020840135915060408401356200274a8162002cd7565b809150509250925092565b600080600080608085870312156200276b578182fd5b84359350602085013592506040850135620027868162002cd7565b9396929550929360600135925050565b60008060008060808587031215620027ac578182fd5b5050823594602084013594506040840135936060013592509050565b60008060008060008060c08789031215620027e1578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600080600080600080610100898b0312156200282f578586fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b60008151808452815b818110156200288e5760208185018101518683018201520162002870565b81811115620028a05782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600f96870b815294860b602086015292850b604085015290840b6060840152608083015290910b60a082015260c00190565b600060c08252620029dd60c083018962002867565b8281036020840152620029f1818962002867565b9050828103604084015262002a07818862002867565b6060840196909652505060808101929092526001600160a01b031660a0909101529392505050565b602080825260169082015275125b9d985b1a590818dc99585d1959081b585c9ad95d60521b604082015260600190565b6020808252601590820152745265737472696374656420746f2063616c6c65727360581b604082015260600190565b6020808252601e908201527f536561736f6e206d617820746f6b656e206d696e747320726561636865640000604082015260600190565b602080825260149082015273155cd95c88185b1c9958591e4818db185a5b595960621b604082015260600190565b602080825260199082015278125b9d985b1a59081d5cd95c8818db185a5b48185b5bdd5b9d603a1b604082015260600190565b6020808252600e908201526d125b9d985b1a59081b585c9ad95d60921b604082015260600190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b6020808252601790820152761058d8dbdd5b9d08185b1c9958591e4818db185a5b5959604a1b604082015260600190565b60208082526012908201527114d9585cdbdb881b9bdd081cdd185c9d195960721b604082015260600190565b6020808252601f908201527f536561736f6e206d617820746f6b656e20636c61696d73207265616368656400604082015260600190565b60208082526014908201527314d9585cdbdb88185b1c9958591e48195b99195960621b604082015260600190565b918252600f0b602082015260400190565b928352600f9190910b60208301526001600160a01b0316604082015260600190565b918252602082015260400190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b80600f0b81146200095a57600080fdfe60806040523480156200001157600080fd5b50604051620031ca380380620031ca833981810160405260408110156200003757600080fd5b50805160209091015160006200004c620000c8565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600b80546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055620000cc565b3390565b6130ee80620000dc6000396000f3fe608060405234801561001057600080fd5b506004361061012d5760003560e01c80638f54f2ae116100b35780638f54f2ae14610313578063a85adeab14610351578063bc197c8114610359578063c50313311461049d578063cae32606146104a5578063df7bd8fc146104da578063e6b2c87c14610500578063e6fd48bc14610523578063f23a6e611461052b578063f2fde38b146105be578063f76da1d9146105e4578063fc0c546a1461060a5761012d565b806301ffc9a71461013257806313faede61461016d57806323341a051461018c57806333194471146101cf5780633ccfd60b146101f357806352c8b2f9146101fd578063715018a6146102565780638062dd931461025e5780638767d64e146102845780638d0a6cff1461029e5780638da5cb5b1461030b575b600080fd5b6101596004803603602081101561014857600080fd5b50356001600160e01b031916610612565b604080519115158252519081900360200190f35b61017561061a565b60408051600f9290920b8252519081900360200190f35b6101946106be565b60408051600f97880b815295870b602087015293860b8585015291850b6060850152608084015290920b60a082015290519081900360c00190f35b6101d7610781565b604080516001600160a01b039092168252519081900360200190f35b6101fb610790565b005b6102236004803603602081101561021357600080fd5b50356001600160a01b0316610aaa565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6101fb610adf565b6101756004803603604081101561027457600080fd5b5080359060200135600f0b610b8b565b61028c610d36565b60408051918252519081900360200190f35b6102bb600480360360208110156102b457600080fd5b5035610d3c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f75781810151838201526020016102df565b505050509050019250505060405180910390f35b6101d7610e0c565b6101fb600480360360a081101561032957600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135610e1b565b61028c6111e9565b610480600480360360a081101561036f57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156103a257600080fd5b8201836020820111156103b457600080fd5b803590602001918460208302840111600160201b831117156103d557600080fd5b919390929091602081019035600160201b8111156103f257600080fd5b82018360208201111561040457600080fd5b803590602001918460208302840111600160201b8311171561042557600080fd5b919390929091602081019035600160201b81111561044257600080fd5b82018360208201111561045457600080fd5b803590602001918460018302840111600160201b8311171561047557600080fd5b5090925090506111ef565b604080516001600160e01b03199092168252519081900360200190f35b61028c611203565b610175600480360360608110156104bb57600080fd5b508035906020810135600f0b90604001356001600160a01b0316611209565b610175600480360360408110156104f057600080fd5b5080359060200135600f0b611a83565b6101fb6004803603604081101561051657600080fd5b5080359060200135611a9e565b61028c611b0b565b610480600480360360a081101561054157600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561058057600080fd5b82018360208201111561059257600080fd5b803590602001918460018302840111600160201b831117156105b357600080fd5b509092509050611b11565b6101fb600480360360208110156105d457600080fd5b50356001600160a01b0316611b23565b610175600480360360408110156105fa57600080fd5b5080359060200135600f0b611c25565b6101d7611cff565b60005b919050565b600b54600090600160a01b900460ff16151560011461063857600080fd5b6000805b60065481101561069f576106958261069061068b6007858154811061065d57fe5b6000918252602090912060028204015460085460019092166010026101000a9004600f90810b91900b611d0e565b611d61565b611db4565b915060010161063c565b506008546106b890600f0b6106b383611de7565b611e21565b91505090565b600080600080600080600160078054905010156106ec57506000945084935083925082915081905080610779565b60095460078054600160801b909204600f0b9160009061070857fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b600760018154811061073957fe5b60009182526020909120600282040154600954600a54600854959b5093995060019092166010026101000a9004600f90810b975090810b95509093500b90505b909192939495565b600b546001600160a01b031690565b600b54600160a01b900460ff1615156001146107ab57600080fd5b6107b3611e57565b6001600160a01b03166107c4610e0c565b6001600160a01b03161461080d576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600b546003546040805163dd34de6760e01b81526004810192909252516001600160a01b039092169163dd34de6791602480820192602092909190829003018186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d602081101561088657600080fd5b50516108d7576040805162461bcd60e51b815260206004820152601b60248201527a13585c9ad95d081b9959591cc81d1bc81899481c995cdbdb1d9959602a1b604482015290519081900360640190fd5b600060065467ffffffffffffffff811180156108f257600080fd5b5060405190808252806020026020018201604052801561091c578160200160208202803683370190505b50905060005b60065481101561095057806001901b82828151811061093d57fe5b6020908102919091010152600101610922565b50600b5460048054600354604051626dc0df60e21b81526001600160a01b039283169381018481526000602483018190526044830184905260806064840190815288516084850152885195909716966301b7037c969591949389939260a490910190602080860191028083838a5b838110156109d65781810151838201526020016109be565b5050505090500195505050505050600060405180830381600087803b1580156109fe57600080fd5b505af1158015610a12573d6000803e3d6000fd5b505060048054604080516370a0823160e01b8152309381019390935251610aa794503393506001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d6020811015610a9257600080fd5b50516004546001600160a01b03169190611e5b565b50565b600560208190526000918252604090912080546001820154600283015460038401546004850154949095015492949193909286565b610ae7611e57565b6001600160a01b0316610af8610e0c565b6001600160a01b031614610b41576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080600060078054905067ffffffffffffffff81118015610bac57600080fd5b50604051908082528060200260200182016040528015610bd6578160200160208202803683370190505b50600954909150600160801b9004600f0b60005b600654811015610cc2576001811b871615610c6957610c3860078281548110610c0f57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b87611db4565b838281518110610c4457fe5b6020026020010190600f0b9081600f0b81525050610c628287611db4565b9150610cba565b60078181548110610c7657fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b838281518110610ca557fe5b6020026020010190600f0b9081600f0b815250505b600101610bea565b50600854600090610cde908390600160801b9004600f0b611e21565b905060005b600654811015610d1b57610d118561069061068b878581518110610d0357fe5b602002602001015186611d0e565b9450600101610ce3565b50610d29816106b386611de7565b9450505050505b92915050565b60065481565b6006546060906001901b600019018281186000610d5882611eb2565b60010167ffffffffffffffff81118015610d7157600080fd5b50604051908082528060200260200182016040528015610d9b578160200160208202803683370190505b5090506000600190508582600081518110610db257fe5b60200260200101818152505060005b600654811015610e01576001811b841615610df957806001901b838381518110610de757fe5b60209081029190910101526001909101905b600101610dc1565b509095945050505050565b6000546001600160a01b031690565b610e23611e57565b6001600160a01b0316610e34610e0c565b6001600160a01b031614610e7d576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600b54600160a01b900460ff1615610ed2576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b60008111610f21576040805162461bcd60e51b815260206004820152601760248201527610d85b9b9bdd081a185d99480c081bdd995c9c9bdd5b99604a1b604482015290519081900360640190fd5b600b546040805163365bb9d560e21b81526001600160a01b03888116600483015260248201889052604482018790529151919092169163d96ee75491606480830192600092919082900301818387803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b5050600b5460408051634296357160e11b81526001600160a01b038a81166004830152602482018a905260448201899052915191909216935063852c6ae292506064808301926020929190829003018186803b158015610ff057600080fd5b505afa158015611004573d6000803e3d6000fd5b505050506040513d602081101561101a57600080fd5b5051600355600454611037906001600160a01b0316333085611ecc565b6006839055600061104784611f2c565b600454909150600090611063906001600160a01b031685611f4a565b9050600061107384612710611fcd565b905061108b81611086856106b387611de7565b611d0e565b600860106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506110d36110c18385611e21565b600854600160801b9004600f0b611e21565b60088054600f9290920b6001600160801b03166001600160801b031990921691909117905560005b8681101561116b5760078054600180820183556000929092527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600282040180549183166010026101000a6001600160801b0381810219909316600f88900b9390931602919091179055016110fb565b50600b805460ff60a01b1916600160a01b1790556111898284611e21565b600960106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506111ba61061a565b60098054600f9290920b6001600160801b03166001600160801b03199092169190911790555050505050505050565b60025481565b63bc197c8160e01b98975050505050505050565b60035481565b6000611213610e0c565b6001600160a01b0316611224611e57565b6001600160a01b0316148061124857503061123d611e57565b6001600160a01b0316145b6112835760405162461bcd60e51b81526004018080602001828103825260288152602001806130676028913960400191505060405180910390fd5b600084116112ca576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b600b546003546040805163dd34de6760e01b81526004810192909252516001600160a01b039092169163dd34de6791602480820192602092909190829003018186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d602081101561134357600080fd5b505115611391576040805162461bcd60e51b815260206004820152601760248201527613585c9ad95d08185b1c9958591e481c995cdbdb1d9959604a1b604482015290519081900360640190fd5b60005b600654811015611476576001811b85161561146e576113e2600782815481106113b957fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b85611db4565b600782815481106113ef57fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611444600960109054906101000a9004600f0b85611db4565b600960106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055505b600101611394565b5060095460085461149b91600160801b90819004600f90810b9291909104900b611e21565b60088054600f9290920b6001600160801b03166001600160801b0319909216919091179055600a805460010190556000805b6006548110156114f8576114ee8261069061068b6007858154811061065d57fe5b91506001016114cd565b5060085460009061150f90600f0b6106b384611de7565b600954909150611523908290600f0b612004565b600980546001600160801b0319166001600160801b03600f85900b1617905560045490935060009061155e906001600160a01b031685612037565b60045490915060009061157a906001600160a01b031688612037565b600b54600480546003546040805163856296f760e01b815260009481018590526024810192909252604482018e90525194955091936001600160a01b03938416936339dd753093921691849163856296f791606480820192602092909190829003018186803b1580156115ec57600080fd5b505afa158015611600573d6000803e3d6000fd5b505050506040513d602081101561161657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152516044808301926020929190829003018186803b15801561166557600080fd5b505afa158015611679573d6000803e3d6000fd5b505050506040513d602081101561168f57600080fd5b505160048054604080516323b872dd60e01b8152339381019390935230602484015260448301879052519293506001600160a01b0316916323b872dd916064808201926020929091908290030181600087803b1580156116ee57600080fd5b505af1158015611702573d6000803e3d6000fd5b505050506040513d602081101561171857600080fd5b5051611767576040805162461bcd60e51b81526020600482015260196024820152784572726f72207472616e7366657272696e6720746f6b656e7360381b604482015290519081900360640190fd5b600b5460408051627eeac760e11b815230600482015260248101849052905184926001600160a01b03169162fdd58e916044808301926020929190829003018186803b1580156117b657600080fd5b505afa1580156117ca573d6000803e3d6000fd5b505050506040513d60208110156117e057600080fd5b5051101561195957600454600b546001600160a01b039182169163095ea7b3911661180b838c612037565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561185157600080fd5b505af1158015611865573d6000803e3d6000fd5b505050506040513d602081101561187b57600080fd5b5050600b546004546003546001600160a01b03928316926372ce42759216906000906118a68e610d3c565b876040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156119175781810151838201526020016118ff565b505050509050019650505050505050600060405180830381600087803b15801561194057600080fd5b505af1158015611954573d6000803e3d6000fd5b505050505b600b5460408051637921219560e11b81523060048201526001600160a01b038a81166024830152604482018590526064820186905260a06084830152600060a48301819052925193169263f242432a9260c48084019391929182900301818387803b1580156119c757600080fd5b505af11580156119db573d6000803e3d6000fd5b505050506001600160a01b038716600090815260056020526040902080546001908101909155891415611a2a576001600160a01b03871660009081526005602052604090206001018054830190555b8860021415611a55576001600160a01b03871660009081526005602052604090206002018054830190555b50506001600160a01b0390941660009081526005602052604090206003018054909401909355509392505050565b600954600090600f0b611a968484610b8b565b039392505050565b611aa6611e57565b6001600160a01b0316611ab7610e0c565b6001600160a01b031614611b00576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600191909155600255565b60015481565b63f23a6e6160e01b9695505050505050565b611b2b611e57565b6001600160a01b0316611b3c610e0c565b6001600160a01b031614611b85576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b6001600160a01b038116611bca5760405162461bcd60e51b81526004018080602001828103825260268152602001806130216026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600b54600090600160a01b900460ff161515600114611c4357600080fd5b60015415611c9757600154421015611c97576040805162461bcd60e51b815260206004820152601260248201527113585c9ad95d081b9bdd081cdd185c9d195960721b604482015290519081900360640190fd5b60025415611ced57600254421115611ced576040805162461bcd60e51b815260206004820152601460248201527313585c9ad95d08185b1c9958591e48195b99195960621b604482015290519081900360640190fd5b611cf8838333611209565b9392505050565b6004546001600160a01b031681565b600081600f0b60001415611d2157600080fd5b600082600f0b604085600f0b901b81611d3657fe5b05905060016001607f1b03198112801590611d58575060016001607f1b038113155b611cf857600080fd5b6000600160461b82600f0b12611d7657600080fd5b6001600160461b031982600f0b1215611d9157506000610615565b610d30608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6120b2565b6000600f83810b9083900b0160016001607f1b03198112801590611d58575060016001607f1b03811315611cf857600080fd5b60008082600f0b13611df857600080fd5b6080611e0383612b20565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b6000600f83810b9083900b0260401d60016001607f1b03198112801590611d58575060016001607f1b03811315611cf857600080fd5b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611ead908490612bef565b505050565b60005b811561061557600019820190911690600101611eb5565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611f26908590612bef565b50505050565b6000677fffffffffffffff821115611f4357600080fd5b5060401b90565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8657600080fd5b505afa158015611f9a573d6000803e3d6000fd5b505050506040513d6020811015611fb057600080fd5b505160ff169050611fc583600a83900a611fcd565b949350505050565b600081611fd957600080fd5b6000611fe58484612ca0565b905060016001607f1b036001600160801b0382161115611cf857600080fd5b6000600f82810b9084900b0360016001607f1b03198112801590611d58575060016001607f1b03811315611cf857600080fd5b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561207357600080fd5b505afa158015612087573d6000803e3d6000fd5b505050506040513d602081101561209d57600080fd5b505160ff169050611fc583600a83900a612de9565b6000600160461b82600f0b126120c757600080fd5b6001600160461b031982600f0b12156120e257506000610615565b6001607f1b60006001603f1b8416600f0b13156121105770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b6000836001603e1b16600f0b1315612139577001306fe0a31b7152de8d5a46305c85edec0260801c5b6000836001603d1b16600f0b1315612162577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b6000836001603c1b16600f0b131561218b5770010b5586cf9890f6298b92b71842a983630260801c5b6000836001603b1b16600f0b13156121b4577001059b0d31585743ae7c548eb68ca417fd0260801c5b6000836001603a1b16600f0b13156121dd57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b600083600160391b16600f0b13156122065770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561222f57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083600160371b16600f0b13156122585770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083600160361b16600f0b1315612281577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083600160351b16600f0b13156122aa57700100162f3904051fa128bca9c55c31e5df0260801c5b600083600160341b16600f0b13156122d3577001000b175effdc76ba38e31671ca9397250260801c5b600083600160331b16600f0b13156122fc57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083600160321b16600f0b13156123255770010002c5cc37da9491d0985c348c68e7b30260801c5b600083600160311b16600f0b131561234e577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156123775770010000b17255775c040618bf4a4ade83fc0260801c5b6000836001602f1b16600f0b13156123a0577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836001602e1b16600f0b13156123c957700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836001602d1b16600f0b13156123f25770010000162e43f4f831060e02d839a9d16d0260801c5b6000836001602c1b16600f0b131561241b57700100000b1721bcfc99d9f890ea069117630260801c5b6000836001602b1b16600f0b13156124445770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836001602a1b16600f0b131561246d577001000002c5c863b73f016468f6bac5ca2b0260801c5b600083600160291b16600f0b131561249657700100000162e430e5a18f6119e3c02282a50260801c5b600083600160281b16600f0b13156124bf577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b13156124e957700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156125135770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b131561253d577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156125675770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315612591577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b13156125bb57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156125e55770010000000162e42ff0999ce3541b9fffcf0260801c5b600083600160201b16600f0b131561260e57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156126375770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315612660577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561268957700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156126b2577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b13156126db57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156127045770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b131561272d577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156127565770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b131561277e577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156127a657700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156127ce5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156127f657700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b131561281e5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315612846577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561286e57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315612896577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156128bd57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156128e45770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b131561290b577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156129325770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315612959577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561298057700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156129a75770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b13156129ce57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156129f45770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315612a1a577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b1315612a4057700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315612a66577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b1315612a8c57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b1315612ab25770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315612ad8577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315612afe5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b03811115610d3057600080fd5b60008082600f0b13612b3157600080fd5b6000600f83900b600160401b8112612b4b576040918201911d5b600160201b8112612b5e576020918201911d5b620100008112612b70576010918201911d5b6101008112612b81576008918201911d5b60108112612b91576004918201911d5b60048112612ba1576002918201911d5b60028112612bb0576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b6000811315610e015790800260ff81901c8281029390930192607f011c9060011d612bc9565b6000612c44826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e519092919063ffffffff16565b805190915015611ead57808060200190516020811015612c6357600080fd5b5051611ead5760405162461bcd60e51b815260040180806020018281038252602a81526020018061308f602a913960400191505060405180910390fd5b600081612cac57600080fd5b60006001600160c01b038411612cd15782604085901b81612cc957fe5b049050612dd5565b60c084811c600160201b8110612ce9576020918201911c5b620100008110612cfb576010918201911c5b6101008110612d0c576008918201911c5b60108110612d1c576004918201911c5b60048110612d2c576002918201911c5b60028110612d3b576001820191505b60bf820360018603901c6001018260ff0387901b81612d5657fe5b0492506001600160801b03831115612d6d57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015612d99576001820391505b608084901b92900382811015612db0576001820391505b829003608084901c8214612dc057fe5b888181612dc957fe5b04870196505050505050505b6001600160801b03811115611cf857600080fd5b600081612df857506000610d30565b600083600f0b1215612e0957600080fd5b600f83900b6001600160801b038316810260401c90608084901c026001600160c01b03811115612e3857600080fd5b60401b8119811115612e4957600080fd5b019392505050565b6060611fc5848460008585612e6585612f76565b612eb6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310612ef45780518252601f199092019160209182019101612ed5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f56576040519150601f19603f3d011682016040523d82523d6000602084013e612f5b565b606091505b5091509150612f6b828286612f7c565b979650505050505050565b3b151590565b60608315612f8b575081611cf8565b825115612f9b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fe5578181015183820152602001612fcd565b50505050905090810190601f1680156130125780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572206f722073656c665361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220743b7331692cfd83b8e75fb25827790276b7667c435040d6c505e7c33055007164736f6c63430007060033456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212204be5e3a3f725ee4a29c70406f4bb36aeb813347cb4a8dc0d01258bd23d0d3d1964736f6c63430007060033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002145760003560e01c80639010d07c1162000129578063bcb3962111620000b7578063bcb3962114620004fc578063ca15c8731462000506578063d33bfe4f146200051d578063d547741f1462000534578063d6fb7d79146200054b578063de02852a1462000562578063ed29788c1462000579578063eef21cd21462000590578063f2d2303114620005a7578063fc0c546a14620005be5762000214565b80639010d07c14620003ec57806391d1485414620004125780639c6c412e1462000438578063a217fddf146200044f578063a9683f6e1462000459578063b1283e771462000484578063b293109614620004af578063b590b56f14620004c6578063b608b8f414620004d05762000214565b80633dc2724a11620001a75780633dc2724a14620003145780634836e867146200032b5780634f9451e914620003565780636354eeb3146200036d57806368304cdc14620003845780637048027514620003aa578063747293fb14620003c157806375b238fc14620003d8578063774237fc14620003e25762000214565b8063020917fe1462000219578063057971821462000232578063127e9cbd146200024957806314ae3ffc146200027b5780631785f53c1462000292578063248a9ca314620002a95780632f2ff15d14620002cf5780632fb1541b14620002e657806336568abe14620002fd575b600080fd5b620002306200022a366004620024a8565b620005c8565b005b620002306200024336600462002670565b62000674565b620002606200025a366004620024a8565b6200082e565b6040516200027294939291906200294e565b60405180910390f35b620002306200028c366004620024c5565b6200085f565b62000230620002a3366004620024a8565b62000905565b620002c0620002ba36600462002548565b6200095d565b6040516200027291906200297f565b62000230620002e036600462002561565b62000975565b62000230620002f736600462002812565b620009e3565b620002306200030e36600462002561565b62000a8e565b620002606200032536600462002548565b62000af5565b620003426200033c36600462002561565b62000b26565b604051620002729695949392919062002c7f565b620002c06200036736600462002796565b62000c01565b620002306200037e366004620024f1565b62000fda565b6200039b620003953660046200271a565b6200105a565b60405162000272919062002988565b62000230620003bb366004620024a8565b62001120565b62000230620003d2366004620024a8565b62001175565b620002c0620011ca565b620002c0620011dd565b62000403620003fd3660046200258f565b620011f0565b604051620002729190620028b5565b620004296200042336600462002561565b62001213565b60405162000272919062002974565b6200042962000449366004620024f1565b6200122d565b620002c0620015c3565b620004706200046a36600462002548565b620015c8565b604051620002729695949392919062002996565b6200049b6200049536600462002548565b6200169c565b6040516200027296959493929190620029c8565b62000429620004c0366004620024c5565b62001896565b620002c0620018d5565b620004e7620004e136600462002548565b620018db565b60405162000272979695949392919062002ca7565b620002c062001918565b620002c06200051736600462002548565b6200191e565b6200039b6200052e36600462002755565b62001937565b620002306200054536600462002561565b62001c6a565b620002306200055c36600462002548565b62001cc8565b6200023062000573366004620024c5565b62001d07565b620002306200058a36600462002548565b62001e5a565b62000230620005a1366004620024a8565b62001f08565b62000230620005b8366004620024a8565b62001f5d565b6200040362001fb9565b620005e360008051602062005f538339815191523362001213565b6200060b5760405162461bcd60e51b8152600401620006029062002b4e565b60405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b039091169063f2fde38b906200063d908490600401620028b5565b600060405180830381600087803b1580156200065857600080fd5b505af11580156200066d573d6000803e3d6000fd5b5050505050565b6200068f60008051602062005f538339815191523362001213565b620006ae5760405162461bcd60e51b8152600401620006029062002b4e565b6003548610620006d25760405162461bcd60e51b8152600401620006029062002b26565b845115620006fd5760008681526008602090815260409091208651620006fb928801906200235d565b505b8351156200072e57600086815260086020908152604090912085516200072c926001909201918701906200235d565b505b8251156200075f57600086815260086020908152604090912084516200075d926002909201918601906200235d565b505b60008215620007805750600086815260086020526040902060030182905560015b81156200079f5750600086815260086020526040902060040181905560015b80156200082557600087815260086020526040908190206005810154600382015460049283015493516339acb21f60e21b81526001600160a01b039092169363e6b2c87c93620007f0930162002c71565b600060405180830381600087803b1580156200080b57600080fd5b505af115801562000820573d6000803e3d6000fd5b505050505b50505050505050565b60056020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6200087a60008051602062005f538339815191523362001213565b620008995760405162461bcd60e51b8152600401620006029062002b4e565b600154604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90620008cd9085908590600401620028ed565b600060405180830381600087803b158015620008e857600080fd5b505af1158015620008fd573d6000803e3d6000fd5b505050505050565b6200092060008051602062005f538339815191523362001213565b6200093f5760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f538339815191528262001c6a565b50565b6000818152602081905260409020600201545b919050565b60008281526020819052604090206002015462000996906200042362001fdf565b620009d35760405162461bcd60e51b815260040180806020018281038252602f81526020018062005ed4602f913960400191505060405180910390fd5b620009df828262001fe3565b5050565b620009fe60008051602062005f538339815191523362001213565b62000a1d5760405162461bcd60e51b8152600401620006029062002b4e565b6040805160e0810182529788526020808901978852888201968752606089019586526080890194855260a0890193845260c089019283526000998a52600790529097209551865593516001860155915160028501555160038401555160048301555160058201559051600690910155565b62000a9862001fdf565b6001600160a01b0316816001600160a01b03161462000ae95760405162461bcd60e51b815260040180806020018281038252602f81526020018062005f73602f913960400191505060405180910390fd5b620009df828262002051565b60066020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b600080600080600080600354881062000b535760405162461bcd60e51b8152600401620006029062002b26565b600088815260086020526040908190206005015490516352c8b2f960e01b81526001600160a01b039091169081906352c8b2f99062000b97908b90600401620028b5565b60c06040518083038186803b15801562000bb057600080fd5b505afa15801562000bc5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000beb9190620027c8565b949e939d50919b50995097509095509350505050565b600062000c1e60008051602062005f038339815191523362001213565b62000c3d5760405162461bcd60e51b8152600401620006029062002a5f565b50600354600062000c5e60008051602062005f5383398151915282620011f0565b6002546001546040519293506000926001600160a01b03928316929091169062000c8890620023f2565b62000c9592919062002906565b604051809103906000f08015801562000cb2573d6000803e3d6000fd5b509050806001600160a01b0316638767d64e6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cef57600080fd5b505afa15801562000d04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2a919062002657565b1562000d4a5760405162461bcd60e51b8152600401620006029062002a2f565b6001546040516340c10f1960e01b815282916001600160a01b0316906340c10f199062000d7e9030908c90600401620028ed565b600060405180830381600087803b15801562000d9957600080fd5b505af115801562000dae573d6000803e3d6000fd5b505060015460405163095ea7b360e01b81526001600160a01b03909116925063095ea7b3915062000de890849060001990600401620028ed565b602060405180830381600087803b15801562000e0357600080fd5b505af115801562000e18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e3e919062002526565b506040516347aa795760e11b81526001600160a01b03831690638f54f2ae9062000e7690869088906002908e908e9060040162002920565b600060405180830381600087803b15801562000e9157600080fd5b505af115801562000ea6573d6000803e3d6000fd5b50506040805161010081018252600a60c082019081526913995dc813585c9ad95d60b21b60e0830152815281516020818101845260008083528184019290925283518085018552600681526552414e444f4d60d01b8183015283850152606083018c9052608083018b90526001600160a01b03871660a0840152898252600881529290208151805192955090935062000f449284929101906200235d565b50602082810151805162000f5f92600185019201906200235d565b506040820151805162000f7d9160028401916020909101906200235d565b5060608201516003828101919091556080830151600483015560a090920151600590910180546001600160a01b0319166001600160a01b039092169190911790555462000fcc906001620020bf565b600355505050949350505050565b62000ff560008051602062005f538339815191523362001213565b620010145760405162461bcd60e51b8152600401620006029062002b4e565b6001600160a01b03909216600090815260056020908152604080832060028082018690556003808301889055600190920154855260069093529220908101929092550155565b60006003548410620010805760405162461bcd60e51b8152600401620006029062002b26565b600084815260086020526040908190206005015490516337def63f60e21b81526001600160a01b039091169063df7bd8fc90620010c4908690869060040162002c3e565b60206040518083038186803b158015620010dd57600080fd5b505afa158015620010f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011189190620025b1565b949350505050565b6200113b60008051602062005f538339815191523362001213565b6200115a5760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f538339815191528262000975565b6200119060008051602062005f538339815191523362001213565b620011af5760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f038339815191528262000975565b60008051602062005f5383398151915281565b60008051602062005f0383398151915281565b60008281526020819052604081206200120a908362002118565b90505b92915050565b60008281526020819052604081206200120a908362002126565b60006200124a60008051602062005f038339815191523362001213565b620012695760405162461bcd60e51b8152600401620006029062002a5f565b6001600160a01b03841660009081526005602052604090206003015415620012a55760405162461bcd60e51b8152600401620006029062002b7c565b60008381526006602052604090206003015415620012d75760405162461bcd60e51b8152600401620006029062002ac5565b6004546000908152600760205260409020805415620013d1578054421015620013145760405162461bcd60e51b8152600401620006029062002bad565b806001015442106200133a5760405162461bcd60e51b8152600401620006029062002c10565b8060020154831115620013615760405162461bcd60e51b8152600401620006029062002af3565b6003810154600582015462001378908590620020bf565b1115620013995760405162461bcd60e51b8152600401620006029062002bd9565b60048101546006820154620013b0908590620020bf565b1115620013d15760405162461bcd60e51b8152600401620006029062002a8e565b60006040518060800160405280876001600160a01b031681526020018681526020018581526020014281525090508060056000886001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030155905050806006600087815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030155905050620014ee848360050154620020bf90919063ffffffff16565b60058301556006820154620015049085620020bf565b60068301556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906200153d9089908890600401620028ed565b600060405180830381600087803b1580156200155857600080fd5b505af11580156200156d573d6000803e3d6000fd5b5050505084866001600160a01b03167fe49649ad7d04a14b0d2a43dae89f207c0822143ff6f88a6480e88907e4e5c5488642604051620015af92919062002c71565b60405180910390a350600195945050505050565b600081565b6000806000806000806003548710620015f55760405162461bcd60e51b8152600401620006029062002b26565b600087815260086020526040908190206005015481516323341a0560e01b815291516001600160a01b039091169182916323341a059160048082019260c092909190829003018186803b1580156200164c57600080fd5b505afa15801562001661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016879190620025d0565b949d939c50919a509850965090945092505050565b60086020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015620017375780601f106200170b5761010080835404028352916020019162001737565b820191906000526020600020905b8154815290600101906020018083116200171957829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620017d95780601f10620017ad57610100808354040283529160200191620017d9565b820191906000526020600020905b815481529060010190602001808311620017bb57829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156200186f5780601f1062001843576101008083540402835291602001916200186f565b820191906000526020600020905b8154815290600101906020018083116200185157829003601f168201915b5050505060038301546004840154600590940154929390929091506001600160a01b031686565b6001600160a01b0382166000908152600560205260408120600301541515806200120a5750506000908152600660205260409020600301541515919050565b60035481565b6007602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60045481565b60008181526020819052604081206200120d906200213d565b60006200195460008051602062005f038339815191523362001213565b620019735760405162461bcd60e51b8152600401620006029062002a5f565b6003548510620019975760405162461bcd60e51b8152600401620006029062002b26565b60015460405163bb35783b60e01b81526001600160a01b039091169063bb35783b90620019cd90339030908790600401620028c9565b600060405180830381600087803b158015620019e857600080fd5b505af1158015620019fd573d6000803e3d6000fd5b50506001546040516370a0823160e01b8152600093506001600160a01b0390911691506370a082319062001a36903090600401620028b5565b60206040518083038186803b15801562001a4f57600080fd5b505afa15801562001a64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a8a919062002657565b600087815260086020526040808220600501549051636571930360e11b815292935090916001600160a01b039091169063cae326069062001ad49089908990339060040162002c4f565b602060405180830381600087803b15801562001aef57600080fd5b505af115801562001b04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b2a9190620025b1565b6001546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319062001b62903090600401620028b5565b60206040518083038186803b15801562001b7b57600080fd5b505afa15801562001b90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bb6919062002657565b9050600062001bc684836200214a565b6001549091506001600160a01b031663a9059cbb3362001be789856200214a565b6040518363ffffffff1660e01b815260040162001c06929190620028ed565b602060405180830381600087803b15801562001c2157600080fd5b505af115801562001c36573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c5c919062002526565b509198975050505050505050565b60008281526020819052604090206002015462001c8b906200042362001fdf565b62000ae95760405162461bcd60e51b815260040180806020018281038252603081526020018062005f236030913960400191505060405180910390fd5b62001ce360008051602062005f538339815191523362001213565b62001d025760405162461bcd60e51b8152600401620006029062002b4e565b600455565b62001d2260008051602062005f538339815191523362001213565b62001d415760405162461bcd60e51b8152600401620006029062002b4e565b600454600090815260076020526040902080541562001d92576004810154600682015462001d71908490620020bf565b111562001d925760405162461bcd60e51b8152600401620006029062002a8e565b600681015462001da39083620020bf565b60068201556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f199062001ddc9086908690600401620028ed565b600060405180830381600087803b15801562001df757600080fd5b505af115801562001e0c573d6000803e3d6000fd5b50505050826001600160a01b03167f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb475834260405162001e4d92919062002c71565b60405180910390a2505050565b62001e7560008051602062005f538339815191523362001213565b62001e945760405162461bcd60e51b8152600401620006029062002b4e565b600354811062001eb85760405162461bcd60e51b8152600401620006029062002b26565b600081815260086020526040808220600501548151633ccfd60b60e01b815291516001600160a01b0390911692633ccfd60b926004808201939182900301818387803b1580156200065857600080fd5b62001f2360008051602062005f538339815191523362001213565b62001f425760405162461bcd60e51b8152600401620006029062002b4e565b6200095a60008051602062005f038339815191528262001c6a565b62001f7860008051602062005f538339815191523362001213565b62001f975760405162461bcd60e51b8152600401620006029062002b4e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b60006200120a836001600160a01b038416620021a8565b3390565b600082815260208190526040902062001ffd908262001fc8565b15620009df576200200d62001fdf565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020819052604090206200206b9082620021f7565b15620009df576200207b62001fdf565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000828201838110156200120a576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b60006200120a83836200220e565b60006200120a836001600160a01b03841662002275565b60006200120d826200228d565b600082821115620021a2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000620021b6838362002275565b620021ee575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200120d565b5060006200120d565b60006200120a836001600160a01b03841662002291565b81546000908210620022525760405162461bcd60e51b815260040180806020018281038252602281526020018062005eb26022913960400191505060405180910390fd5b8260000182815481106200226257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60008181526001830160205260408120548015620023525783546000198083019190810190600090879083908110620022c657fe5b9060005260206000200154905080876000018481548110620022e457fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806200231557fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506200120d565b60009150506200120d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620023955760008555620023e0565b82601f10620023b057805160ff1916838001178555620023e0565b82800160010185558215620023e0579182015b82811115620023e0578251825591602001919060010190620023c3565b50620023ee92915062002400565b5090565b6131ca8062002ce883390190565b5b80821115620023ee576000815560010162002401565b80356001600160a01b03811681146200097057600080fd5b600082601f83011262002440578081fd5b813567ffffffffffffffff808211156200245657fe5b604051601f8301601f1916810160200182811182821017156200247557fe5b6040528281528483016020018610156200248d578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215620024ba578081fd5b6200120a8262002417565b60008060408385031215620024d8578081fd5b620024e38362002417565b946020939093013593505050565b60008060006060848603121562002506578081fd5b620025118462002417565b95602085013595506040909401359392505050565b60006020828403121562002538578081fd5b815180151581146200120a578182fd5b6000602082840312156200255a578081fd5b5035919050565b6000806040838503121562002574578182fd5b82359150620025866020840162002417565b90509250929050565b60008060408385031215620025a2578182fd5b50508035926020909101359150565b600060208284031215620025c3578081fd5b81516200120a8162002cd7565b60008060008060008060c08789031215620025e9578182fd5b8651620025f68162002cd7565b6020880151909650620026098162002cd7565b60408801519095506200261c8162002cd7565b60608801519094506200262f8162002cd7565b608088015160a08901519194509250620026498162002cd7565b809150509295509295509295565b60006020828403121562002669578081fd5b5051919050565b60008060008060008060c0878903121562002689578182fd5b86359550602087013567ffffffffffffffff80821115620026a8578384fd5b620026b68a838b016200242f565b96506040890135915080821115620026cc578384fd5b620026da8a838b016200242f565b95506060890135915080821115620026f0578384fd5b50620026ff89828a016200242f565b9350506080870135915060a087013590509295509295509295565b6000806000606084860312156200272f578081fd5b833592506020840135915060408401356200274a8162002cd7565b809150509250925092565b600080600080608085870312156200276b578182fd5b84359350602085013592506040850135620027868162002cd7565b9396929550929360600135925050565b60008060008060808587031215620027ac578182fd5b5050823594602084013594506040840135936060013592509050565b60008060008060008060c08789031215620027e1578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600080600080600080600080610100898b0312156200282f578586fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b60008151808452815b818110156200288e5760208185018101518683018201520162002870565b81811115620028a05782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600f96870b815294860b602086015292850b604085015290840b6060840152608083015290910b60a082015260c00190565b600060c08252620029dd60c083018962002867565b8281036020840152620029f1818962002867565b9050828103604084015262002a07818862002867565b6060840196909652505060808101929092526001600160a01b031660a0909101529392505050565b602080825260169082015275125b9d985b1a590818dc99585d1959081b585c9ad95d60521b604082015260600190565b6020808252601590820152745265737472696374656420746f2063616c6c65727360581b604082015260600190565b6020808252601e908201527f536561736f6e206d617820746f6b656e206d696e747320726561636865640000604082015260600190565b602080825260149082015273155cd95c88185b1c9958591e4818db185a5b595960621b604082015260600190565b602080825260199082015278125b9d985b1a59081d5cd95c8818db185a5b48185b5bdd5b9d603a1b604082015260600190565b6020808252600e908201526d125b9d985b1a59081b585c9ad95d60921b604082015260600190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b6020808252601790820152761058d8dbdd5b9d08185b1c9958591e4818db185a5b5959604a1b604082015260600190565b60208082526012908201527114d9585cdbdb881b9bdd081cdd185c9d195960721b604082015260600190565b6020808252601f908201527f536561736f6e206d617820746f6b656e20636c61696d73207265616368656400604082015260600190565b60208082526014908201527314d9585cdbdb88185b1c9958591e48195b99195960621b604082015260600190565b918252600f0b602082015260400190565b928352600f9190910b60208301526001600160a01b0316604082015260600190565b918252602082015260400190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b80600f0b81146200095a57600080fdfe60806040523480156200001157600080fd5b50604051620031ca380380620031ca833981810160405260408110156200003757600080fd5b50805160209091015160006200004c620000c8565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600b80546001600160a01b039384166001600160a01b03199182161790915560048054929093169116179055620000cc565b3390565b6130ee80620000dc6000396000f3fe608060405234801561001057600080fd5b506004361061012d5760003560e01c80638f54f2ae116100b35780638f54f2ae14610313578063a85adeab14610351578063bc197c8114610359578063c50313311461049d578063cae32606146104a5578063df7bd8fc146104da578063e6b2c87c14610500578063e6fd48bc14610523578063f23a6e611461052b578063f2fde38b146105be578063f76da1d9146105e4578063fc0c546a1461060a5761012d565b806301ffc9a71461013257806313faede61461016d57806323341a051461018c57806333194471146101cf5780633ccfd60b146101f357806352c8b2f9146101fd578063715018a6146102565780638062dd931461025e5780638767d64e146102845780638d0a6cff1461029e5780638da5cb5b1461030b575b600080fd5b6101596004803603602081101561014857600080fd5b50356001600160e01b031916610612565b604080519115158252519081900360200190f35b61017561061a565b60408051600f9290920b8252519081900360200190f35b6101946106be565b60408051600f97880b815295870b602087015293860b8585015291850b6060850152608084015290920b60a082015290519081900360c00190f35b6101d7610781565b604080516001600160a01b039092168252519081900360200190f35b6101fb610790565b005b6102236004803603602081101561021357600080fd5b50356001600160a01b0316610aaa565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6101fb610adf565b6101756004803603604081101561027457600080fd5b5080359060200135600f0b610b8b565b61028c610d36565b60408051918252519081900360200190f35b6102bb600480360360208110156102b457600080fd5b5035610d3c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102f75781810151838201526020016102df565b505050509050019250505060405180910390f35b6101d7610e0c565b6101fb600480360360a081101561032957600080fd5b506001600160a01b038135169060208101359060408101359060608101359060800135610e1b565b61028c6111e9565b610480600480360360a081101561036f57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156103a257600080fd5b8201836020820111156103b457600080fd5b803590602001918460208302840111600160201b831117156103d557600080fd5b919390929091602081019035600160201b8111156103f257600080fd5b82018360208201111561040457600080fd5b803590602001918460208302840111600160201b8311171561042557600080fd5b919390929091602081019035600160201b81111561044257600080fd5b82018360208201111561045457600080fd5b803590602001918460018302840111600160201b8311171561047557600080fd5b5090925090506111ef565b604080516001600160e01b03199092168252519081900360200190f35b61028c611203565b610175600480360360608110156104bb57600080fd5b508035906020810135600f0b90604001356001600160a01b0316611209565b610175600480360360408110156104f057600080fd5b5080359060200135600f0b611a83565b6101fb6004803603604081101561051657600080fd5b5080359060200135611a9e565b61028c611b0b565b610480600480360360a081101561054157600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561058057600080fd5b82018360208201111561059257600080fd5b803590602001918460018302840111600160201b831117156105b357600080fd5b509092509050611b11565b6101fb600480360360208110156105d457600080fd5b50356001600160a01b0316611b23565b610175600480360360408110156105fa57600080fd5b5080359060200135600f0b611c25565b6101d7611cff565b60005b919050565b600b54600090600160a01b900460ff16151560011461063857600080fd5b6000805b60065481101561069f576106958261069061068b6007858154811061065d57fe5b6000918252602090912060028204015460085460019092166010026101000a9004600f90810b91900b611d0e565b611d61565b611db4565b915060010161063c565b506008546106b890600f0b6106b383611de7565b611e21565b91505090565b600080600080600080600160078054905010156106ec57506000945084935083925082915081905080610779565b60095460078054600160801b909204600f0b9160009061070857fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b600760018154811061073957fe5b60009182526020909120600282040154600954600a54600854959b5093995060019092166010026101000a9004600f90810b975090810b95509093500b90505b909192939495565b600b546001600160a01b031690565b600b54600160a01b900460ff1615156001146107ab57600080fd5b6107b3611e57565b6001600160a01b03166107c4610e0c565b6001600160a01b03161461080d576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600b546003546040805163dd34de6760e01b81526004810192909252516001600160a01b039092169163dd34de6791602480820192602092909190829003018186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d602081101561088657600080fd5b50516108d7576040805162461bcd60e51b815260206004820152601b60248201527a13585c9ad95d081b9959591cc81d1bc81899481c995cdbdb1d9959602a1b604482015290519081900360640190fd5b600060065467ffffffffffffffff811180156108f257600080fd5b5060405190808252806020026020018201604052801561091c578160200160208202803683370190505b50905060005b60065481101561095057806001901b82828151811061093d57fe5b6020908102919091010152600101610922565b50600b5460048054600354604051626dc0df60e21b81526001600160a01b039283169381018481526000602483018190526044830184905260806064840190815288516084850152885195909716966301b7037c969591949389939260a490910190602080860191028083838a5b838110156109d65781810151838201526020016109be565b5050505090500195505050505050600060405180830381600087803b1580156109fe57600080fd5b505af1158015610a12573d6000803e3d6000fd5b505060048054604080516370a0823160e01b8152309381019390935251610aa794503393506001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610a6857600080fd5b505afa158015610a7c573d6000803e3d6000fd5b505050506040513d6020811015610a9257600080fd5b50516004546001600160a01b03169190611e5b565b50565b600560208190526000918252604090912080546001820154600283015460038401546004850154949095015492949193909286565b610ae7611e57565b6001600160a01b0316610af8610e0c565b6001600160a01b031614610b41576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600080600060078054905067ffffffffffffffff81118015610bac57600080fd5b50604051908082528060200260200182016040528015610bd6578160200160208202803683370190505b50600954909150600160801b9004600f0b60005b600654811015610cc2576001811b871615610c6957610c3860078281548110610c0f57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b87611db4565b838281518110610c4457fe5b6020026020010190600f0b9081600f0b81525050610c628287611db4565b9150610cba565b60078181548110610c7657fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b838281518110610ca557fe5b6020026020010190600f0b9081600f0b815250505b600101610bea565b50600854600090610cde908390600160801b9004600f0b611e21565b905060005b600654811015610d1b57610d118561069061068b878581518110610d0357fe5b602002602001015186611d0e565b9450600101610ce3565b50610d29816106b386611de7565b9450505050505b92915050565b60065481565b6006546060906001901b600019018281186000610d5882611eb2565b60010167ffffffffffffffff81118015610d7157600080fd5b50604051908082528060200260200182016040528015610d9b578160200160208202803683370190505b5090506000600190508582600081518110610db257fe5b60200260200101818152505060005b600654811015610e01576001811b841615610df957806001901b838381518110610de757fe5b60209081029190910101526001909101905b600101610dc1565b509095945050505050565b6000546001600160a01b031690565b610e23611e57565b6001600160a01b0316610e34610e0c565b6001600160a01b031614610e7d576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600b54600160a01b900460ff1615610ed2576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b60008111610f21576040805162461bcd60e51b815260206004820152601760248201527610d85b9b9bdd081a185d99480c081bdd995c9c9bdd5b99604a1b604482015290519081900360640190fd5b600b546040805163365bb9d560e21b81526001600160a01b03888116600483015260248201889052604482018790529151919092169163d96ee75491606480830192600092919082900301818387803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b5050600b5460408051634296357160e11b81526001600160a01b038a81166004830152602482018a905260448201899052915191909216935063852c6ae292506064808301926020929190829003018186803b158015610ff057600080fd5b505afa158015611004573d6000803e3d6000fd5b505050506040513d602081101561101a57600080fd5b5051600355600454611037906001600160a01b0316333085611ecc565b6006839055600061104784611f2c565b600454909150600090611063906001600160a01b031685611f4a565b9050600061107384612710611fcd565b905061108b81611086856106b387611de7565b611d0e565b600860106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506110d36110c18385611e21565b600854600160801b9004600f0b611e21565b60088054600f9290920b6001600160801b03166001600160801b031990921691909117905560005b8681101561116b5760078054600180820183556000929092527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600282040180549183166010026101000a6001600160801b0381810219909316600f88900b9390931602919091179055016110fb565b50600b805460ff60a01b1916600160a01b1790556111898284611e21565b600960106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506111ba61061a565b60098054600f9290920b6001600160801b03166001600160801b03199092169190911790555050505050505050565b60025481565b63bc197c8160e01b98975050505050505050565b60035481565b6000611213610e0c565b6001600160a01b0316611224611e57565b6001600160a01b0316148061124857503061123d611e57565b6001600160a01b0316145b6112835760405162461bcd60e51b81526004018080602001828103825260288152602001806130676028913960400191505060405180910390fd5b600084116112ca576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b600b546003546040805163dd34de6760e01b81526004810192909252516001600160a01b039092169163dd34de6791602480820192602092909190829003018186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d602081101561134357600080fd5b505115611391576040805162461bcd60e51b815260206004820152601760248201527613585c9ad95d08185b1c9958591e481c995cdbdb1d9959604a1b604482015290519081900360640190fd5b60005b600654811015611476576001811b85161561146e576113e2600782815481106113b957fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b85611db4565b600782815481106113ef57fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611444600960109054906101000a9004600f0b85611db4565b600960106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055505b600101611394565b5060095460085461149b91600160801b90819004600f90810b9291909104900b611e21565b60088054600f9290920b6001600160801b03166001600160801b0319909216919091179055600a805460010190556000805b6006548110156114f8576114ee8261069061068b6007858154811061065d57fe5b91506001016114cd565b5060085460009061150f90600f0b6106b384611de7565b600954909150611523908290600f0b612004565b600980546001600160801b0319166001600160801b03600f85900b1617905560045490935060009061155e906001600160a01b031685612037565b60045490915060009061157a906001600160a01b031688612037565b600b54600480546003546040805163856296f760e01b815260009481018590526024810192909252604482018e90525194955091936001600160a01b03938416936339dd753093921691849163856296f791606480820192602092909190829003018186803b1580156115ec57600080fd5b505afa158015611600573d6000803e3d6000fd5b505050506040513d602081101561161657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152516044808301926020929190829003018186803b15801561166557600080fd5b505afa158015611679573d6000803e3d6000fd5b505050506040513d602081101561168f57600080fd5b505160048054604080516323b872dd60e01b8152339381019390935230602484015260448301879052519293506001600160a01b0316916323b872dd916064808201926020929091908290030181600087803b1580156116ee57600080fd5b505af1158015611702573d6000803e3d6000fd5b505050506040513d602081101561171857600080fd5b5051611767576040805162461bcd60e51b81526020600482015260196024820152784572726f72207472616e7366657272696e6720746f6b656e7360381b604482015290519081900360640190fd5b600b5460408051627eeac760e11b815230600482015260248101849052905184926001600160a01b03169162fdd58e916044808301926020929190829003018186803b1580156117b657600080fd5b505afa1580156117ca573d6000803e3d6000fd5b505050506040513d60208110156117e057600080fd5b5051101561195957600454600b546001600160a01b039182169163095ea7b3911661180b838c612037565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561185157600080fd5b505af1158015611865573d6000803e3d6000fd5b505050506040513d602081101561187b57600080fd5b5050600b546004546003546001600160a01b03928316926372ce42759216906000906118a68e610d3c565b876040518663ffffffff1660e01b815260040180866001600160a01b0316815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156119175781810151838201526020016118ff565b505050509050019650505050505050600060405180830381600087803b15801561194057600080fd5b505af1158015611954573d6000803e3d6000fd5b505050505b600b5460408051637921219560e11b81523060048201526001600160a01b038a81166024830152604482018590526064820186905260a06084830152600060a48301819052925193169263f242432a9260c48084019391929182900301818387803b1580156119c757600080fd5b505af11580156119db573d6000803e3d6000fd5b505050506001600160a01b038716600090815260056020526040902080546001908101909155891415611a2a576001600160a01b03871660009081526005602052604090206001018054830190555b8860021415611a55576001600160a01b03871660009081526005602052604090206002018054830190555b50506001600160a01b0390941660009081526005602052604090206003018054909401909355509392505050565b600954600090600f0b611a968484610b8b565b039392505050565b611aa6611e57565b6001600160a01b0316611ab7610e0c565b6001600160a01b031614611b00576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b600191909155600255565b60015481565b63f23a6e6160e01b9695505050505050565b611b2b611e57565b6001600160a01b0316611b3c610e0c565b6001600160a01b031614611b85576040805162461bcd60e51b81526020600482018190526024820152600080516020613047833981519152604482015290519081900360640190fd5b6001600160a01b038116611bca5760405162461bcd60e51b81526004018080602001828103825260268152602001806130216026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600b54600090600160a01b900460ff161515600114611c4357600080fd5b60015415611c9757600154421015611c97576040805162461bcd60e51b815260206004820152601260248201527113585c9ad95d081b9bdd081cdd185c9d195960721b604482015290519081900360640190fd5b60025415611ced57600254421115611ced576040805162461bcd60e51b815260206004820152601460248201527313585c9ad95d08185b1c9958591e48195b99195960621b604482015290519081900360640190fd5b611cf8838333611209565b9392505050565b6004546001600160a01b031681565b600081600f0b60001415611d2157600080fd5b600082600f0b604085600f0b901b81611d3657fe5b05905060016001607f1b03198112801590611d58575060016001607f1b038113155b611cf857600080fd5b6000600160461b82600f0b12611d7657600080fd5b6001600160461b031982600f0b1215611d9157506000610615565b610d30608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6120b2565b6000600f83810b9083900b0160016001607f1b03198112801590611d58575060016001607f1b03811315611cf857600080fd5b60008082600f0b13611df857600080fd5b6080611e0383612b20565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b6000600f83810b9083900b0260401d60016001607f1b03198112801590611d58575060016001607f1b03811315611cf857600080fd5b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611ead908490612bef565b505050565b60005b811561061557600019820190911690600101611eb5565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611f26908590612bef565b50505050565b6000677fffffffffffffff821115611f4357600080fd5b5060401b90565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f8657600080fd5b505afa158015611f9a573d6000803e3d6000fd5b505050506040513d6020811015611fb057600080fd5b505160ff169050611fc583600a83900a611fcd565b949350505050565b600081611fd957600080fd5b6000611fe58484612ca0565b905060016001607f1b036001600160801b0382161115611cf857600080fd5b6000600f82810b9084900b0360016001607f1b03198112801590611d58575060016001607f1b03811315611cf857600080fd5b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561207357600080fd5b505afa158015612087573d6000803e3d6000fd5b505050506040513d602081101561209d57600080fd5b505160ff169050611fc583600a83900a612de9565b6000600160461b82600f0b126120c757600080fd5b6001600160461b031982600f0b12156120e257506000610615565b6001607f1b60006001603f1b8416600f0b13156121105770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b6000836001603e1b16600f0b1315612139577001306fe0a31b7152de8d5a46305c85edec0260801c5b6000836001603d1b16600f0b1315612162577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b6000836001603c1b16600f0b131561218b5770010b5586cf9890f6298b92b71842a983630260801c5b6000836001603b1b16600f0b13156121b4577001059b0d31585743ae7c548eb68ca417fd0260801c5b6000836001603a1b16600f0b13156121dd57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b600083600160391b16600f0b13156122065770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b131561222f57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083600160371b16600f0b13156122585770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083600160361b16600f0b1315612281577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083600160351b16600f0b13156122aa57700100162f3904051fa128bca9c55c31e5df0260801c5b600083600160341b16600f0b13156122d3577001000b175effdc76ba38e31671ca9397250260801c5b600083600160331b16600f0b13156122fc57700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083600160321b16600f0b13156123255770010002c5cc37da9491d0985c348c68e7b30260801c5b600083600160311b16600f0b131561234e577001000162e525ee054754457d59952920260260801c5b600083600160301b16600f0b13156123775770010000b17255775c040618bf4a4ade83fc0260801c5b6000836001602f1b16600f0b13156123a0577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836001602e1b16600f0b13156123c957700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836001602d1b16600f0b13156123f25770010000162e43f4f831060e02d839a9d16d0260801c5b6000836001602c1b16600f0b131561241b57700100000b1721bcfc99d9f890ea069117630260801c5b6000836001602b1b16600f0b13156124445770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836001602a1b16600f0b131561246d577001000002c5c863b73f016468f6bac5ca2b0260801c5b600083600160291b16600f0b131561249657700100000162e430e5a18f6119e3c02282a50260801c5b600083600160281b16600f0b13156124bf577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b13156124e957700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156125135770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b131561253d577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156125675770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315612591577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b13156125bb57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156125e55770010000000162e42ff0999ce3541b9fffcf0260801c5b600083600160201b16600f0b131561260e57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156126375770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315612660577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561268957700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b13156126b2577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b13156126db57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156127045770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b131561272d577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156127565770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b131561277e577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b13156127a657700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156127ce5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156127f657700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b131561281e5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315612846577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561286e57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315612896577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b13156128bd57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156128e45770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b131561290b577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156129325770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315612959577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561298057700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156129a75770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b13156129ce57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156129f45770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315612a1a577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b1315612a4057700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315612a66577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b1315612a8c57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b1315612ab25770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315612ad8577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315612afe5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b03811115610d3057600080fd5b60008082600f0b13612b3157600080fd5b6000600f83900b600160401b8112612b4b576040918201911d5b600160201b8112612b5e576020918201911d5b620100008112612b70576010918201911d5b6101008112612b81576008918201911d5b60108112612b91576004918201911d5b60048112612ba1576002918201911d5b60028112612bb0576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b6000811315610e015790800260ff81901c8281029390930192607f011c9060011d612bc9565b6000612c44826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e519092919063ffffffff16565b805190915015611ead57808060200190516020811015612c6357600080fd5b5051611ead5760405162461bcd60e51b815260040180806020018281038252602a81526020018061308f602a913960400191505060405180910390fd5b600081612cac57600080fd5b60006001600160c01b038411612cd15782604085901b81612cc957fe5b049050612dd5565b60c084811c600160201b8110612ce9576020918201911c5b620100008110612cfb576010918201911c5b6101008110612d0c576008918201911c5b60108110612d1c576004918201911c5b60048110612d2c576002918201911c5b60028110612d3b576001820191505b60bf820360018603901c6001018260ff0387901b81612d5657fe5b0492506001600160801b03831115612d6d57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015612d99576001820391505b608084901b92900382811015612db0576001820391505b829003608084901c8214612dc057fe5b888181612dc957fe5b04870196505050505050505b6001600160801b03811115611cf857600080fd5b600081612df857506000610d30565b600083600f0b1215612e0957600080fd5b600f83900b6001600160801b038316810260401c90608084901c026001600160c01b03811115612e3857600080fd5b60401b8119811115612e4957600080fd5b019392505050565b6060611fc5848460008585612e6585612f76565b612eb6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310612ef45780518252601f199092019160209182019101612ed5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f56576040519150601f19603f3d011682016040523d82523d6000602084013e612f5b565b606091505b5091509150612f6b828286612f7c565b979650505050505050565b3b151590565b60608315612f8b575081611cf8565b825115612f9b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fe5578181015183820152602001612fcd565b50505050905090810190601f1680156130125780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572206f722073656c665361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220743b7331692cfd83b8e75fb25827790276b7667c435040d6c505e7c33055007164736f6c63430007060033456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212204be5e3a3f725ee4a29c70406f4bb36aeb813347cb4a8dc0d01258bd23d0d3d1964736f6c63430007060033",
  "devdoc": {
    "details": "Contract to manage Precog token claims and PredictionMarkets",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "title": "PrecogMasterV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 9701,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9703,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "conditionalTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9705,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "createdMarkets",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9707,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "currentSeason",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9711,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "accountTokenClaims",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(TokenClaim)9671_storage)"
      },
      {
        "astId": 9715,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "userTokenClaims",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenClaim)9671_storage)"
      },
      {
        "astId": 9719,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "miningSeasons",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(MiningSeason)9686_storage)"
      },
      {
        "astId": 9723,
        "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
        "label": "markets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(PredictionMarket)9699_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(TokenClaim)9671_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PrecogMasterV2.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)9671_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(MiningSeason)9686_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV2.MiningSeason)",
        "numberOfBytes": "32",
        "value": "t_struct(MiningSeason)9686_storage"
      },
      "t_mapping(t_uint256,t_struct(PredictionMarket)9699_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV2.PredictionMarket)",
        "numberOfBytes": "32",
        "value": "t_struct(PredictionMarket)9699_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenClaim)9671_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV2.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)9671_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3450_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3449,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3185_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MiningSeason)9686_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV2.MiningSeason",
        "members": [
          {
            "astId": 9673,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9675,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9677,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "maxUserClaim",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9679,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "maxTotalClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9681,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "maxTotalMint",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9683,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9685,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "mintedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(PredictionMarket)9699_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV2.PredictionMarket",
        "members": [
          {
            "astId": 9688,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9690,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 9692,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "category",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 9694,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9696,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9698,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "market",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3450_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3185_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3180,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3184,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenClaim)9671_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV2.TokenClaim",
        "members": [
          {
            "astId": 9664,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9666,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9668,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9670,
            "contract": "contracts/PrecogMasterV2.sol:PrecogMasterV2",
            "label": "claimedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}