{
  "address": "0x065d23d57C45459fA5e14DAB84F3501c38728F27",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outcomeSlotCount",
          "type": "uint256"
        }
      ],
      "name": "ConditionPreparation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outcomeSlotCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "payoutNumerators",
          "type": "uint256[]"
        }
      ],
      "name": "ConditionResolution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "indexSets",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "PayoutRedemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeholder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakeholder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionsMerge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getCollectionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "outcomeSlotCount",
          "type": "uint256"
        }
      ],
      "name": "getConditionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "getOutcomeSlotCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "collectionId",
          "type": "bytes32"
        }
      ],
      "name": "getPositionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "payoutDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "payoutNumerators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "outcomeSlotCount",
          "type": "uint256"
        }
      ],
      "name": "prepareCondition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "indexSets",
          "type": "uint256[]"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "payouts",
          "type": "uint256[]"
        }
      ],
      "name": "reportPayouts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "partition",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2b4e31a028a2dc42fd70d3fbdcc12e3f24bbc198f596c74d7c27e6475730d5e",
  "receipt": {
    "to": null,
    "from": "0x6FEe026Ae8a76258063C9c67eC78F75b7815D101",
    "contractAddress": "0x065d23d57C45459fA5e14DAB84F3501c38728F27",
    "transactionIndex": 5,
    "gasUsed": "3693934",
    "logsBloom": "0x
    "blockHash": "0x5b5b2bee23339105119b68ea73406b6fb31547b9a790a45b563c369e04f73524",
    "transactionHash": "0xa2b4e31a028a2dc42fd70d3fbdcc12e3f24bbc198f596c74d7c27e6475730d5e",
    "logs": [],
    "blockNumber": 9966172,
    "cumulativeGasUsed": "3930209",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "683a43f7dc693b30f76d2e090e9d827c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcomeSlotCount\",\"type\":\"uint256\"}],\"name\":\"ConditionPreparation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcomeSlotCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"name\":\"ConditionResolution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indexSets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"PayoutRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionsMerge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getCollectionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outcomeSlotCount\",\"type\":\"uint256\"}],\"name\":\"getConditionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"getOutcomeSlotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"}],\"name\":\"getPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payoutDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payoutNumerators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outcomeSlotCount\",\"type\":\"uint256\"}],\"name\":\"prepareCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"indexSets\",\"type\":\"uint256[]\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"}],\"name\":\"reportPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"partition\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ConditionPreparation(bytes32,address,bytes32,uint256)\":{\"details\":\"Emitted upon the successful preparation of a condition.\",\"params\":{\"conditionId\":\"The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.\",\"oracle\":\"The account assigned to report the result for the prepared condition.\",\"outcomeSlotCount\":\"The number of outcome slots which should be used for this condition. Must not exceed 256.\",\"questionId\":\"An identifier for the question to be answered by the oracle.\"}},\"PositionSplit(address,address,bytes32,bytes32,uint256[],uint256)\":{\"details\":\"Emitted when a position is successfully split.\"},\"PositionsMerge(address,address,bytes32,bytes32,uint256[],uint256)\":{\"details\":\"Emitted when positions are successfully merged.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getCollectionId(bytes32,bytes32,uint256)\":{\"details\":\"Constructs an outcome collection ID from a parent collection and an outcome collection.\",\"params\":{\"conditionId\":\"Condition ID of the outcome collection to combine with the parent outcome collection.\",\"indexSet\":\"Index set of the outcome collection to combine with the parent outcome collection.\",\"parentCollectionId\":\"Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\"}},\"getConditionId(address,bytes32,uint256)\":{\"details\":\"Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\",\"params\":{\"oracle\":\"The account assigned to report the result for the prepared condition.\",\"outcomeSlotCount\":\"The number of outcome slots which should be used for this condition. Must not exceed 256.\",\"questionId\":\"An identifier for the question to be answered by the oracle.\"}},\"getOutcomeSlotCount(bytes32)\":{\"details\":\"Gets the outcome slot count of a condition.\",\"params\":{\"conditionId\":\"ID of the condition.\"},\"returns\":{\"_0\":\"Number of outcome slots associated with a condition, or zero if condition has not been prepared yet.\"}},\"getPositionId(address,bytes32)\":{\"details\":\"Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\",\"params\":{\"collateralToken\":\"Collateral token which backs the position.\",\"collectionId\":\"ID of the outcome collection associated with this position.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"prepareCondition(address,bytes32,uint256)\":{\"details\":\"This function prepares a condition by initializing a payout vector associated with the condition.\",\"params\":{\"oracle\":\"The account assigned to report the result for the prepared condition.\",\"outcomeSlotCount\":\"The number of outcome slots which should be used for this condition. Must not exceed 256.\",\"questionId\":\"An identifier for the question to be answered by the oracle.\"}},\"reportPayouts(bytes32,uint256[])\":{\"details\":\"Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.\",\"params\":{\"payouts\":\"The oracle's answer\",\"questionId\":\"The question ID the oracle is answering for\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"splitPosition(address,bytes32,bytes32,uint256[],uint256)\":{\"details\":\"This function splits a position. If splitting from the collateral, this contract will attempt to transfer `amount` collateral from the message sender to itself. Otherwise, this contract will burn `amount` stake held by the message sender in the position being split worth of EIP 1155 tokens. Regardless, if successful, `amount` stake will be minted in the split target positions. If any of the transfers, mints, or burns fail, the transaction will revert. The transaction will also revert if the given partition is trivial, invalid, or refers to more slots than the condition is prepared with.\",\"params\":{\"amount\":\"The amount of collateral or stake to split.\",\"collateralToken\":\"The address of the positions' backing collateral token.\",\"conditionId\":\"The ID of the condition to split on.\",\"parentCollectionId\":\"The ID of the outcome collections common to the position being split and the split target positions. May be null, in which only the collateral is shared.\",\"partition\":\"An array of disjoint index sets representing a nontrivial partition of the outcome slots of the given condition. E.g. A|B and C but not A|B and B|C (is not disjoint). Each element's a number which, together with the condition, represents the outcome collection. E.g. 0b110 is A|B, 0b010 is B, etc.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"payoutDenominator(bytes32)\":{\"notice\":\"Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved.\"},\"payoutNumerators(bytes32,uint256)\":{\"notice\":\"Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConditionalTokens.sol\":\"ConditionalTokens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x3fef0eeb248c7109ce0f9adce59543d8b4141b78382d3ec34db33dabdbbc13f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd918cca1b659f588a6d12d05fd7196179a8b1eac9133d7f77da7ef3133e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x2690a9b7f4f7489b8d25a4fc6bffc02ec3971fb41ed6c8b59adef2833bdab07c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/CTHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary CTHelpers {\\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function getConditionId(address oracle, bytes32 questionId, uint outcomeSlotCount) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount));\\n    }\\n\\n    uint constant P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint constant B = 3;\\n\\n    function sqrt(uint x) private pure returns (uint y) {\\n        uint p = P;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            // add chain generated via https://crypto.stackexchange.com/q/27179/71252\\n            // and transformed to the following program:\\n\\n            // x=1; y=x+x; z=y+y; z=z+z; y=y+z; x=x+y; y=y+x; z=y+y; t=z+z; t=z+t; t=t+t;\\n            // t=t+t; z=z+t; x=x+z; z=x+x; z=z+z; y=y+z; z=y+y; z=z+z; z=z+z; z=y+z; x=x+z;\\n            // z=x+x; z=z+z; z=z+z; z=x+z; y=y+z; x=x+y; z=x+x; z=z+z; y=y+z; z=y+y; t=z+z;\\n            // t=t+t; t=t+t; z=z+t; x=x+z; y=y+x; z=y+y; z=z+z; z=z+z; x=x+z; z=x+x; z=z+z;\\n            // z=x+z; z=z+z; z=z+z; z=x+z; y=y+z; z=y+y; t=z+z; t=t+t; t=z+t; t=y+t; t=t+t;\\n            // t=t+t; t=t+t; t=t+t; z=z+t; x=x+z; z=x+x; z=x+z; y=y+z; z=y+y; z=y+z; z=z+z;\\n            // t=z+z; t=z+t; w=t+t; w=w+w; w=w+w; w=w+w; w=w+w; t=t+w; z=z+t; x=x+z; y=y+x;\\n            // z=y+y; x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; z=x+x; z=x+z; z=z+z; y=y+z; z=y+y;\\n            // z=z+z; x=x+z; y=y+x; z=y+y; z=y+z; x=x+z; y=y+x; x=x+y; y=y+x; z=y+y; z=z+z;\\n            // z=y+z; x=x+z; z=x+x; z=x+z; y=y+z; x=x+y; y=y+x; x=x+y; y=y+x; z=y+y; z=y+z;\\n            // z=z+z; x=x+z; y=y+x; z=y+y; z=y+z; z=z+z; x=x+z; z=x+x; t=z+z; t=t+t; t=z+t;\\n            // t=x+t; t=t+t; t=t+t; t=t+t; t=t+t; z=z+t; y=y+z; x=x+y; y=y+x; x=x+y; z=x+x;\\n            // z=x+z; z=z+z; z=z+z; z=z+z; z=x+z; y=y+z; z=y+y; z=y+z; z=z+z; x=x+z; z=x+x;\\n            // z=x+z; y=y+z; x=x+y; z=x+x; z=z+z; y=y+z; x=x+y; z=x+x; y=y+z; x=x+y; y=y+x;\\n            // z=y+y; z=y+z; x=x+z; y=y+x; z=y+y; z=y+z; z=z+z; z=z+z; x=x+z; z=x+x; z=z+z;\\n            // z=z+z; z=x+z; y=y+z; x=x+y; z=x+x; t=x+z; t=t+t; t=t+t; z=z+t; y=y+z; z=y+y;\\n            // x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; y=y+x; z=y+y; t=y+z; z=y+t; z=z+z; z=z+z;\\n            // z=t+z; x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; z=x+x; z=x+z; y=y+z; x=x+y; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\\n            // x=x+x; x=x+x; x=x+x; x=x+x; res=y+x\\n            // res == (P + 1) // 4\\n\\n            y := mulmod(x, x, p)\\n            {\\n                let z := mulmod(y, y, p)\\n                z := mulmod(z, z, p)\\n                y := mulmod(y, z, p)\\n                x := mulmod(x, y, p)\\n                y := mulmod(y, x, p)\\n                z := mulmod(y, y, p)\\n                {\\n                    let t := mulmod(z, z, p)\\n                    t := mulmod(z, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(z, t, p)\\n                    t := mulmod(y, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(z, t, p)\\n                    {\\n                        let w := mulmod(t, t, p)\\n                        w := mulmod(w, w, p)\\n                        w := mulmod(w, w, p)\\n                        w := mulmod(w, w, p)\\n                        w := mulmod(w, w, p)\\n                        t := mulmod(t, w, p)\\n                    }\\n                    z := mulmod(z, t, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    t := mulmod(z, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(z, t, p)\\n                    t := mulmod(x, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    z := mulmod(y, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    x := mulmod(x, z, p)\\n                    z := mulmod(x, x, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(x, z, p)\\n                    y := mulmod(y, z, p)\\n                    x := mulmod(x, y, p)\\n                    z := mulmod(x, x, p)\\n                    t := mulmod(x, z, p)\\n                    t := mulmod(t, t, p)\\n                    t := mulmod(t, t, p)\\n                    z := mulmod(z, t, p)\\n                    y := mulmod(y, z, p)\\n                    z := mulmod(y, y, p)\\n                    x := mulmod(x, z, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    x := mulmod(x, y, p)\\n                    y := mulmod(y, x, p)\\n                    z := mulmod(y, y, p)\\n                    t := mulmod(y, z, p)\\n                    z := mulmod(y, t, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(z, z, p)\\n                    z := mulmod(t, z, p)\\n                }\\n                x := mulmod(x, z, p)\\n                y := mulmod(y, x, p)\\n                x := mulmod(x, y, p)\\n                y := mulmod(y, x, p)\\n                x := mulmod(x, y, p)\\n                z := mulmod(x, x, p)\\n                z := mulmod(x, z, p)\\n                y := mulmod(y, z, p)\\n            }\\n            x := mulmod(x, y, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            x := mulmod(x, x, p)\\n            y := mulmod(y, x, p)\\n        }\\n    }\\n\\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    function getCollectionId(bytes32 parentCollectionId, bytes32 conditionId, uint indexSet) internal view returns (bytes32) {\\n        uint x1 = uint(keccak256(abi.encodePacked(conditionId, indexSet)));\\n        bool odd = x1 >> 255 != 0;\\n        uint y1;\\n        uint yy;\\n        do {\\n            x1 = addmod(x1, 1, P);\\n            yy = addmod(mulmod(x1, mulmod(x1, x1, P), P), B, P);\\n            y1 = sqrt(yy);\\n        } while(mulmod(y1, y1, P) != yy);\\n        if(odd && y1 % 2 == 0 || !odd && y1 % 2 == 1)\\n            y1 = P - y1;\\n\\n        uint x2 = uint(parentCollectionId);\\n        if(x2 != 0) {\\n            odd = x2 >> 254 != 0;\\n            x2 = (x2 << 2) >> 2;\\n            yy = addmod(mulmod(x2, mulmod(x2, x2, P), P), B, P);\\n            uint y2 = sqrt(yy);\\n            if(odd && y2 % 2 == 0 || !odd && y2 % 2 == 1)\\n                y2 = P - y2;\\n            require(mulmod(y2, y2, P) == yy, \\\"invalid parent collection ID\\\");\\n\\n            (bool success, bytes memory ret) = address(6).staticcall(abi.encode(x1, y1, x2, y2));\\n            require(success, \\\"ecadd failed\\\");\\n            (x1, y1) = abi.decode(ret, (uint, uint));\\n        }\\n\\n        if(y1 % 2 == 1)\\n            x1 ^= 1 << 254;\\n\\n        return bytes32(x1);\\n    }\\n\\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\\n    /// @param collateralToken Collateral token which backs the position.\\n    /// @param collectionId ID of the outcome collection associated with this position.\\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) internal pure returns (uint) {\\n        return uint(keccak256(abi.encodePacked(collateralToken, collectionId)));\\n    }\\n}\\n\",\"keccak256\":\"0xb3cb86bd3aa6c3d870930eb33bc647ebfc987a67865a99ab1f6dd1be0222ae4a\",\"license\":\"MIT\"},\"contracts/ConditionalTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC1155, SafeMath } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport { CTHelpers } from \\\"./CTHelpers.sol\\\";\\n\\n// Mainnet (ID: 1) canonical address: 0xC59b0e4De5F1248C1140964E0fF287B192407E0C\\n// Rinkeby (ID: 4) canonical address: 0x36bede640D19981A82090519bC1626249984c908\\n\\ncontract ConditionalTokens is ERC1155 {\\n    using SafeMath for uint256;\\n\\n    /// @dev Emitted upon the successful preparation of a condition.\\n    /// @param conditionId The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    event ConditionPreparation(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint outcomeSlotCount\\n    );\\n\\n    event ConditionResolution(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint outcomeSlotCount,\\n        uint[] payoutNumerators\\n    );\\n\\n    /// @dev Emitted when a position is successfully split.\\n    event PositionSplit(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint[] partition,\\n        uint amount\\n    );\\n    /// @dev Emitted when positions are successfully merged.\\n    event PositionsMerge(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint[] partition,\\n        uint amount\\n    );\\n    event PayoutRedemption(\\n        address indexed redeemer,\\n        IERC20 indexed collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] indexSets,\\n        uint payout\\n    );\\n\\n\\n    /// Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount.\\n    mapping(bytes32 => uint[]) public payoutNumerators;\\n    /// Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved.\\n    mapping(bytes32 => uint) public payoutDenominator;\\n\\n    constructor() ERC1155('') {}\\n\\n    /// @dev This function prepares a condition by initializing a payout vector associated with the condition.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function prepareCondition(address oracle, bytes32 questionId, uint outcomeSlotCount) external {\\n        // Limit of 256 because we use a partition array that is a number of 256 bits.\\n        require(outcomeSlotCount <= 256, \\\"too many outcome slots\\\");\\n        require(outcomeSlotCount > 1, \\\"there should be more than one outcome slot\\\");\\n        bytes32 conditionId = CTHelpers.getConditionId(oracle, questionId, outcomeSlotCount);\\n        require(payoutNumerators[conditionId].length == 0, \\\"condition already prepared\\\");\\n        payoutNumerators[conditionId] = new uint[](outcomeSlotCount);\\n        emit ConditionPreparation(conditionId, oracle, questionId, outcomeSlotCount);\\n    }\\n\\n    /// @dev Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.\\n    /// @param questionId The question ID the oracle is answering for\\n    /// @param payouts The oracle's answer\\n    function reportPayouts(bytes32 questionId, uint[] calldata payouts) external {\\n        uint outcomeSlotCount = payouts.length;\\n        require(outcomeSlotCount > 1, \\\"there should be more than one outcome slot\\\");\\n        // IMPORTANT, the oracle is enforced to be the sender because it's part of the hash.\\n        bytes32 conditionId = CTHelpers.getConditionId(msg.sender, questionId, outcomeSlotCount);\\n        require(payoutNumerators[conditionId].length == outcomeSlotCount, \\\"condition not prepared or found\\\");\\n        require(payoutDenominator[conditionId] == 0, \\\"payout denominator already set\\\");\\n\\n        uint den = 0;\\n        for (uint i = 0; i < outcomeSlotCount; i++) {\\n            uint num = payouts[i];\\n            den = den.add(num);\\n\\n            require(payoutNumerators[conditionId][i] == 0, \\\"payout numerator already set\\\");\\n            payoutNumerators[conditionId][i] = num;\\n        }\\n        require(den > 0, \\\"payout is all zeroes\\\");\\n        payoutDenominator[conditionId] = den;\\n        emit ConditionResolution(conditionId, msg.sender, questionId, outcomeSlotCount, payoutNumerators[conditionId]);\\n    }\\n\\n    /// @dev This function splits a position. If splitting from the collateral, this contract will attempt to transfer `amount` collateral from the message sender to itself. Otherwise, this contract will burn `amount` stake held by the message sender in the position being split worth of EIP 1155 tokens. Regardless, if successful, `amount` stake will be minted in the split target positions. If any of the transfers, mints, or burns fail, the transaction will revert. The transaction will also revert if the given partition is trivial, invalid, or refers to more slots than the condition is prepared with.\\n    /// @param collateralToken The address of the positions' backing collateral token.\\n    /// @param parentCollectionId The ID of the outcome collections common to the position being split and the split target positions. May be null, in which only the collateral is shared.\\n    /// @param conditionId The ID of the condition to split on.\\n    /// @param partition An array of disjoint index sets representing a nontrivial partition of the outcome slots of the given condition. E.g. A|B and C but not A|B and B|C (is not disjoint). Each element's a number which, together with the condition, represents the outcome collection. E.g. 0b110 is A|B, 0b010 is B, etc.\\n    /// @param amount The amount of collateral or stake to split.\\n    function splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external {\\n        require(partition.length > 1, \\\"got empty or singleton partition\\\");\\n        uint outcomeSlotCount = payoutNumerators[conditionId].length;\\n        require(outcomeSlotCount > 0, \\\"condition not prepared yet\\\");\\n\\n        // For a condition with 4 outcomes fullIndexSet's 0b1111; for 5 it's 0b11111...\\n        uint fullIndexSet = (1 << outcomeSlotCount) - 1;\\n        // freeIndexSet starts as the full collection\\n        uint freeIndexSet = fullIndexSet;\\n        // This loop checks that all condition sets are disjoint (the same outcome is not part of more than 1 set)\\n        uint[] memory positionIds = new uint[](partition.length);\\n        uint[] memory amounts = new uint[](partition.length);\\n        for (uint i = 0; i < partition.length; i++) {\\n            uint indexSet = partition[i];\\n            require(indexSet > 0 && indexSet < fullIndexSet, \\\"got invalid index set\\\");\\n            require((indexSet & freeIndexSet) == indexSet, \\\"partition not disjoint\\\");\\n            freeIndexSet ^= indexSet;\\n            positionIds[i] = CTHelpers.getPositionId(collateralToken, CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet));\\n            amounts[i] = amount;\\n        }\\n\\n        if (freeIndexSet == 0) {\\n            // Partitioning the full set of outcomes for the condition in this branch\\n            if (parentCollectionId == bytes32(0)) {\\n                require(collateralToken.transferFrom(msg.sender, address(this), amount), \\\"could not receive collateral tokens\\\");\\n            } else {\\n                _burn(\\n                    msg.sender,\\n                    CTHelpers.getPositionId(collateralToken, parentCollectionId),\\n                    amount\\n                );\\n            }\\n        } else {\\n            // Partitioning a subset of outcomes for the condition in this branch.\\n            // For example, for a condition with three outcomes A, B, and C, this branch\\n            // allows the splitting of a position $:(A|C) to positions $:(A) and $:(C).\\n            _burn(\\n                msg.sender,\\n                CTHelpers.getPositionId(collateralToken,\\n                    CTHelpers.getCollectionId(parentCollectionId, conditionId, fullIndexSet ^ freeIndexSet)),\\n                amount\\n            );\\n        }\\n\\n        _mintBatch(\\n            msg.sender,\\n            // position ID is the ERC 1155 token ID\\n            positionIds,\\n            amounts,\\n            \\\"\\\"\\n        );\\n        emit PositionSplit(msg.sender, collateralToken, parentCollectionId, conditionId, partition, amount);\\n    }\\n\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external {\\n        require(partition.length > 1, \\\"got empty or singleton partition\\\");\\n        uint outcomeSlotCount = payoutNumerators[conditionId].length;\\n        require(outcomeSlotCount > 0, \\\"condition not prepared yet\\\");\\n\\n        uint fullIndexSet = (1 << outcomeSlotCount) - 1;\\n        uint freeIndexSet = fullIndexSet;\\n        uint[] memory positionIds = new uint[](partition.length);\\n        uint[] memory amounts = new uint[](partition.length);\\n        for (uint i = 0; i < partition.length; i++) {\\n            uint indexSet = partition[i];\\n            require(indexSet > 0 && indexSet < fullIndexSet, \\\"got invalid index set\\\");\\n            require((indexSet & freeIndexSet) == indexSet, \\\"partition not disjoint\\\");\\n            freeIndexSet ^= indexSet;\\n            positionIds[i] = CTHelpers.getPositionId(collateralToken, CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet));\\n            amounts[i] = amount;\\n        }\\n        _burnBatch(\\n            msg.sender,\\n            positionIds,\\n            amounts\\n        );\\n\\n        if (freeIndexSet == 0) {\\n            if (parentCollectionId == bytes32(0)) {\\n                require(collateralToken.transfer(msg.sender, amount), \\\"could not send collateral tokens\\\");\\n            } else {\\n                _mint(\\n                    msg.sender,\\n                    CTHelpers.getPositionId(collateralToken, parentCollectionId),\\n                    amount,\\n                    \\\"\\\"\\n                );\\n            }\\n        } else {\\n            _mint(\\n                msg.sender,\\n                CTHelpers.getPositionId(collateralToken,\\n                    CTHelpers.getCollectionId(parentCollectionId, conditionId, fullIndexSet ^ freeIndexSet)),\\n                amount,\\n                \\\"\\\"\\n            );\\n        }\\n\\n        emit PositionsMerge(msg.sender, collateralToken, parentCollectionId, conditionId, partition, amount);\\n    }\\n\\n    function redeemPositions(IERC20 collateralToken, bytes32 parentCollectionId, bytes32 conditionId, uint[] calldata indexSets) external {\\n        uint den = payoutDenominator[conditionId];\\n        require(den > 0, \\\"result for condition not received yet\\\");\\n        uint outcomeSlotCount = payoutNumerators[conditionId].length;\\n        require(outcomeSlotCount > 0, \\\"condition not prepared yet\\\");\\n\\n        uint totalPayout = 0;\\n\\n        uint fullIndexSet = (1 << outcomeSlotCount) - 1;\\n        for (uint i = 0; i < indexSets.length; i++) {\\n            uint indexSet = indexSets[i];\\n            require(indexSet > 0 && indexSet < fullIndexSet, \\\"got invalid index set\\\");\\n            uint positionId = CTHelpers.getPositionId(collateralToken,\\n                CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet));\\n\\n            uint payoutNumerator = 0;\\n            for (uint j = 0; j < outcomeSlotCount; j++) {\\n                if (indexSet & (1 << j) != 0) {\\n                    payoutNumerator = payoutNumerator.add(payoutNumerators[conditionId][j]);\\n                }\\n            }\\n\\n            uint payoutStake = balanceOf(msg.sender, positionId);\\n            if (payoutStake > 0) {\\n                totalPayout = totalPayout.add(payoutStake.mul(payoutNumerator).div(den));\\n                _burn(msg.sender, positionId, payoutStake);\\n            }\\n        }\\n\\n        if (totalPayout > 0) {\\n            if (parentCollectionId == bytes32(0)) {\\n                require(collateralToken.transfer(msg.sender, totalPayout), \\\"could not transfer payout to message sender\\\");\\n            } else {\\n                _mint(msg.sender, CTHelpers.getPositionId(collateralToken, parentCollectionId), totalPayout, \\\"\\\");\\n            }\\n        }\\n        emit PayoutRedemption(msg.sender, collateralToken, parentCollectionId, conditionId, indexSets, totalPayout);\\n    }\\n\\n    /// @dev Gets the outcome slot count of a condition.\\n    /// @param conditionId ID of the condition.\\n    /// @return Number of outcome slots associated with a condition, or zero if condition has not been prepared yet.\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint) {\\n        return payoutNumerators[conditionId].length;\\n    }\\n\\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function getConditionId(address oracle, bytes32 questionId, uint outcomeSlotCount) external pure returns (bytes32) {\\n        return CTHelpers.getConditionId(oracle, questionId, outcomeSlotCount);\\n    }\\n\\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    function getCollectionId(bytes32 parentCollectionId, bytes32 conditionId, uint indexSet) external view returns (bytes32) {\\n        return CTHelpers.getCollectionId(parentCollectionId, conditionId, indexSet);\\n    }\\n\\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\\n    /// @param collateralToken Collateral token which backs the position.\\n    /// @param collectionId ID of the outcome collection associated with this position.\\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) external pure returns (uint) {\\n        return CTHelpers.getPositionId(collateralToken, collectionId);\\n    }\\n}\\n\",\"keccak256\":\"0xb52c9740dc184a506a1b95d019b751beed013ee12badb1aafacd0a688ff84510\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080516020810190915260008152620000336301ffc9a760e01b62000069565b6200003e81620000ee565b62000050636cdb3d1360e11b62000069565b620000626303a24d0760e21b62000069565b50620001b3565b6001600160e01b03198082161415620000c9576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b80516200010390600390602084019062000107565b5050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200013f57600085556200018a565b82601f106200015a57805160ff19168380011785556200018a565b828001600101855582156200018a579182015b828111156200018a5782518255916020019190600101906200016d565b50620001989291506200019c565b5090565b5b808211156200019857600081556001016200019d565b61408380620001c36000396000f3fe608060405234801561001057600080fd5b50600436106101505760003560e01c8063852c6ae2116100cd578063d42dc0c211610081578063dd34de6711610066578063dd34de67146108e2578063e985e9c5146108ff578063f242432a1461092d57610150565b8063d42dc0c214610893578063d96ee754146108b057610150565b80639e7212ad116100b25780639e7212ad14610762578063a22cb465146107ee578063c49298ac1461081c57610150565b8063852c6ae214610707578063856296f71461073957610150565b80630e89341c1161012457806339dd75301161010957806339dd7530146104d85780634e1273f41461050457806372ce42751461067b57610150565b80630e89341c1461027f5780632eb2c2d61461031157610150565b8062fdd58e1461015557806301b7037c1461019357806301ffc9a7146102215780630504c8141461025c575b600080fd5b6101816004803603604081101561016b57600080fd5b506001600160a01b0381351690602001356109f8565b60408051918252519081900360200190f35b61021f600480360360808110156101a957600080fd5b6001600160a01b0382351691602081013591604082013591908101906080810160608201356401000000008111156101e057600080fd5b8201836020820111156101f257600080fd5b8035906020019184602083028401116401000000008311171561021457600080fd5b509092509050610a6a565b005b6102486004803603602081101561023757600080fd5b50356001600160e01b031916610de2565b604080519115158252519081900360200190f35b6101816004803603604081101561027257600080fd5b5080359060200135610e01565b61029c6004803603602081101561029557600080fd5b5035610e32565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102d65781810151838201526020016102be565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61021f600480360360a081101561032757600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561035b57600080fd5b82018360208201111561036d57600080fd5b8035906020019184602083028401116401000000008311171561038f57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156103df57600080fd5b8201836020820111156103f157600080fd5b8035906020019184602083028401116401000000008311171561041357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561046357600080fd5b82018360208201111561047557600080fd5b8035906020019184600183028401116401000000008311171561049757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610eca945050505050565b610181600480360360408110156104ee57600080fd5b506001600160a01b0381351690602001356111c8565b61062b6004803603604081101561051a57600080fd5b81019060208101813564010000000081111561053557600080fd5b82018360208201111561054757600080fd5b8035906020019184602083028401116401000000008311171561056957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156105b957600080fd5b8201836020820111156105cb57600080fd5b803590602001918460208302840111640100000000831117156105ed57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506111db945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561066757818101518382015260200161064f565b505050509050019250505060405180910390f35b61021f600480360360a081101561069157600080fd5b6001600160a01b0382351691602081013591604082013591908101906080810160608201356401000000008111156106c857600080fd5b8201836020820111156106da57600080fd5b803590602001918460208302840111640100000000831117156106fc57600080fd5b9193509150356112c7565b6101816004803603606081101561071d57600080fd5b506001600160a01b0381351690602081013590604001356116f9565b6101816004803603606081101561074f57600080fd5b508035906020810135906040013561170e565b61021f600480360360a081101561077857600080fd5b6001600160a01b0382351691602081013591604082013591908101906080810160608201356401000000008111156107af57600080fd5b8201836020820111156107c157600080fd5b803590602001918460208302840111640100000000831117156107e357600080fd5b91935091503561171b565b61021f6004803603604081101561080457600080fd5b506001600160a01b0381351690602001351515611b44565b61021f6004803603604081101561083257600080fd5b8135919081019060408101602082013564010000000081111561085457600080fd5b82018360208201111561086657600080fd5b8035906020019184602083028401116401000000008311171561088857600080fd5b509092509050611c33565b610181600480360360208110156108a957600080fd5b5035611f26565b61021f600480360360608110156108c657600080fd5b506001600160a01b038135169060208101359060400135611f38565b610181600480360360208110156108f857600080fd5b50356120ee565b6102486004803603604081101561091557600080fd5b506001600160a01b0381358116916020013516612100565b61021f600480360360a081101561094357600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561098357600080fd5b82018360208201111561099557600080fd5b803590602001918460018302840111640100000000831117156109b757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061212e945050505050565b60006001600160a01b038316610a3f5760405162461bcd60e51b815260040180806020018281038252602b815260200180613dfe602b913960400191505060405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60008381526005602052604090205480610ab55760405162461bcd60e51b8152600401808060200182810382526025815260200180613dd96025913960400191505060405180910390fd5b60008481526004602052604090205480610b16576040805162461bcd60e51b815260206004820152601a60248201527f636f6e646974696f6e206e6f7420707265706172656420796574000000000000604482015290519081900360640190fd5b60006000196001831b01815b85811015610c64576000878783818110610b3857fe5b905060200201359050600081118015610b5057508281105b610ba1576040805162461bcd60e51b815260206004820152601560248201527f676f7420696e76616c696420696e646578207365740000000000000000000000604482015290519081900360640190fd5b6000610bb78c610bb28d8d866122f9565b61270f565b90506000805b87811015610c14576001811b841615610c0c5760008c81526004602052604090208054610c09919083908110610bef57fe5b90600052602060002001548361275390919063ffffffff16565b91505b600101610bbd565b506000610c2133846109f8565b90508015610c5457610c47610c408a610c3a84866127ad565b90612806565b8890612753565b9650610c5433848361286d565b505060019092019150610b229050565b508115610d4f5787610d2b576040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b038b169163a9059cbb9160448083019260209291908290030181600087803b158015610cbf57600080fd5b505af1158015610cd3573d6000803e3d6000fd5b505050506040513d6020811015610ce957600080fd5b5051610d265760405162461bcd60e51b815260040180806020018281038252602b815260200180613e29602b913960400191505060405180910390fd5b610d4f565b610d4f33610d398b8b61270f565b84604051806020016040528060008152506129a0565b87896001600160a01b0316336001600160a01b03167f2682012a4a4f1973119f1c9b90745d1bd91fa2bab387344f044cb3586864d18d8a8a8a8860405180858152602001806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a4505050505050505050565b6001600160e01b03191660009081526020819052604090205460ff1690565b60046020528160005260406000208181548110610e1d57600080fd5b90600052602060002001600091509150505481565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610ebe5780601f10610e9357610100808354040283529160200191610ebe565b820191906000526020600020905b815481529060010190602001808311610ea157829003601f168201915b50505050509050919050565b8151835114610f0a5760405162461bcd60e51b81526004018080602001828103825260288152602001806140056028913960400191505060405180910390fd5b6001600160a01b038416610f4f5760405162461bcd60e51b8152600401808060200182810382526025815260200180613ea16025913960400191505060405180910390fd5b610f57612aa8565b6001600160a01b0316856001600160a01b03161480610f825750610f8285610f7d612aa8565b612100565b610fbd5760405162461bcd60e51b8152600401808060200182810382526032815260200180613ec66032913960400191505060405180910390fd5b6000610fc7612aa8565b9050610fd78187878787876111c0565b60005b84518110156110d8576000858281518110610ff157fe5b60200260200101519050600085838151811061100957fe5b60200260200101519050611076816040518060600160405280602a8152602001613f3e602a91396001600086815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002054612aad9092919063ffffffff16565b60008381526001602090815260408083206001600160a01b038e811685529252808320939093558a16815220546110ad9082612753565b60009283526001602081815260408086206001600160a01b038d168752909152909320555001610fda565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561115e578181015183820152602001611146565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561119d578181015183820152602001611185565b5050505090500194505050505060405180910390a46111c0818787878787612b44565b505050505050565b60006111d4838361270f565b9392505050565b6060815183511461121d5760405162461bcd60e51b8152600401808060200182810382526029815260200180613fdc6029913960400191505060405180910390fd5b6000835167ffffffffffffffff8111801561123757600080fd5b50604051908082528060200260200182016040528015611261578160200160208202803683370190505b50905060005b84518110156112bf576112a085828151811061127f57fe5b602002602001015185838151811061129357fe5b60200260200101516109f8565b8282815181106112ac57fe5b6020908102919091010152600101611267565b509392505050565b6001821161131c576040805162461bcd60e51b815260206004820181905260248201527f676f7420656d707479206f722073696e676c65746f6e20706172746974696f6e604482015290519081900360640190fd5b6000848152600460205260409020548061137d576040805162461bcd60e51b815260206004820152601a60248201527f636f6e646974696f6e206e6f7420707265706172656420796574000000000000604482015290519081900360640190fd5b6000196001821b018060008567ffffffffffffffff8111801561139f57600080fd5b506040519080825280602002602001820160405280156113c9578160200160208202803683370190505b50905060008667ffffffffffffffff811180156113e557600080fd5b5060405190808252806020026020018201604052801561140f578160200160208202803683370190505b50905060005b8781101561153657600089898381811061142b57fe5b90506020020135905060008111801561144357508581105b611494576040805162461bcd60e51b815260206004820152601560248201527f676f7420696e76616c696420696e646578207365740000000000000000000000604482015290519081900360640190fd5b80858216146114ea576040805162461bcd60e51b815260206004820152601660248201527f706172746974696f6e206e6f74206469736a6f696e7400000000000000000000604482015290519081900360640190fd5b938418936114fd8d610bb28e8e856122f9565b84838151811061150957fe5b6020026020010181815250508783838151811061152257fe5b602090810291909101015250600101611415565b5082611634578961161b57604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810188905290516001600160a01b038d16916323b872dd9160648083019260209291908290030181600087803b1580156115af57600080fd5b505af11580156115c3573d6000803e3d6000fd5b505050506040513d60208110156115d957600080fd5b50516116165760405162461bcd60e51b8152600401808060200182810382526023815260200180613ef86023913960400191505060405180910390fd5b61162f565b61162f336116298d8d61270f565b8861286d565b611649565b611649336116298d610bb28e8e898b186122f9565b61166433838360405180602001604052806000815250612ddc565b888a336001600160a01b03167f2e6bb91f8cbcda0c93623c54d0403a43514fabc40084ec96b6d5379a747862988e8c8c8c60405180856001600160a01b03168152602001806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a45050505050505050505050565b600061170684848461302a565b949350505050565b60006117068484846122f9565b60018211611770576040805162461bcd60e51b815260206004820181905260248201527f676f7420656d707479206f722073696e676c65746f6e20706172746974696f6e604482015290519081900360640190fd5b600084815260046020526040902054806117d1576040805162461bcd60e51b815260206004820152601a60248201527f636f6e646974696f6e206e6f7420707265706172656420796574000000000000604482015290519081900360640190fd5b6000196001821b018060008567ffffffffffffffff811180156117f357600080fd5b5060405190808252806020026020018201604052801561181d578160200160208202803683370190505b50905060008667ffffffffffffffff8111801561183957600080fd5b50604051908082528060200260200182016040528015611863578160200160208202803683370190505b50905060005b8781101561198a57600089898381811061187f57fe5b90506020020135905060008111801561189757508581105b6118e8576040805162461bcd60e51b815260206004820152601560248201527f676f7420696e76616c696420696e646578207365740000000000000000000000604482015290519081900360640190fd5b808582161461193e576040805162461bcd60e51b815260206004820152601660248201527f706172746974696f6e206e6f74206469736a6f696e7400000000000000000000604482015290519081900360640190fd5b938418936119518d610bb28e8e856122f9565b84838151811061195d57fe5b6020026020010181815250508783838151811061197657fe5b602090810291909101015250600101611869565b50611996338383613077565b82611a9a5789611a71576040805163a9059cbb60e01b81523360048201526024810188905290516001600160a01b038d169163a9059cbb9160448083019260209291908290030181600087803b1580156119ef57600080fd5b505af1158015611a03573d6000803e3d6000fd5b505050506040513d6020811015611a1957600080fd5b5051611a6c576040805162461bcd60e51b815260206004820181905260248201527f636f756c64206e6f742073656e6420636f6c6c61746572616c20746f6b656e73604482015290519081900360640190fd5b611a95565b611a9533611a7f8d8d61270f565b88604051806020016040528060008152506129a0565b611aaf565b611aaf33611a7f8d610bb28e8e898b186122f9565b888a336001600160a01b03167f6f13ca62553fcc2bcd2372180a43949c1e4cebba603901ede2f4e14f36b282ca8e8c8c8c60405180856001600160a01b03168152602001806020018381526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f191690920182900397509095505050505050a45050505050505050505050565b816001600160a01b0316611b56612aa8565b6001600160a01b03161415611b9c5760405162461bcd60e51b8152600401808060200182810382526029815260200180613fb36029913960400191505060405180910390fd5b8060026000611ba9612aa8565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611bed612aa8565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b8060018111611c735760405162461bcd60e51b815260040180806020018281038252602a815260200180613f89602a913960400191505060405180910390fd5b6000611c8033868461302a565b6000818152600460205260409020549091508214611ce5576040805162461bcd60e51b815260206004820152601f60248201527f636f6e646974696f6e206e6f74207072657061726564206f7220666f756e6400604482015290519081900360640190fd5b60008181526005602052604090205415611d46576040805162461bcd60e51b815260206004820152601e60248201527f7061796f75742064656e6f6d696e61746f7220616c7265616479207365740000604482015290519081900360640190fd5b6000805b83811015611e2b576000868683818110611d6057fe5b905060200201359050611d7c818461275390919063ffffffff16565b600085815260046020526040902080549194509083908110611d9a57fe5b9060005260206000200154600014611df9576040805162461bcd60e51b815260206004820152601c60248201527f7061796f7574206e756d657261746f7220616c72656164792073657400000000604482015290519081900360640190fd5b6000848152600460205260409020805482919084908110611e1657fe5b60009182526020909120015550600101611d4a565b5060008111611e81576040805162461bcd60e51b815260206004820152601460248201527f7061796f757420697320616c6c207a65726f6573000000000000000000000000604482015290519081900360640190fd5b60008281526005602090815260408083208490556004825291829020825186815291820183815281549383018490528993339387937fb44d84d3289691f71497564b85d4233648d9dbae8cbdbb4329f301c3a0185894938a93919291606083019084908015611f0f57602002820191906000526020600020905b815481526020019060010190808311611efb575b5050935050505060405180910390a4505050505050565b60009081526004602052604090205490565b610100811115611f8f576040805162461bcd60e51b815260206004820152601660248201527f746f6f206d616e79206f7574636f6d6520736c6f747300000000000000000000604482015290519081900360640190fd5b60018111611fce5760405162461bcd60e51b815260040180806020018281038252602a815260200180613f89602a913960400191505060405180910390fd5b6000611fdb84848461302a565b6000818152600460205260409020549091501561203f576040805162461bcd60e51b815260206004820152601a60248201527f636f6e646974696f6e20616c7265616479207072657061726564000000000000604482015290519081900360640190fd5b8167ffffffffffffffff8111801561205657600080fd5b50604051908082528060200260200182016040528015612080578160200160208202803683370190505b50600082815260046020908152604090912082516120a49391929190910190613c71565b5082846001600160a01b0316827fab3760c3bd2bb38b5bcf54dc79802ed67338b4cf29f3054ded67ed24661e4177856040518082815260200191505060405180910390a450505050565b60056020526000908152604090205481565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b0384166121735760405162461bcd60e51b8152600401808060200182810382526025815260200180613ea16025913960400191505060405180910390fd5b61217b612aa8565b6001600160a01b0316856001600160a01b031614806121a157506121a185610f7d612aa8565b6121dc5760405162461bcd60e51b8152600401808060200182810382526029815260200180613e786029913960400191505060405180910390fd5b60006121e6612aa8565b90506122068187876121f7886132e5565b612200886132e5565b876111c0565b61224d836040518060600160405280602a8152602001613f3e602a913960008781526001602090815260408083206001600160a01b038d1684529091529020549190612aad565b60008581526001602090815260408083206001600160a01b038b811685529252808320939093558716815220546122849084612753565b60008581526001602090815260408083206001600160a01b03808b168086529184529382902094909455805188815291820187905280518a8416938616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a46111c081878787878761332a565b6040805160208082018590528183018490528251808303840181526060909201909252805191012060009060ff81901c151582805b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476001850893507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478087880987090890506123ab816134b4565b9150807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838409141561232e578280156123e6575060028206155b806123fd5750821580156123fd5750600282066001145b1561242857817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470391505b8780156126d05760fe81901c151593507f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780848509840908915060006124b2836134b4565b90508480156124c2575060028106155b806124d95750841580156124d95750600281066001145b15612501577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47035b827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782830914612578576040805162461bcd60e51b815260206004820152601c60248201527f696e76616c696420706172656e7420636f6c6c656374696f6e20494400000000604482015290519081900360640190fd5b60008060066001600160a01b031688878686604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040526040518082805190602001908083835b602083106125ed5780518252601f1990920191602091820191016125ce565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461264d576040519150601f19603f3d011682016040523d82523d6000602084013e612652565b606091505b5091509150816126a9576040805162461bcd60e51b815260206004820152600c60248201527f6563616464206661696c65640000000000000000000000000000000000000000604482015290519081900360640190fd5b8080602001905160408110156126be57600080fd5b50805160209091015190985095505050505b6002830660011415612702577f4000000000000000000000000000000000000000000000000000000000000000851894505b5092979650505050505050565b6040805160609390931b6bffffffffffffffffffffffff19166020808501919091526034808501939093528151808503909301835260549093019052805191012090565b6000828201838110156111d4576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826127bc57506000610a64565b828202828482816127c957fe5b04146111d45760405162461bcd60e51b8152600401808060200182810382526021815260200180613f686021913960400191505060405180910390fd5b600080821161285c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161286557fe5b049392505050565b6001600160a01b0383166128b25760405162461bcd60e51b8152600401808060200182810382526023815260200180613f1b6023913960400191505060405180910390fd5b60006128bc612aa8565b90506128ec818560006128ce876132e5565b6128d7876132e5565b604051806020016040528060008152506111c0565b61293382604051806060016040528060248152602001613e546024913960008681526001602090815260408083206001600160a01b038b1684529091529020549190612aad565b60008481526001602090815260408083206001600160a01b03808a16808652918452828520959095558151888152928301879052815193949093908616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a450505050565b6001600160a01b0384166129e55760405162461bcd60e51b815260040180806020018281038252602181526020018061402d6021913960400191505060405180910390fd5b60006129ef612aa8565b9050612a01816000876121f7886132e5565b60008481526001602090815260408083206001600160a01b0389168452909152902054612a2e9084612753565b60008581526001602090815260408083206001600160a01b03808b16808652918452828520959095558151898152928301889052815190948616927fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6292908290030190a4612aa18160008787878761332a565b5050505050565b335b90565b60008184841115612b3c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b01578181015183820152602001612ae9565b50505050905090810190601f168015612b2e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b612b56846001600160a01b0316613c6b565b156111c057836001600160a01b031663bc197c8187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015612be4578181015183820152602001612bcc565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015612c23578181015183820152602001612c0b565b50505050905001848103825285818151815260200191508051906020019080838360005b83811015612c5f578181015183820152602001612c47565b50505050905090810190601f168015612c8c5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015612cb157600080fd5b505af1925050508015612cd657506040513d6020811015612cd157600080fd5b505160015b612d6b57612ce2613cd7565b80612ced5750612d34565b60405162461bcd60e51b8152602060048201818152835160248401528351849391928392604401919085019080838360008315612b01578181015183820152602001612ae9565b60405162461bcd60e51b8152600401808060200182810382526034815260200180613d7d6034913960400191505060405180910390fd5b6001600160e01b031981167fbc197c810000000000000000000000000000000000000000000000000000000014612dd35760405162461bcd60e51b8152600401808060200182810382526028815260200180613db16028913960400191505060405180910390fd5b50505050505050565b6001600160a01b038416612e215760405162461bcd60e51b815260040180806020018281038252602181526020018061402d6021913960400191505060405180910390fd5b8151835114612e615760405162461bcd60e51b81526004018080602001828103825260288152602001806140056028913960400191505060405180910390fd5b6000612e6b612aa8565b9050612e7c816000878787876111c0565b60005b8451811015612f4057612ef760016000878481518110612e9b57fe5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002054858381518110612ee157fe5b602002602001015161275390919063ffffffff16565b60016000878481518110612f0757fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038b168252909252902055600101612e7f565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612fc7578181015183820152602001612faf565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015613006578181015183820152602001612fee565b5050505090500194505050505060405180910390a4612aa181600087878787612b44565b6040805160609490941b6bffffffffffffffffffffffff19166020808601919091526034850193909352605480850192909252805180850390920182526074909301909252815191012090565b6001600160a01b0383166130bc5760405162461bcd60e51b8152600401808060200182810382526023815260200180613f1b6023913960400191505060405180910390fd5b80518251146130fc5760405162461bcd60e51b81526004018080602001828103825260288152602001806140056028913960400191505060405180910390fd5b6000613106612aa8565b9050613126818560008686604051806020016040528060008152506111c0565b60005b8351811015613204576131bb83828151811061314157fe5b6020026020010151604051806060016040528060248152602001613e54602491396001600088868151811061317257fe5b602002602001015181526020019081526020016000206000896001600160a01b03166001600160a01b0316815260200190815260200160002054612aad9092919063ffffffff16565b600160008684815181106131cb57fe5b602090810291909101810151825281810192909252604090810160009081206001600160a01b038a168252909252902055600101613129565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561328b578181015183820152602001613273565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156132ca5781810151838201526020016132b2565b5050505090500194505050505060405180910390a450505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061331957fe5b602090810291909101015292915050565b61333c846001600160a01b0316613c6b565b156111c057836001600160a01b031663f23a6e6187878686866040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156133cb5781810151838201526020016133b3565b50505050905090810190601f1680156133f85780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561341b57600080fd5b505af192505050801561344057506040513d602081101561343b57600080fd5b505160015b61344c57612ce2613cd7565b6001600160e01b031981167ff23a6e610000000000000000000000000000000000000000000000000000000014612dd35760405162461bcd60e51b8152600401808060200182810382526028815260200180613db16028913960400191505060405180910390fd5b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfdb3b151590565b828054828255906000526020600020908101928215613cac579160200282015b82811115613cac578251825591602001919060010190613c91565b50613cb8929150613cbc565b5090565b5b80821115613cb85760008155600101613cbd565b60e01c90565b600060443d1015613ce757612aaa565b600481823e6308c379a0613cfb8251613cd1565b14613d0557612aaa565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715613d355750505050612aaa565b82840192508251915080821115613d4f5750505050612aaa565b503d83016020828401011115613d6757505050612aaa565b601f01601f191681016020016040529150509056fe455243313135353a207472616e7366657220746f206e6f6e2045524331313535526563656976657220696d706c656d656e746572455243313135353a204552433131353552656365697665722072656a656374656420746f6b656e73726573756c7420666f7220636f6e646974696f6e206e6f7420726563656976656420796574455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373636f756c64206e6f74207472616e73666572207061796f757420746f206d6573736167652073656e646572455243313135353a206275726e20616d6f756e7420657863656564732062616c616e6365455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243313135353a207472616e7366657220746f20746865207a65726f2061646472657373455243313135353a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564636f756c64206e6f74207265636569766520636f6c6c61746572616c20746f6b656e73455243313135353a206275726e2066726f6d20746865207a65726f2061646472657373455243313135353a20696e73756666696369656e742062616c616e636520666f72207472616e73666572536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7774686572652073686f756c64206265206d6f7265207468616e206f6e65206f7574636f6d6520736c6f74455243313135353a2073657474696e6720617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420696473206c656e677468206d69736d61746368455243313135353a2069647320616e6420616d6f756e7473206c656e677468206d69736d61746368455243313135353a206d696e7420746f20746865207a65726f2061646472657373a2646970667358221220cfdc6da81a51698e81d2639dedb406bf7e7e9ccffb855c2d8d7a8eef416b275e64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "ConditionPreparation(bytes32,address,bytes32,uint256)": {
        "details": "Emitted upon the successful preparation of a condition.",
        "params": {
          "conditionId": "The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.",
          "oracle": "The account assigned to report the result for the prepared condition.",
          "outcomeSlotCount": "The number of outcome slots which should be used for this condition. Must not exceed 256.",
          "questionId": "An identifier for the question to be answered by the oracle."
        }
      },
      "PositionSplit(address,address,bytes32,bytes32,uint256[],uint256)": {
        "details": "Emitted when a position is successfully split."
      },
      "PositionsMerge(address,address,bytes32,bytes32,uint256[],uint256)": {
        "details": "Emitted when positions are successfully merged."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getCollectionId(bytes32,bytes32,uint256)": {
        "details": "Constructs an outcome collection ID from a parent collection and an outcome collection.",
        "params": {
          "conditionId": "Condition ID of the outcome collection to combine with the parent outcome collection.",
          "indexSet": "Index set of the outcome collection to combine with the parent outcome collection.",
          "parentCollectionId": "Collection ID of the parent outcome collection, or bytes32(0) if there's no parent."
        }
      },
      "getConditionId(address,bytes32,uint256)": {
        "details": "Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.",
        "params": {
          "oracle": "The account assigned to report the result for the prepared condition.",
          "outcomeSlotCount": "The number of outcome slots which should be used for this condition. Must not exceed 256.",
          "questionId": "An identifier for the question to be answered by the oracle."
        }
      },
      "getOutcomeSlotCount(bytes32)": {
        "details": "Gets the outcome slot count of a condition.",
        "params": {
          "conditionId": "ID of the condition."
        },
        "returns": {
          "_0": "Number of outcome slots associated with a condition, or zero if condition has not been prepared yet."
        }
      },
      "getPositionId(address,bytes32)": {
        "details": "Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.",
        "params": {
          "collateralToken": "Collateral token which backs the position.",
          "collectionId": "ID of the outcome collection associated with this position."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "prepareCondition(address,bytes32,uint256)": {
        "details": "This function prepares a condition by initializing a payout vector associated with the condition.",
        "params": {
          "oracle": "The account assigned to report the result for the prepared condition.",
          "outcomeSlotCount": "The number of outcome slots which should be used for this condition. Must not exceed 256.",
          "questionId": "An identifier for the question to be answered by the oracle."
        }
      },
      "reportPayouts(bytes32,uint256[])": {
        "details": "Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.",
        "params": {
          "payouts": "The oracle's answer",
          "questionId": "The question ID the oracle is answering for"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "splitPosition(address,bytes32,bytes32,uint256[],uint256)": {
        "details": "This function splits a position. If splitting from the collateral, this contract will attempt to transfer `amount` collateral from the message sender to itself. Otherwise, this contract will burn `amount` stake held by the message sender in the position being split worth of EIP 1155 tokens. Regardless, if successful, `amount` stake will be minted in the split target positions. If any of the transfers, mints, or burns fail, the transaction will revert. The transaction will also revert if the given partition is trivial, invalid, or refers to more slots than the condition is prepared with.",
        "params": {
          "amount": "The amount of collateral or stake to split.",
          "collateralToken": "The address of the positions' backing collateral token.",
          "conditionId": "The ID of the condition to split on.",
          "parentCollectionId": "The ID of the outcome collections common to the position being split and the split target positions. May be null, in which only the collateral is shared.",
          "partition": "An array of disjoint index sets representing a nontrivial partition of the outcome slots of the given condition. E.g. A|B and C but not A|B and B|C (is not disjoint). Each element's a number which, together with the condition, represents the outcome collection. E.g. 0b110 is A|B, 0b010 is B, etc."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "payoutDenominator(bytes32)": {
        "notice": "Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved."
      },
      "payoutNumerators(bytes32,uint256)": {
        "notice": "Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 406,
        "contract": "contracts/ConditionalTokens.sol:ConditionalTokens",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 926,
        "contract": "contracts/ConditionalTokens.sol:ConditionalTokens",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 932,
        "contract": "contracts/ConditionalTokens.sol:ConditionalTokens",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 934,
        "contract": "contracts/ConditionalTokens.sol:ConditionalTokens",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6924,
        "contract": "contracts/ConditionalTokens.sol:ConditionalTokens",
        "label": "payoutNumerators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6929,
        "contract": "contracts/ConditionalTokens.sol:ConditionalTokens",
        "label": "payoutDenominator",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}