{
  "address": "0xE31b4C49FA1732b2f7d4165A36Eb133d6ed39661",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "precogToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokensMinted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKET_CREATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMarketCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "funding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overround",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralFunder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketOracle",
          "type": "address"
        }
      ],
      "name": "createCustomMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newMarketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "funding",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "overround",
          "type": "uint256"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newMarketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdMarkets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSeason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRedeemedShares",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "isClosedMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "marketAccountShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sells",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrew",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "marketBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        }
      ],
      "name": "marketBuyPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "tokenCost",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "buyPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sellPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketRedeemShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketResultInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closed",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "marketSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "sharesAmount",
          "type": "int128"
        }
      ],
      "name": "marketSellPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "tokenReturn",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketSharesInfo",
      "outputs": [
        {
          "internalType": "int128",
          "name": "totalShares",
          "type": "int128"
        },
        {
          "internalType": "int128[]",
          "name": "sharesBalances",
          "type": "int128[]"
        },
        {
          "internalType": "int128",
          "name": "cost",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "totalBuys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSells",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "marketTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "marketToken",
          "type": "address"
        }
      ],
      "name": "marketWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "outcomes",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "miningSeasons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "precogMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPrecogMaster",
          "type": "address"
        }
      ],
      "name": "precogTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMarketCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        }
      ],
      "name": "setBaseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setBaseOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUserClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMiningSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seasonIndex",
          "type": "uint256"
        }
      ],
      "name": "updateCurrentSeason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "marketCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketOracle",
          "type": "address"
        }
      ],
      "name": "updateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "updateTokenClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userTokenClaims",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "user",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c03101076f3033d7bf68fe1ed480e4ce13e1ad70be5a7ab832de70aa2f8d20b",
  "receipt": {
    "to": null,
    "from": "0xE5868eFF4A9a29395EE4c9AE8290E16a53eC1082",
    "contractAddress": "0xE31b4C49FA1732b2f7d4165A36Eb133d6ed39661",
    "transactionIndex": 0,
    "gasUsed": "131772505",
    "logsBloom": "0x
    "blockHash": "0xa88d3065f061d14a4d090bd18cd44496ee52bef8e64f689300512ddebe47ca58",
    "transactionHash": "0x7c03101076f3033d7bf68fe1ed480e4ce13e1ad70be5a7ab832de70aa2f8d20b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1953855,
        "transactionHash": "0x7c03101076f3033d7bf68fe1ed480e4ce13e1ad70be5a7ab832de70aa2f8d20b",
        "address": "0xE31b4C49FA1732b2f7d4165A36Eb133d6ed39661",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x000000000000000000000000e5868eff4a9a29395ee4c9ae8290e16a53ec1082"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa88d3065f061d14a4d090bd18cd44496ee52bef8e64f689300512ddebe47ca58"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1953855,
        "transactionHash": "0x7c03101076f3033d7bf68fe1ed480e4ce13e1ad70be5a7ab832de70aa2f8d20b",
        "address": "0xE31b4C49FA1732b2f7d4165A36Eb133d6ed39661",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b50",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa88d3065f061d14a4d090bd18cd44496ee52bef8e64f689300512ddebe47ca58"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1953855,
        "transactionHash": "0x7c03101076f3033d7bf68fe1ed480e4ce13e1ad70be5a7ab832de70aa2f8d20b",
        "address": "0xE31b4C49FA1732b2f7d4165A36Eb133d6ed39661",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000009475a4c1bf5fc80ae079303f14b523da19619c16",
          "0x000000000000000000000000e5868eff4a9a29395ee4c9ae8290e16a53ec1082"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xa88d3065f061d14a4d090bd18cd44496ee52bef8e64f689300512ddebe47ca58"
      }
    ],
    "blockNumber": 1953855,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x369003E80753191330CaD59dD61b4C518730B402",
    "0x9475A4C1BF5Fc80aE079303f14B523da19619c16"
  ],
  "numDeployments": 1,
  "solcInputHash": "d510ea54f6b6d23058c352788725cf7e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"precogToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMarketCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overround\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralFunder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketOracle\",\"type\":\"address\"}],\"name\":\"createCustomMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"funding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overround\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRedeemedShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"isClosedMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"marketAccountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"marketBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"}],\"name\":\"marketBuyPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"tokenCost\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketRedeemShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketResultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"marketSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"sharesAmount\",\"type\":\"int128\"}],\"name\":\"marketSellPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"tokenReturn\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketSharesInfo\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"totalShares\",\"type\":\"int128\"},{\"internalType\":\"int128[]\",\"name\":\"sharesBalances\",\"type\":\"int128[]\"},{\"internalType\":\"int128\",\"name\":\"cost\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"totalBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSells\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"marketTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketToken\",\"type\":\"address\"}],\"name\":\"marketWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomes\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningSeasons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"precogMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPrecogMaster\",\"type\":\"address\"}],\"name\":\"precogTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMarketCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setBaseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setBaseOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUserClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"setMiningSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonIndex\",\"type\":\"uint256\"}],\"name\":\"updateCurrentSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketOracle\",\"type\":\"address\"}],\"name\":\"updateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateTokenClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTokenClaims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Marto (https://github.com/0xMarto)\",\"details\":\"Feel free to make any adjustments to the code (DMs are open @0xMarto)\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"marketAccountShares(uint256,address)\":{\"details\":\"Helper function to show market info about an specific account\",\"params\":{\"account\":\"The address of the account with shares of the market\",\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"balances\":\"Account shares balances by outcome\",\"buys\":\"Total amount of Buys in the market\",\"deposited\":\"Total amount of collateral deposited in the market\",\"redeemed\":\"Total amount of collateral redeemed from the market\",\"sells\":\"Total amount of Sells in the market\",\"withdrew\":\"Total amount of collateral withdrew from the market\"}},\"marketBuy(uint256,uint256,int128,uint256)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"maxAmountIn\":\"Max amount of tokens able to spend in this trade (front-run mitigation)\",\"outcome\":\"The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\",\"sharesAmount\":\"Number of outcome shares to buy (as a signed 64.64-bit fixed point number)\"},\"returns\":{\"amountIn\":\"Token amount used for buying the specified amount of shares\"}},\"marketBuyPrice(uint256,uint256,int128)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"outcome\":\"The outcome for which tokens are being bought\",\"sharesAmount\":\"Number of outcome shares to buy (as signed 64.64-bit fixed point number)\"},\"returns\":{\"tokenCost\":\"The token cost amount (as a signed 64.64-bit fixed point number)\"}},\"marketPrices(uint256)\":{\"details\":\"Helper function to fast calculate market prediction and spreads\",\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"buyPrices\":\"buy price of 1 share for all outcomes (indexed by outcome)\",\"sellPrices\":\"sell price of 1 share for all outcomes (indexed by outcome)\"}},\"marketRedeemShares(uint256)\":{\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"shares\":\"Number of shares redeemed\"}},\"marketResultInfo(uint256)\":{\"details\":\"Helper function to show closed market info\",\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"closed\":\"Timestamp when the market result was reported\",\"reporter\":\"Address of the market result reporter (market oracle)\",\"result\":\"Reported market result outcome\"}},\"marketSell(uint256,uint256,int128,uint256)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"minAmountOut\":\"Min amount of tokens to obtain in this trade (front-run mitigation)\",\"outcome\":\"The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\",\"sharesAmount\":\"Number of outcome shares to sell (as a signed 64.64-bit fixed point number)\"},\"returns\":{\"amountOut\":\"Token amount obtain from selling the specified amount of shares\"}},\"marketSellPrice(uint256,uint256,int128)\":{\"params\":{\"marketId\":\"unique market identifier to trade\",\"outcome\":\"The outcome for which shares are being sold\",\"sharesAmount\":\"The number of outcome shares to sell (as signed 64.64-bit fixed point number)\"},\"returns\":{\"tokenReturn\":\"The token return amount (as a signed 64.64-bit fixed point number)\"}},\"marketSharesInfo(uint256)\":{\"details\":\"Helper function to show general market shares info\",\"params\":{\"marketId\":\"unique market identifier to trade\"},\"returns\":{\"cost\":\"Current liquidity of the market\",\"sharesBalances\":\"All shares balances (indexed by outcome)\",\"totalBuys\":\"Buys counter of the market\",\"totalSells\":\"Sells counter of the market\",\"totalShares\":\"Current total shares minted for all outcomes of the market\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"title\":\"PrecogMaster: Manager of prediction markets and Precog token claims\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasClaimed(address,uint256)\":{\"notice\":\"Helper function to check if some account has already claim current season tokens\"},\"hasRedeemedShares(uint256,address)\":{\"notice\":\"Helper function to check if some account has already redeemed market shares\"},\"isClosedMarket(uint256)\":{\"notice\":\"Helper function to check market close state\"},\"marketAccountShares(uint256,address)\":{\"notice\":\"Gets market account shares summary of the desired market\"},\"marketBuy(uint256,uint256,int128,uint256)\":{\"notice\":\"Buys shares for the specified outcome in the desired market\"},\"marketBuyPrice(uint256,uint256,int128)\":{\"notice\":\"Gets the cost of buying the specified amount of outcome shares in the desired market\"},\"marketPrices(uint256)\":{\"notice\":\"Gets market buy and sell prices for all outcomes in the desired market\"},\"marketRedeemShares(uint256)\":{\"notice\":\"Redeems the total sender shares in the desired market\"},\"marketResultInfo(uint256)\":{\"notice\":\"Gets market result summary of the desired market\"},\"marketSell(uint256,uint256,int128,uint256)\":{\"notice\":\"Sells shares for the specified outcome in the desired market\"},\"marketSellPrice(uint256,uint256,int128)\":{\"notice\":\"Gets the return from selling the specified amount of outcome shares in the desired market\"},\"marketSharesInfo(uint256)\":{\"notice\":\"Gets the current market state info\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrecogMasterV7.sol\":\"PrecogMasterV7\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x0d24348f536f928d8b42789737bf34762faee065667ab530ea20969a9d9920d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/IPrecogMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title IPrecogMarket: simple interface to interact with all Precog Markets\\n * @author Marto (https://github.com/0xMarto)\\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\\n */\\ninterface IPrecogMarket {\\n    // Public market variables\\n    function owner() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function id() external view returns (uint256);\\n\\n    function totalOutcomes() external view returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function startTimestamp() external view returns (uint256);\\n\\n    function endTimestamp() external view returns (uint256);\\n\\n    function closeTimestamp() external view returns (uint256);\\n\\n    function result() external view returns (uint256);\\n\\n    function accountShares(address _account) external view returns (\\n        uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed\\n    );\\n\\n    // Events emitted by markets\\n    event SharesBought(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenIn);\\n    event SharesSold(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\\n    event SharesRedeemed(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Initializes the contract with the specified token\\n     * @param _token The address of the ERC-20 token to be used for buy, sell, and redeem shares\\n     */\\n    function initialize(address _token) external;\\n\\n    /**\\n     * @notice Sets up the market with the specified parameters\\n     * @param _id The unique identifier for the market\\n     * @param _oracle The address of the oracle that will report results\\n     * @param _totalOutcomes The number of possible outcomes for the market\\n     * @param _subsidy The initial funding used to seed the market (defined on initialized token)\\n     * @param _overround The AMM profit margin in basis points (bps) [recommended: (100 * _totalOutcomes)]\\n     */\\n    function setup(uint256 _id, address _oracle, uint256 _totalOutcomes, uint256 _subsidy, uint256 _overround) external;\\n\\n    /**\\n     * @notice Buys outcome shares for the specified outcome\\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome tokens to buy (as a signed 64.64-bit fixed point number)\\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\\n     */\\n    function buy(uint256 _outcome, int128 _amount) external returns (uint256 tokenCost);\\n\\n    /**\\n     * @notice Allows buying market shares for a specified account (limited to only Self or Owner)\\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\\n     * @param _account The address of the buyer\\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\\n     */\\n    function _buy(uint256 _outcome, int128 _amount, address _account) external returns (uint256 tokenCost);\\n\\n    /**\\n     * @notice Sells outcome shares for the specified outcome\\n     * @param _outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\\n     */\\n    function sell(uint256 _outcome, int128 _amount) external returns (uint256 tokenReturn);\\n\\n    /**\\n     * @notice Allows selling market shares from a specified account (limited to only Self or Owner)\\n     * @param _outcome The outcome for which tokens are being sold (e.g.: 1 for YES, 2 for NO)\\n     * @param _amount The number of outcome tokens to sell (as a signed 64.64-bit fixed point number)\\n     * @param _account The address of the seller\\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\\n     */\\n    function _sell(uint256 _outcome, int128 _amount, address _account) external returns (uint256 tokenReturn);\\n\\n    /**\\n     * @notice Reports the result of the market (limited to only Oracle)\\n     * @param _id The unique identifier of the market\\n     * @param _outcome The outcome that is reported as the result of the market\\n     */\\n    function reportResult(uint256 _id, uint256 _outcome) external;\\n\\n    /**\\n     * @notice Redeems the current sender shares for the result of the market\\n     * @return redeemedShares The number of shares redeemed\\n     */\\n    function redeemShares() external returns (uint256 redeemedShares);\\n\\n    /**\\n     * @notice Redeems the received account shares for the result of the market (limited to only Self or Owner)\\n     * @param _account The address of the account with shares of the market\\n     * @return redeemedShares The number of shares redeemed\\n     */\\n    function _redeem(address _account) external returns (uint256 redeemedShares);\\n\\n    /**\\n     * @notice Redeems shares in batch for multiple accounts  (limited to only Oracle)\\n     * @param _accounts The list of accounts to redeem shares for\\n     * @dev The list of accounts could be calculated using the \\\"SharesBought\\\" event\\n     * @return redeems The number of successful redeems\\n     */\\n    function redeemBatch(address[] memory _accounts) external returns (uint256 redeems);\\n\\n    /**\\n     * @notice Withdraws any remaining liquidity from the market (limited to only owner)\\n     * @param _token The address of the ERC-20 token to withdraw\\n     */\\n    function withdraw(address _token) external;\\n\\n    /**\\n     * @notice Transfers the ownership of the contract to a new owner (limited to only current owner)\\n     * @param _newOwner The address of the new owner\\n     */\\n    function transferOwnership(address _newOwner) external;\\n\\n    /**\\n     * @notice Update the oracle address of the market (limited to only owner)\\n     * @param _newOracle The address of the EOA or contract that can close the market\\n     */\\n    function updateOracle(address _newOracle) external;\\n\\n    /**\\n     * @notice Updates the start and end timestamps for the market (limited to only owner)\\n     * @param _startTimestamp The timestamp when the market starts allowing trading\\n     * @param _endTimestamp The timestamp when the market stops allowing trading\\n     */\\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) external;\\n\\n    /**\\n     * @notice Gets the total collateral spent in the market\\n     * @return totalCost The total cost in the form of a signed 64.64-bit fixed point number\\n     */\\n    function cost() external view returns (int128 totalCost);\\n\\n    /**\\n     * @notice Gets the cost of buying the specified amount of outcome tokens\\n     * @param _outcome The outcome for which tokens are being bought\\n     * @param _amount The number of outcome tokens to buy (as signed 64.64-bit fixed point number)\\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\\n     */\\n    function buyPrice(uint256 _outcome, int128 _amount) external view returns (int128 tokenCost);\\n\\n    /**\\n     * @notice Gets the return from selling the specified amount of outcome tokens\\n     * @param _outcome The outcome for which tokens are being sold\\n     * @param _amount The number of outcome tokens to sell (as signed 64.64-bit fixed point number)\\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\\n     */\\n    function sellPrice(uint256 _outcome, int128 _amount) external view returns (int128 tokenReturn);\\n\\n    /**\\n     * @notice Gets the current market state information\\n     * @return totalShares The current total shares minted for all outcomes of the market\\n     * @return sharesBalances All shares balances (indexed by outcome)\\n     * @return currentCost The current liquidity of the market\\n     * @return totalBuys Buys counter of the market\\n     * @return totalSells Sells counter of the market\\n     */\\n    function getMarketInfo() external view returns (\\n        int128 totalShares, int128[] memory sharesBalances, int128 currentCost, uint256 totalBuys, uint256 totalSells\\n    );\\n\\n    /**\\n     * @notice Get current market buy and sell prices for all outcomes\\n     * @dev Helper function to fast calculate market prediction and spreads\\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\\n     */\\n    function getPrices() external view returns (uint256[] memory buyPrices, uint256[] memory sellPrices);\\n\\n    /**\\n     * @notice Gets the amount of shares that an account owns for all outcomes\\n     * @param _account The address of the account with shares of the market\\n     * @return balances The balances of shares for all outcomes (indexed by outcome)\\n     */\\n    function getAccountOutcomeBalances(address _account) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x49673e3221d08716f383d19b5cd8db0de52fc0936d086e6a025de9b5e5fba2bd\",\"license\":\"MIT\"},\"contracts/IPrecogToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPrecogToken: interface to interact with Precog Token\\r\\n */\\r\\ninterface IPrecogToken is IERC20 {\\r\\n    /**\\r\\n     * @notice Mint new tokens for the specified address (limited to only owner)\\r\\n     * @param to The address of the new tokens receiver\\r\\n     * @param amount The amount of tokens to be minted\\r\\n     * @dev Emits a {Transfer} event from the zero address as source\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Burn already minted tokens from the specified address (limited to only owner)\\r\\n     * @param from The address of the token source\\r\\n     * @param amount The amount of tokens to be burn\\r\\n     * @dev Emits a {Transfer} event to the zero address as destination\\r\\n     */\\r\\n    function burn(address from, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer tokens from one address to another (limited to only owner)\\r\\n     * @param from The address of the token source\\r\\n     * @param to The address of the token receiver\\r\\n     * @dev Emits a {Transfer} event\\r\\n     */\\r\\n    function move(address from, address to, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ownership of the contract to a new address (limited to only owner)\\r\\n     * @param newOwner The address of the new owner\\r\\n     * @dev Emits a {OwnershipTransferred} event with the previous and new owner addresses\\r\\n     */\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current owner of the contract\\r\\n     * @return Address of the current owner\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when ownership of the contract is transferred to a new address\\r\\n     */\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n}\\r\\n\",\"keccak256\":\"0x638d83a9d9c775832c42041c45310302edad521543c0d3ecabc3629744d8ba88\",\"license\":\"MIT\"},\"contracts/PrecogMasterV7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./IPrecogToken.sol\\\";\\r\\nimport \\\"./IPrecogMarket.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PrecogMaster: Manager of prediction markets and Precog token claims\\r\\n * @author Marto (https://github.com/0xMarto)\\r\\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\\r\\n */\\r\\ncontract PrecogMasterV7 is AccessControl {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant CALLER_ROLE = keccak256(\\\"CALLER_ROLE\\\");\\r\\n    bytes32 public constant MARKET_CREATOR_ROLE = keccak256(\\\"MARKET_CREATOR_ROLE\\\");\\r\\n\\r\\n    // State objects\\r\\n    struct TokenClaim {\\r\\n        address account;\\r\\n        uint256 user;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 claimedTimestamp;\\r\\n    }\\r\\n\\r\\n    struct MiningSeason {\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 maxUserClaim;\\r\\n        uint256 maxTotalClaim;\\r\\n        uint256 maxTotalMint;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 mintedAmount;\\r\\n    }\\r\\n\\r\\n    struct MarketInfo {\\r\\n        string name;\\r\\n        string description;\\r\\n        string category;\\r\\n        string outcomes;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        address creator;\\r\\n        address market;\\r\\n    }\\r\\n\\r\\n    struct MarketConfig {\\r\\n        uint256 totalOutcomes;\\r\\n        uint256 funding;\\r\\n        uint256 overround;\\r\\n        address collateralToken;\\r\\n        address collateralFunder;\\r\\n        address marketOracle;\\r\\n    }\\r\\n\\r\\n    // Public variables\\r\\n    address public token;  // Claim token and default collateral for non custom markets\\r\\n    address private oracle; // default oracle for all non custom markets\\r\\n    address private market; // base market recipe for all created markets\\r\\n    uint256 public createdMarkets;  // Total markets created\\r\\n    uint256 public currentSeason;  // Current claiming season number\\r\\n    mapping(address => TokenClaim) public accountTokenClaims;\\r\\n    mapping(uint256 => TokenClaim) public userTokenClaims;\\r\\n    mapping(uint256 => MiningSeason) public miningSeasons;\\r\\n    mapping(uint256 => MarketInfo) public markets;\\r\\n\\r\\n    // Events emitted\\r\\n    event TokensClaimed(address indexed account, uint256 indexed user, uint256 amount, uint256 timestamp);\\r\\n    event TokensMinted(address indexed account, uint256 amount, uint256 timestamp);\\r\\n    event MarketCreated(address indexed creator, uint256 id, address market);\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Only Admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        require(hasRole(CALLER_ROLE, msg.sender), \\\"Only Caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMarketCreator() {\\r\\n        require(hasRole(MARKET_CREATOR_ROLE, msg.sender), \\\"Only Market Creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions\\r\\n    constructor(address precogToken, address initialAdmin) {\\r\\n        // Grant DEFAULT_ADMIN_ROLE to the initial admin (this is the admin to the ADMIN_ROLE list)\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\r\\n        // Set ADMIN_ROLE as admin of CALLER_ROLE list\\r\\n        _setRoleAdmin(CALLER_ROLE, ADMIN_ROLE);\\r\\n        // Set already deployed precogToken as claimable token and collateral token for all Markets\\r\\n        token = precogToken;\\r\\n        // Grant ADMIN_ROLE to initial Admin (this enables to call \\\"addAdmin\\\" helper function)\\r\\n        _setupRole(ADMIN_ROLE, initialAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buys shares for the specified outcome in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param sharesAmount Number of outcome shares to buy (as a signed 64.64-bit fixed point number)\\r\\n     * @param maxAmountIn Max amount of tokens able to spend in this trade (front-run mitigation)\\r\\n     * @return amountIn Token amount used for buying the specified amount of shares\\r\\n     */\\r\\n    function marketBuy(\\r\\n        uint256 marketId,\\r\\n        uint256 outcome,\\r\\n        int128 sharesAmount,\\r\\n        uint256 maxAmountIn\\r\\n    ) external returns (uint256 amountIn) {\\r\\n        require(block.timestamp >= markets[marketId].startTimestamp, 'Market not started');\\r\\n        require(block.timestamp <= markets[marketId].endTimestamp, 'Market already ended');\\r\\n\\r\\n        // Get maxAmountIn of tokens from the buyer to Master (this reverts if there is no balance on buyer)\\r\\n        address marketCollateral = IPrecogMarket(markets[marketId].market).token();\\r\\n        if (marketCollateral == token) {\\r\\n            // Case PrecogToken market: just move the max amount to this contract (no approve needed)\\r\\n            IPrecogToken(token).move(msg.sender, address(this), maxAmountIn);\\r\\n        } else {\\r\\n            // Case custom token market: try to transfer from sender (this reverts is there is no allowance)\\r\\n            IERC20(marketCollateral).safeTransferFrom(msg.sender, address(this), maxAmountIn);\\r\\n        }\\r\\n\\r\\n        // Send remote BUY to market contract (to be assigned to the sender)\\r\\n        amountIn = IPrecogMarket(markets[marketId].market)._buy(outcome, sharesAmount, msg.sender);\\r\\n        require(amountIn <= maxAmountIn, \\\"Max amount reach!\\\");  // Just in case there is some balance on this contract\\r\\n\\r\\n        // If there is any leftover, return tokens to sender\\r\\n        if (amountIn < maxAmountIn) {\\r\\n            IERC20(marketCollateral).safeTransfer(msg.sender, maxAmountIn.sub(amountIn));\\r\\n        }\\r\\n        return amountIn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sells shares for the specified outcome in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param sharesAmount Number of outcome shares to sell (as a signed 64.64-bit fixed point number)\\r\\n     * @param minAmountOut Min amount of tokens to obtain in this trade (front-run mitigation)\\r\\n     * @return amountOut Token amount obtain from selling the specified amount of shares\\r\\n     */\\r\\n    function marketSell(\\r\\n        uint256 marketId,\\r\\n        uint256 outcome,\\r\\n        int128 sharesAmount,\\r\\n        uint256 minAmountOut\\r\\n    ) external returns (uint256 amountOut) {\\r\\n        require(block.timestamp >= markets[marketId].startTimestamp, \\\"Market not started\\\");\\r\\n        require(block.timestamp <= markets[marketId].endTimestamp, \\\"Market already ended\\\");\\r\\n\\r\\n        // Send remote SELL to market contract (to be assigned to the sender)\\r\\n        amountOut = IPrecogMarket(markets[marketId].market)._sell(outcome, sharesAmount, msg.sender);\\r\\n\\r\\n        // Check that the sell price was equal or higher seller expected\\r\\n        require(amountOut >= minAmountOut, \\\"Min amount reach!\\\");\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems the total sender shares in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return shares Number of shares redeemed\\r\\n     */\\r\\n    function marketRedeemShares(uint256 marketId) external returns (uint256 shares) {\\r\\n        return IPrecogMarket(markets[marketId].market)._redeem(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the cost of buying the specified amount of outcome shares in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome for which tokens are being bought\\r\\n     * @param sharesAmount Number of outcome shares to buy (as signed 64.64-bit fixed point number)\\r\\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\\r\\n     */\\r\\n    function marketBuyPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view\\r\\n    returns (int128 tokenCost) {\\r\\n        return IPrecogMarket(markets[marketId].market).buyPrice(outcome, sharesAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the return from selling the specified amount of outcome shares in the desired market\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param outcome The outcome for which shares are being sold\\r\\n     * @param sharesAmount The number of outcome shares to sell (as signed 64.64-bit fixed point number)\\r\\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\\r\\n     */\\r\\n    function marketSellPrice(uint256 marketId, uint256 outcome, int128 sharesAmount) external view\\r\\n    returns (int128 tokenReturn) {\\r\\n        return IPrecogMarket(markets[marketId].market).sellPrice(outcome, sharesAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets market buy and sell prices for all outcomes in the desired market\\r\\n     * @dev Helper function to fast calculate market prediction and spreads\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\\r\\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\\r\\n     */\\r\\n    function marketPrices(uint256 marketId) external view\\r\\n    returns (uint256[] memory buyPrices, uint256[] memory sellPrices) {\\r\\n        return IPrecogMarket(markets[marketId].market).getPrices();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets market result summary of the desired market\\r\\n     * @dev Helper function to show closed market info\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return result Reported market result outcome\\r\\n     * @return closed Timestamp when the market result was reported\\r\\n     * @return reporter Address of the market result reporter (market oracle)\\r\\n     */\\r\\n    function marketResultInfo(uint256 marketId) external view\\r\\n    returns (uint256 result, uint256 closed, address reporter) {\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n\\r\\n        // Get market result info\\r\\n        result = createdMarket.result();\\r\\n        closed = createdMarket.closeTimestamp();\\r\\n        reporter = createdMarket.oracle();\\r\\n        return (result, closed, reporter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets market account shares summary of the desired market\\r\\n     * @dev Helper function to show market info about an specific account\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @param account The address of the account with shares of the market\\r\\n     * @return buys Total amount of Buys in the market\\r\\n     * @return sells Total amount of Sells in the market\\r\\n     * @return deposited Total amount of collateral deposited in the market\\r\\n     * @return withdrew Total amount of collateral withdrew from the market\\r\\n     * @return redeemed Total amount of collateral redeemed from the market\\r\\n     * @return balances Account shares balances by outcome\\r\\n     */\\r\\n    function marketAccountShares(uint256 marketId, address account) external view\\r\\n    returns (uint256 buys, uint256 sells, uint256 deposited, uint256 withdrew, uint256 redeemed,\\r\\n        uint256[] memory balances) {\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n        // Get sharesInfo on received account for selected market\\r\\n        (buys, sells, deposited, withdrew, redeemed) = createdMarket.accountShares(account);\\r\\n        // Get outcome balances on received account for selected market\\r\\n        balances = createdMarket.getAccountOutcomeBalances(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current market state info\\r\\n     * @dev Helper function to show general market shares info\\r\\n     * @param marketId unique market identifier to trade\\r\\n     * @return totalShares Current total shares minted for all outcomes of the market\\r\\n     * @return sharesBalances All shares balances (indexed by outcome)\\r\\n     * @return cost Current liquidity of the market\\r\\n     * @return totalBuys Buys counter of the market\\r\\n     * @return totalSells Sells counter of the market\\r\\n     */\\r\\n    function marketSharesInfo(uint256 marketId) external view\\r\\n    returns (int128 totalShares, int128[] memory sharesBalances, int128 cost, uint256 totalBuys, uint256 totalSells) {\\r\\n        IPrecogMarket createdMarket = IPrecogMarket(markets[marketId].market);\\r\\n        (totalShares, sharesBalances, cost, totalBuys, totalSells) = createdMarket.getMarketInfo();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to check market close state\\r\\n     */\\r\\n    function isClosedMarket(uint256 marketId) external view returns (bool) {\\r\\n        return IPrecogMarket(markets[marketId].market).closeTimestamp() > block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to check if some account has already redeemed market shares\\r\\n     */\\r\\n    function hasRedeemedShares(uint256 marketId, address account) external view returns (bool) {\\r\\n        (,,,,uint256 redeemed) = IPrecogMarket(markets[marketId].market).accountShares(account);\\r\\n        return redeemed > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to check if some account has already claim current season tokens\\r\\n     */\\r\\n    function hasClaimed(address account, uint256 user) external view returns (bool) {\\r\\n        return accountTokenClaims[account].claimedTimestamp != 0 || userTokenClaims[user].claimedTimestamp != 0;\\r\\n    }\\r\\n\\r\\n    // Whitelisted functions: Only caller & Only market creator\\r\\n    function claimToken(address account, uint256 user, uint256 amount) external onlyCaller returns (bool) {\\r\\n        // Validate token claim\\r\\n        require(accountTokenClaims[account].claimedTimestamp == 0, \\\"Account already claimed\\\");\\r\\n        require(userTokenClaims[user].claimedTimestamp == 0, \\\"User already claimed\\\");\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(block.timestamp >= season.startTimestamp, \\\"Season not started\\\");\\r\\n            require(block.timestamp < season.endTimestamp, \\\"Season already ended\\\");\\r\\n            require(amount <= season.maxUserClaim, \\\"Invalid user claim amount\\\");\\r\\n            require(amount.add(season.claimedAmount) <= season.maxTotalClaim, \\\"Season max token claims\\\");\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints\\\");\\r\\n        }\\r\\n\\r\\n        // Register current token claim\\r\\n        TokenClaim memory claim = TokenClaim({\\r\\n            account: account,\\r\\n            user: user,\\r\\n            claimedAmount: amount,\\r\\n            claimedTimestamp: block.timestamp\\r\\n        });\\r\\n        accountTokenClaims[account] = claim;\\r\\n        userTokenClaims[user] = claim;\\r\\n        season.claimedAmount = season.claimedAmount.add(amount);\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(account, amount);\\r\\n\\r\\n        emit TokensClaimed(account, user, amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function createMarket(\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        string[] memory outcomes,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address creator,\\r\\n        uint256 funding,\\r\\n        uint256 overround\\r\\n    ) external onlyCaller returns (uint256 newMarketId) {\\r\\n        // Mint tokens to seed the new market\\r\\n        IPrecogToken(token).mint(address(this), funding);\\r\\n\\r\\n        // Pack all received information (with defaults), create new market and return new market id\\r\\n        MarketInfo memory marketInfo = MarketInfo(\\r\\n            name, description, category, arrayToCSV(outcomes), startTimestamp, endTimestamp, creator, address(0)\\r\\n        );\\r\\n        MarketConfig memory marketConfig = MarketConfig(\\r\\n            outcomes.length, // Total number of outcomes\\r\\n            funding,         // Initial supply of the market\\r\\n            overround,       // AMM profit margin\\r\\n            token,           // collateralToken: Precog Token\\r\\n            address(this),   // collateralFunder: This contract\\r\\n            oracle           // marketOracle: Preset oracle\\r\\n        );\\r\\n        return _createMarket(marketInfo, marketConfig);\\r\\n    }\\r\\n\\r\\n    function createCustomMarket(\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        string[] memory outcomes,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address creator,\\r\\n        uint256 funding,\\r\\n        uint256 overround,\\r\\n        address collateralToken,\\r\\n        address collateralFunder,\\r\\n        address marketOracle\\r\\n    ) public onlyMarketCreator returns (uint256 newMarketId) {\\r\\n        // Pack all received information, create new market and return new market id\\r\\n        MarketInfo memory marketInfo = MarketInfo(\\r\\n            name, description, category, arrayToCSV(outcomes), startTimestamp, endTimestamp, creator, address(0)\\r\\n        );\\r\\n        MarketConfig memory marketConfig = MarketConfig(\\r\\n            outcomes.length, funding, overround, collateralToken, collateralFunder, marketOracle\\r\\n        );\\r\\n        return _createMarket(marketInfo, marketConfig);\\r\\n    }\\r\\n\\r\\n    function _createMarket(MarketInfo memory info, MarketConfig memory config) internal returns (uint256 newMarketId) {\\r\\n        // Deploy a new market contract and initialize it with the collateral token\\r\\n        address newMarketAddress = Clones.clone(market);\\r\\n        IPrecogMarket newMarket = IPrecogMarket(newMarketAddress);\\r\\n        newMarket.initialize(config.collateralToken);\\r\\n\\r\\n        // Get funding amount to seed the new market (optimization: except in a self-funder usecase)\\r\\n        if (config.collateralFunder != address(this)) {\\r\\n            IERC20(config.collateralToken).safeTransferFrom(config.collateralFunder, address(this), config.funding);\\r\\n        }\\r\\n        // Pre approve all trades with\\r\\n        IERC20(config.collateralToken).approve(newMarketAddress, type(uint256).max);\\r\\n\\r\\n        // Get new Id and Setup deployed new market\\r\\n        newMarketId = createdMarkets;\\r\\n        newMarket.setup(newMarketId, config.marketOracle, config.totalOutcomes, config.funding, config.overround);\\r\\n        newMarket.updateDates(info.startTimestamp, info.endTimestamp);\\r\\n\\r\\n        // Save created market address in received info and save it in local storage (indexed by id)\\r\\n        info.market = newMarketAddress;\\r\\n        markets[newMarketId] = info;\\r\\n\\r\\n        // Increase created markets counter and return new market id\\r\\n        createdMarkets = createdMarkets.add(1);\\r\\n\\r\\n        emit MarketCreated(info.creator, newMarketId, newMarketAddress);\\r\\n        return newMarketId;\\r\\n    }\\r\\n\\r\\n    function arrayToCSV(string[] memory array) internal pure returns (string memory) {\\r\\n        bytes memory csvBytes;\\r\\n        for (uint i = 0; i < array.length; i++) {\\r\\n            csvBytes = abi.encodePacked(csvBytes, array[i]);\\r\\n            if (i < array.length - 1) {\\r\\n                csvBytes = abi.encodePacked(csvBytes, \\\",\\\");\\r\\n            }\\r\\n        }\\r\\n        return string(csvBytes);\\r\\n    }\\r\\n\\r\\n    // Whitelisted functions: Only admin\\r\\n    function addMarketCreator(address account) external onlyAdmin {\\r\\n        grantRole(MARKET_CREATOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeMarketCreator(address account) external onlyAdmin {\\r\\n        revokeRole(MARKET_CREATOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function addCaller(address account) external onlyAdmin {\\r\\n        grantRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeCaller(address account) external onlyAdmin {\\r\\n        revokeRole(CALLER_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function addAdmin(address account) external onlyAdmin {\\r\\n        grantRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address account) external onlyAdmin {\\r\\n        revokeRole(ADMIN_ROLE, account);\\r\\n    }\\r\\n\\r\\n    function updateCurrentSeason(uint256 seasonIndex) external onlyAdmin {\\r\\n        currentSeason = seasonIndex;\\r\\n    }\\r\\n\\r\\n    function setMiningSeason(\\r\\n        uint256 seasonIndex,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        uint256 maxUserClaim,\\r\\n        uint256 maxTotalClaim,\\r\\n        uint256 maxTotalMint,\\r\\n        uint256 claimedAmount,\\r\\n        uint256 mintedAmount\\r\\n    ) external onlyAdmin {\\r\\n        miningSeasons[seasonIndex] = MiningSeason({\\r\\n            startTimestamp: startTimestamp,\\r\\n            endTimestamp: endTimestamp,\\r\\n            maxUserClaim: maxUserClaim,\\r\\n            maxTotalClaim: maxTotalClaim,\\r\\n            maxTotalMint: maxTotalMint,\\r\\n            claimedAmount: claimedAmount,\\r\\n            mintedAmount: mintedAmount\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function setBaseOracle(address _oracle) external onlyAdmin {\\r\\n        oracle = _oracle;\\r\\n    }\\r\\n\\r\\n    function setBaseMarket(address _market) external onlyAdmin {\\r\\n        market = _market;\\r\\n    }\\r\\n\\r\\n    function updateMarket(\\r\\n        uint256 id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory category,\\r\\n        string[] memory outcomes,\\r\\n        uint256 startTimestamp,\\r\\n        uint256 endTimestamp,\\r\\n        address marketCreator,\\r\\n        address marketOracle\\r\\n    ) external onlyAdmin {\\r\\n        if (bytes(name).length > 0) {\\r\\n            markets[id].name = name;\\r\\n        }\\r\\n        if (bytes(description).length > 0) {\\r\\n            markets[id].description = description;\\r\\n        }\\r\\n        if (bytes(category).length > 0) {\\r\\n            markets[id].category = category;\\r\\n        }\\r\\n        if (outcomes.length > 0) {\\r\\n            // Only updates outcome labels (not total possible outcomes)\\r\\n            markets[id].outcomes = arrayToCSV(outcomes);\\r\\n        }\\r\\n        if (marketCreator != address(0)) {\\r\\n            markets[id].creator = marketCreator;\\r\\n        }\\r\\n        if (marketOracle != address(0)) {\\r\\n            IPrecogMarket(markets[id].market).updateOracle(marketOracle);\\r\\n        }\\r\\n        bool updateDates = false;\\r\\n        if (startTimestamp > 0) {\\r\\n            markets[id].startTimestamp = startTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (endTimestamp > 0) {\\r\\n            markets[id].endTimestamp = endTimestamp;\\r\\n            updateDates = true;\\r\\n        }\\r\\n        if (updateDates) {\\r\\n            IPrecogMarket(markets[id].market).updateDates(markets[id].startTimestamp, markets[id].endTimestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketWithdraw(uint256 marketId, address marketToken) external onlyAdmin {\\r\\n        IPrecogMarket(markets[marketId].market).withdraw(marketToken);\\r\\n    }\\r\\n\\r\\n    function marketTransferOwnership(uint256 marketId, address newOwner) external onlyAdmin {\\r\\n        IPrecogMarket(markets[marketId].market).transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function updateTokenClaim(address account, uint256 amount, uint256 timestamp) external onlyAdmin {\\r\\n        // Used to reset token claims\\r\\n        accountTokenClaims[account].claimedAmount = amount;\\r\\n        accountTokenClaims[account].claimedTimestamp = timestamp;\\r\\n        uint256 user = accountTokenClaims[account].user;\\r\\n        userTokenClaims[user].claimedAmount = amount;\\r\\n        userTokenClaims[user].claimedTimestamp = timestamp;\\r\\n    }\\r\\n\\r\\n    function precogMint(address to, uint256 amount) external onlyAdmin {\\r\\n        // Validate token mint\\r\\n        MiningSeason storage season = miningSeasons[currentSeason];\\r\\n        if (season.startTimestamp > 0) {\\r\\n            require(amount.add(season.mintedAmount) <= season.maxTotalMint, \\\"Season max token mints\\\");\\r\\n        }\\r\\n\\r\\n        // Register token mint\\r\\n        season.mintedAmount = season.mintedAmount.add(amount);\\r\\n\\r\\n        // Mint tokens to received account\\r\\n        IPrecogToken(token).mint(to, amount);\\r\\n\\r\\n        emit TokensMinted(to, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function precogBurn(address from, uint256 amount) external onlyAdmin {\\r\\n        IPrecogToken(token).burn(from, amount);\\r\\n    }\\r\\n\\r\\n    function precogTransferOwnership(address newPrecogMaster) external onlyAdmin {\\r\\n        IPrecogToken(token).transferOwnership(newPrecogMaster);\\r\\n    }\\r\\n\\r\\n    function withdraw(address _token) public onlyAdmin {\\r\\n        if (_token == address(0)) {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        } else {\\r\\n            IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0b51daed2d5366b05cd44faaa898685018ac121b60e970f3a76aa4148650cc08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103415760003560e01c8063774237fc116101bd578063ba2e3684116100f9578063d547741f116100a2578063eef21cd21161007c578063eef21cd214610737578063f2fd59431461074a578063f944a5ff1461075d578063fc0c546a1461077057610341565b8063d547741f146106fe578063d6fb7d7914610711578063de02852a1461072457610341565b8063bcb39621116100d3578063bcb39621146106d0578063ca15c873146106d8578063d33bfe4f146106eb57610341565b8063ba2e36841461068a578063bb31675a1461069d578063bc05b806146106b057610341565b8063a217fddf11610166578063b1283e7711610140578063b1283e7714610622578063b293109614610649578063b590b56f1461065c578063b608b8f41461066457610341565b8063a217fddf146105ee578063a9683f6e146105f6578063ae42820c1461061a57610341565b80639971537c116101975780639971537c146105b55780639c6c412e146105c8578063a15fd10f146105db57610341565b8063774237fc1461057a5780639010d07c1461058257806391d14854146105a257610341565b806330829a201161028c57806351cff8d911610235578063704802751161020f578063704802751461053957806370f4a7ae1461054c578063747293fb1461055f57806375b238fc1461057257610341565b806351cff8d91461050057806352438beb146105135780636354eeb31461052657610341565b806336568abe1161026657806336568abe146104b55780633dc2724a146104c85780634836e867146104db57610341565b806330829a201461046d5780633204fff714610480578063355987cd146104a257610341565b806314aebade116102ee57806325ceaea6116102c857806325ceaea6146104275780632f2ff15d146104475780632fb1541b1461045a57610341565b806314aebade146103e05780631785f53c14610401578063248a9ca31461041457610341565b8063127e9cbd1161031f578063127e9cbd14610397578063129c7ce4146103ba57806314ae3ffc146103cd57610341565b8063020917fe146103465780630c87235e1461035b57806312357c7014610384575b600080fd5b610359610354366004613673565b610778565b005b61036e610369366004613915565b61081a565b60405161037b9190613eaf565b60405180910390f35b61036e6103923660046139f5565b610971565b6103aa6103a5366004613673565b610a7c565b60405161037b9493929190613e50565b61036e6103c8366004613c58565b610aad565b6103596103db3660046136ab565b610be8565b6103f36103ee3660046137be565b610c9d565b60405161037b929190613e76565b61035961040f366004613673565b610d4e565b61036e6104223660046137be565b610d9d565b61043a6104353660046137be565b610db5565b60405161037b9190613ea4565b6103596104553660046137d6565b610e60565b610359610468366004613cd5565b610ec7565b61035961047b3660046137d6565b610f6c565b61049361048e3660046137be565b610ff9565b60405161037b93929190614335565b6103596104b0366004613673565b611191565b6103596104c33660046137d6565b6111ef565b6103aa6104d63660046137be565b611250565b6104ee6104e93660046137d6565b611281565b60405161037b96959493929190614354565b61035961050e366004613673565b6113ce565b610359610521366004613b39565b6114d3565b6103596105343660046136d6565b611769565b610359610547366004613673565b6117e3565b61035961055a366004613673565b61182f565b61035961056d366004613673565b611885565b61036e6118e3565b61036e6118f5565b610595610590366004613805565b611919565b60405161037b9190613dff565b61043a6105b03660046137d6565b61193a565b61043a6105c33660046137d6565b611952565b61043a6105d63660046136d6565b6119ef565b6103596105e9366004613673565b611d04565b61036e611d62565b6106096106043660046137be565b611d67565b60405161037b959493929190613ec6565b61036e611e2c565b6106356106303660046137be565b611e50565b60405161037b989796959493929190613f2e565b61043a6106573660046136ab565b6120d7565b61036e612115565b6106776106723660046137be565b61211b565b60405161037b9796959493929190614391565b6103596106983660046137d6565b612158565b6103596106ab366004613673565b6121cc565b6106c36106be366004613c20565b612222565b60405161037b9190613eb8565b61036e6122cc565b61036e6106e63660046137be565b6122d2565b61036e6106f9366004613c58565b6122e9565b61035961070c3660046137d6565b61258e565b61035961071f3660046137be565b6125e7565b6103596107323660046136ab565b612620565b610359610745366004613673565b61275f565b61036e6107583660046137be565b6127bd565b6106c361076b366004613c20565b612867565b6105956128c1565b6107906000805160206144d58339815191523361193a565b6107b55760405162461bcd60e51b81526004016107ac9061420c565b60405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b039091169063f2fde38b906107e5908490600401613dff565b600060405180830381600087803b1580156107ff57600080fd5b505af1158015610813573d6000803e3d6000fd5b5050505050565b60006108467f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b503361193a565b6108625760405162461bcd60e51b81526004016107ac906140f9565b6001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906108949030908790600401613e37565b600060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b5050505060006040518061010001604052808c81526020018b81526020018a81526020016108ef8a6128e5565b815260208082018a905260408083018a90526001600160a01b03808a166060808601919091526000608095860152825160c0810184528e5181529384018a9052918301889052600154811691830191909152309282019290925260025490911660a08201529091506109618282612969565b9c9b505050505050505050505050565b600061099d7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d97953361193a565b6109b95760405162461bcd60e51b81526004016107ac906140c2565b60006040518061010001604052808f81526020018e81526020018d81526020016109e28d6128e5565b81526020018b81526020018a8152602001896001600160a01b0316815260200160006001600160a01b0316815250905060006040518060c001604052808d518152602001898152602001888152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152509050610a698282612969565b9f9e505050505050505050505050505050565b60066020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b600084815260096020526040812060040154421015610ade5760405162461bcd60e51b81526004016107ac9061408b565b600085815260096020526040902060050154421115610b0f5760405162461bcd60e51b81526004016107ac90613fe6565b600085815260096020526040908190206007015490517f898b51a70000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063898b51a790610b6c90879087903390600401614305565b602060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190613b21565b905081811015610be05760405162461bcd60e51b81526004016107ac9061401d565b949350505050565b610c006000805160206144d58339815191523361193a565b610c1c5760405162461bcd60e51b81526004016107ac9061420c565b6001546040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639dc29fac90610c679085908590600401613e37565b600060405180830381600087803b158015610c8157600080fd5b505af1158015610c95573d6000803e3d6000fd5b505050505050565b6000818152600960205260408082206007015481517fbd9a548b000000000000000000000000000000000000000000000000000000008152915160609384936001600160a01b039093169263bd9a548b9260048083019392829003018186803b158015610d0957600080fd5b505afa158015610d1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d45919081019061373d565b91509150915091565b610d666000805160206144d58339815191523361193a565b610d825760405162461bcd60e51b81526004016107ac9061420c565b610d9a6000805160206144d58339815191528261258e565b50565b6000818152602081905260409020600201545b919050565b60008181526009602090815260408083206007015481517f052d7c00000000000000000000000000000000000000000000000000000000008152915142936001600160a01b039092169263052d7c00926004808301939192829003018186803b158015610e2157600080fd5b505afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190613b21565b1192915050565b600082815260208190526040902060020154610e7e906105b0612cea565b610eb95760405162461bcd60e51b815260040180806020018281038252602f815260200180614476602f913960400191505060405180910390fd5b610ec38282612cee565b5050565b610edf6000805160206144d58339815191523361193a565b610efb5760405162461bcd60e51b81526004016107ac9061420c565b6040805160e0810182529788526020808901978852888201968752606089019586526080890194855260a0890193845260c089019283526000998a52600890529097209551865593516001860155915160028501555160038401555160048301555160058201559051600690910155565b610f846000805160206144d58339815191523361193a565b610fa05760405162461bcd60e51b81526004016107ac9061420c565b600082815260096020526040908190206007015490517f51cff8d90000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906351cff8d990610c67908490600401613dff565b60008181526009602090815260408083206007015481517f653721470000000000000000000000000000000000000000000000000000000081529151849384936001600160a01b03909316928392636537214792600480840193919291829003018186803b15801561106a57600080fd5b505afa15801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a29190613b21565b9350806001600160a01b031663052d7c006040518163ffffffff1660e01b815260040160206040518083038186803b1580156110dd57600080fd5b505afa1580156110f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111159190613b21565b9250806001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561115057600080fd5b505afa158015611164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611188919061368f565b93959294505050565b6111a96000805160206144d58339815191523361193a565b6111c55760405162461bcd60e51b81526004016107ac9061420c565b610d9a7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979582610e60565b6111f7612cea565b6001600160a01b0316816001600160a01b0316146112465760405162461bcd60e51b815260040180806020018281038252602f81526020018061451f602f913960400191505060405180910390fd5b610ec38282612d57565b60076020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909184565b6000828152600960205260408082206007015490516352c8b2f960e01b815282918291829182916060916001600160a01b03169081906352c8b2f9906112cb908b90600401613dff565b60a06040518083038186803b1580156112e357600080fd5b505afa1580156112f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131b9190613c96565b6040517f05b4b371000000000000000000000000000000000000000000000000000000008152949b50929950909750955093506001600160a01b038216906305b4b3719061136d908b90600401613dff565b60006040518083038186803b15801561138557600080fd5b505afa158015611399573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113c1919081019061370a565b9150509295509295509295565b6113e66000805160206144d58339815191523361193a565b6114025760405162461bcd60e51b81526004016107ac9061420c565b6001600160a01b0381166114425760405133904780156108fc02916000818181858888f1935050505015801561143c573d6000803e3d6000fd5b50610d9a565b610d9a33826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114729190613dff565b60206040518083038186803b15801561148a57600080fd5b505afa15801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c29190613b21565b6001600160a01b0384169190612dc0565b6114eb6000805160206144d58339815191523361193a565b6115075760405162461bcd60e51b81526004016107ac9061420c565b87511561152f576000898152600960209081526040909120895161152d928b0190613496565b505b86511561155d576000898152600960209081526040909120885161155b926001909201918a0190613496565b505b85511561158b576000898152600960209081526040909120875161158992600290920191890190613496565b505b8451156115c65761159b856128e5565b600960008b815260200190815260200160002060030190805190602001906115c4929190613496565b505b6001600160a01b0382161561160057600089815260096020526040902060060180546001600160a01b0319166001600160a01b0384161790555b6001600160a01b0381161561169b57600089815260096020526040908190206007015490517f1cb44dfc0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631cb44dfc90611668908490600401613dff565b600060405180830381600087803b15801561168257600080fd5b505af1158015611696573d6000803e3d6000fd5b505050505b600084156116bb5750600089815260096020526040902060040184905560015b83156116d95750600089815260096020526040902060050183905560015b801561175d5760008a81526009602052604090819020600781015460048083015460059093015493516339acb21f60e21b81526001600160a01b039092169363e6b2c87c9361172a93909201614327565b600060405180830381600087803b15801561174457600080fd5b505af1158015611758573d6000803e3d6000fd5b505050505b50505050505050505050565b6117816000805160206144d58339815191523361193a565b61179d5760405162461bcd60e51b81526004016107ac9061420c565b6001600160a01b03909216600090815260066020908152604080832060028082018690556003808301889055600190920154855260079093529220908101929092550155565b6117fb6000805160206144d58339815191523361193a565b6118175760405162461bcd60e51b81526004016107ac9061420c565b610d9a6000805160206144d583398151915282610e60565b6118476000805160206144d58339815191523361193a565b6118635760405162461bcd60e51b81526004016107ac9061420c565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61189d6000805160206144d58339815191523361193a565b6118b95760405162461bcd60e51b81526004016107ac9061420c565b610d9a7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5082610e60565b6000805160206144d583398151915281565b7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b5081565b60008281526020819052604081206119319083612e45565b90505b92915050565b60008281526020819052604081206119319083612e51565b6000828152600960205260408082206007015490516352c8b2f960e01b815282916001600160a01b0316906352c8b2f990611991908690600401613dff565b60a06040518083038186803b1580156119a957600080fd5b505afa1580156119bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e19190613c96565b151598975050505050505050565b6000611a1b7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b503361193a565b611a375760405162461bcd60e51b81526004016107ac906140f9565b6001600160a01b03841660009081526006602052604090206003015415611a705760405162461bcd60e51b81526004016107ac90614130565b60008381526007602052604090206003015415611a9f5760405162461bcd60e51b81526004016107ac90613faf565b6005546000908152600860205260409020805415611b85578054421015611ad85760405162461bcd60e51b81526004016107ac906141d5565b80600101544210611afb5760405162461bcd60e51b81526004016107ac9061427a565b8060020154831115611b1f5760405162461bcd60e51b81526004016107ac90614054565b60038101546005820154611b34908590612e66565b1115611b525760405162461bcd60e51b81526004016107ac90614243565b60048101546006820154611b67908590612e66565b1115611b855760405162461bcd60e51b81526004016107ac90614167565b604080516080810182526001600160a01b0380881680835260208084018981528486018981524260608701908152600094855260068452878520875181549088166001600160a01b03199182161782558451600180840191909155845160028085019190915584516003948501558f89526007909752999096208851815498169790961696909617855591519684019690965594519082015592519201919091556005820154611c359085612e66565b60058301556006820154611c499085612e66565b60068301556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611c809089908890600401613e37565b600060405180830381600087803b158015611c9a57600080fd5b505af1158015611cae573d6000803e3d6000fd5b5050505084866001600160a01b03167fe49649ad7d04a14b0d2a43dae89f207c0822143ff6f88a6480e88907e4e5c5488642604051611cee929190614327565b60405180910390a36001925050505b9392505050565b611d1c6000805160206144d58339815191523361193a565b611d385760405162461bcd60e51b81526004016107ac9061420c565b610d9a7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d97958261258e565b600081565b6000818152600960205260408082206007015481517f23341a0500000000000000000000000000000000000000000000000000000000815291516060928492839283926001600160a01b039092169182916323341a05916004808201928792909190829003018186803b158015611ddd57600080fd5b505afa158015611df1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e199190810190613842565b939b929a50909850965090945092505050565b7fd3065a24ad9e7725d223007135762d2902038999e3e5829146654498a58d979581565b60096020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015611ee75780601f10611ebc57610100808354040283529160200191611ee7565b820191906000526020600020905b815481529060010190602001808311611eca57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f855780601f10611f5a57610100808354040283529160200191611f85565b820191906000526020600020905b815481529060010190602001808311611f6857829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156120175780601f10611fec57610100808354040283529160200191612017565b820191906000526020600020905b815481529060010190602001808311611ffa57829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156120a75780601f1061207c576101008083540402835291602001916120a7565b820191906000526020600020905b81548152906001019060200180831161208a57829003601f168201915b505050600484015460058501546006860154600790960154949591949093506001600160a01b0391821692501688565b6001600160a01b0382166000908152600660205260408120600301541515806119315750506000908152600760205260409020600301541515919050565b60045481565b6008602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b6121706000805160206144d58339815191523361193a565b61218c5760405162461bcd60e51b81526004016107ac9061420c565b6000828152600960205260409081902060070154905163f2fde38b60e01b81526001600160a01b039091169063f2fde38b90610c67908490600401613dff565b6121e46000805160206144d58339815191523361193a565b6122005760405162461bcd60e51b81526004016107ac9061420c565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000838152600960205260408082206007015490517f535f02ee0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063535f02ee9061227c90869086906004016142f4565b60206040518083038186803b15801561229457600080fd5b505afa1580156122a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190613826565b60055481565b600081815260208190526040812061193490612ec0565b60008481526009602052604081206004015442101561231a5760405162461bcd60e51b81526004016107ac9061408b565b60008581526009602052604090206005015442111561234b5760405162461bcd60e51b81526004016107ac90613fe6565b60008581526009602090815260408083206007015481517ffc0c546a00000000000000000000000000000000000000000000000000000000815291516001600160a01b039091169263fc0c546a9260048082019391829003018186803b1580156123b457600080fd5b505afa1580156123c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ec919061368f565b6001549091506001600160a01b0380831691161415612489576001546040517fbb35783b0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bb35783b9061245290339030908890600401613e13565b600060405180830381600087803b15801561246c57600080fd5b505af1158015612480573d6000803e3d6000fd5b5050505061249e565b61249e6001600160a01b038216333086612ecb565b600086815260096020526040908190206007015490517fcae326060000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063cae32606906124fb90889088903390600401614305565b602060405180830381600087803b15801561251557600080fd5b505af1158015612529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254d9190613b21565b91508282111561256f5760405162461bcd60e51b81526004016107ac9061419e565b8282101561258557612585336114c28585612f59565b50949350505050565b6000828152602081905260409020600201546125ac906105b0612cea565b6112465760405162461bcd60e51b81526004018080602001828103825260308152602001806144a56030913960400191505060405180910390fd5b6125ff6000805160206144d58339815191523361193a565b61261b5760405162461bcd60e51b81526004016107ac9061420c565b600555565b6126386000805160206144d58339815191523361193a565b6126545760405162461bcd60e51b81526004016107ac9061420c565b600554600090815260086020526040902080541561269f5760048101546006820154612681908490612e66565b111561269f5760405162461bcd60e51b81526004016107ac90614167565b60068101546126ae9083612e66565b60068201556001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906126e59086908690600401613e37565b600060405180830381600087803b1580156126ff57600080fd5b505af1158015612713573d6000803e3d6000fd5b50505050826001600160a01b03167f2e8ac5177a616f2aec08c3048f5021e4e9743ece034e8d83ba5caf76688bb4758342604051612752929190614327565b60405180910390a2505050565b6127776000805160206144d58339815191523361193a565b6127935760405162461bcd60e51b81526004016107ac9061420c565b610d9a7f843c3a00fa95510a35f425371231fd3fe4642e719cb4595160763d6d02594b508261258e565b6000818152600960205260408082206007015490517f3f7361eb0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633f7361eb90612815903390600401613dff565b602060405180830381600087803b15801561282f57600080fd5b505af1158015612843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119349190613b21565b6000838152600960205260408082206007015490517f3dcb8b810000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690633dcb8b819061227c90869086906004016142f4565b6001546001600160a01b031681565b6000611931836001600160a01b038416612fb6565b60608060005b8351811015612962578184828151811061290157fe5b602002602001015160405160200161291a929190613d8f565b6040516020818303038152906040529150600184510381101561295a57816040516020016129489190613dbe565b60405160208183030381529060405291505b6001016128eb565b5092915050565b6003546000908190612983906001600160a01b0316613000565b60608401516040517fc4d66de800000000000000000000000000000000000000000000000000000000815291925082916001600160a01b0383169163c4d66de8916129d19190600401613dff565b600060405180830381600087803b1580156129eb57600080fd5b505af11580156129ff573d6000803e3d6000fd5b50505060808501516001600160a01b031630149050612a4457612a44846080015130866020015187606001516001600160a01b0316612ecb909392919063ffffffff16565b83606001516001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b8152600401612a78929190613e37565b602060405180830381600087803b158015612a9257600080fd5b505af1158015612aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aca919061379e565b506004549250806001600160a01b0316635467a751848660a001518760000151886020015189604001516040518663ffffffff1660e01b8152600401612b149594939291906142c8565b600060405180830381600087803b158015612b2e57600080fd5b505af1158015612b42573d6000803e3d6000fd5b50505050608085015160a08601516040516339acb21f60e21b81526001600160a01b0384169263e6b2c87c92612b7a92600401614327565b600060405180830381600087803b158015612b9457600080fd5b505af1158015612ba8573d6000803e3d6000fd5b5050506001600160a01b03831660e0870152506000838152600960209081526040909120865180518893612be0928492910190613496565b506020828101518051612bf99260018501920190613496565b5060408201518051612c15916002840191602090910190613496565b5060608201518051612c31916003840191602090910190613496565b50608082015160048281019190915560a0830151600583015560c08301516006830180546001600160a01b03199081166001600160a01b039384161790915560e0909401516007909301805490941692169190911790915554612c95906001612e66565b6004819055508460c001516001600160a01b03167f8263f983d31825e2fcfa4ff69822ca37ec7846c9c6a84da9b59ae29d8e43ddab8484604051612cda9291906142b1565b60405180910390a2505092915050565b3390565b6000828152602081905260409020612d0690826128d0565b15610ec357612d13612cea565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020612d6f90826130bb565b15610ec357612d7c612cea565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612e409084906130d0565b505050565b60006119318383613181565b6000611931836001600160a01b0384166131e5565b600082820183811015611931576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000611934826131fd565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612f539085906130d0565b50505050565b600082821115612fb0576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000612fc283836131e5565b612ff857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611934565b506000611934565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b038116610db0576040805162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015290519081900360640190fd5b6000611931836001600160a01b038416613201565b6000613125826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132c79092919063ffffffff16565b805190915015612e405780806020019051602081101561314457600080fd5b5051612e405760405162461bcd60e51b815260040180806020018281038252602a8152602001806144f5602a913960400191505060405180910390fd5b815460009082106131c35760405162461bcd60e51b81526004018080602001828103825260228152602001806144546022913960400191505060405180910390fd5b8260000182815481106131d257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156132bd578354600019808301919081019060009087908390811061323457fe5b906000526020600020015490508087600001848154811061325157fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061328157fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611934565b6000915050611934565b6060610be08484600085856132db856133ec565b61332c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061336a5780518252601f19909201916020918201910161334b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146133cc576040519150601f19603f3d011682016040523d82523d6000602084013e6133d1565b606091505b50915091506133e18282866133f2565b979650505050505050565b3b151590565b60608315613401575081611cfd565b8251156134115782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561345b578181015183820152602001613443565b50505050905090810190601f1680156134885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826134cc5760008555613512565b82601f106134e557805160ff1916838001178555613512565b82800160010185558215613512579182015b828111156135125782518255916020019190600101906134f7565b5061351e929150613522565b5090565b5b8082111561351e5760008155600101613523565b8035610db08161442f565b600082601f830112613552578081fd5b81356020613567613562836143e5565b6143c1565b82815281810190858301855b8581101561359c5761358a898684358b010161360e565b84529284019290840190600101613573565b5090979650505050505050565b600082601f8301126135b9578081fd5b815160206135c9613562836143e5565b82815281810190858301838502870184018810156135e5578586fd5b855b8581101561359c578151845292840192908401906001016135e7565b8051610db081614444565b600082601f83011261361e578081fd5b813567ffffffffffffffff81111561363257fe5b613645601f8201601f19166020016143c1565b818152846020838601011115613659578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613684578081fd5b81356119318161442f565b6000602082840312156136a0578081fd5b81516119318161442f565b600080604083850312156136bd578081fd5b82356136c88161442f565b946020939093013593505050565b6000806000606084860312156136ea578081fd5b83356136f58161442f565b95602085013595506040909401359392505050565b60006020828403121561371b578081fd5b815167ffffffffffffffff811115613731578182fd5b610be0848285016135a9565b6000806040838503121561374f578182fd5b825167ffffffffffffffff80821115613766578384fd5b613772868387016135a9565b93506020850151915080821115613787578283fd5b50613794858286016135a9565b9150509250929050565b6000602082840312156137af578081fd5b81518015158114611931578182fd5b6000602082840312156137cf578081fd5b5035919050565b600080604083850312156137e8578182fd5b8235915060208301356137fa8161442f565b809150509250929050565b60008060408385031215613817578182fd5b50508035926020909101359150565b600060208284031215613837578081fd5b815161193181614444565b600080600080600060a08688031215613859578283fd5b855161386481614444565b8095505060208087015167ffffffffffffffff811115613882578485fd5b8701601f81018913613892578485fd5b80516138a0613562826143e5565b81815283810190838501858402850186018d10156138bc578889fd5b8894505b838510156138e75780516138d381614444565b8352600194909401939185019185016138c0565b5080985050505050506138fc60408701613603565b6060870151608090970151959894975095949392505050565b60008060008060008060008060006101208a8c031215613933578687fd5b893567ffffffffffffffff8082111561394a578889fd5b6139568d838e0161360e565b9a5060208c013591508082111561396b578889fd5b6139778d838e0161360e565b995060408c013591508082111561398c578889fd5b6139988d838e0161360e565b985060608c01359150808211156139ad578586fd5b506139ba8c828d01613542565b96505060808a0135945060a08a013593506139d760c08b01613537565b925060e08a013591506101008a013590509295985092959850929598565b6000806000806000806000806000806000806101808d8f031215613a17578586fd5b67ffffffffffffffff8d351115613a2c578586fd5b613a398e8e358f0161360e565b9b5067ffffffffffffffff60208e01351115613a53578586fd5b613a638e60208f01358f0161360e565b9a5067ffffffffffffffff60408e01351115613a7d578586fd5b613a8d8e60408f01358f0161360e565b995067ffffffffffffffff60608e01351115613aa7578586fd5b613ab78e60608f01358f01613542565b985060808d0135975060a08d01359650613ad360c08e01613537565b955060e08d013594506101008d01359350613af16101208e01613537565b9250613b006101408e01613537565b9150613b0f6101608e01613537565b90509295989b509295989b509295989b565b600060208284031215613b32578081fd5b5051919050565b60008060008060008060008060006101208a8c031215613b57578283fd5b8935985060208a013567ffffffffffffffff80821115613b75578485fd5b613b818d838e0161360e565b995060408c0135915080821115613b96578485fd5b613ba28d838e0161360e565b985060608c0135915080821115613bb7578485fd5b613bc38d838e0161360e565b975060808c0135915080821115613bd8578485fd5b50613be58c828d01613542565b95505060a08a0135935060c08a01359250613c0260e08b01613537565b9150613c116101008b01613537565b90509295985092959850929598565b600080600060608486031215613c34578081fd5b83359250602084013591506040840135613c4d81614444565b809150509250925092565b60008060008060808587031215613c6d578182fd5b84359350602085013592506040850135613c8681614444565b9396929550929360600135925050565b600080600080600060a08688031215613cad578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600080600080600080600080610100898b031215613cf1578182fd5b505086359860208801359850604088013597606081013597506080810135965060a0810135955060c0810135945060e0013592509050565b6000815180845260208085019450808401835b83811015613d5857815187529582019590820190600101613d3c565b509495945050505050565b60008151808452613d7b816020860160208601614403565b601f01601f19169290920160200192915050565b60008351613da1818460208801614403565b835190830190613db5818360208801614403565b01949350505050565b60008251613dd0818460208701614403565b7f2c00000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b600060408252613e896040830185613d29565b8281036020840152613e9b8185613d29565b95945050505050565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600060a08201600f88810b8452602060a08186015282895180855260c087019150828b019450855b81811015613f0c578551850b83529483019491830191600101613eee565b50509790910b6040850152505050606081019290925260809091015292915050565b6000610100808352613f428184018c613d63565b90508281036020840152613f56818b613d63565b90508281036040840152613f6a818a613d63565b90508281036060840152613f7e8189613d63565b6080840197909752505060a08101939093526001600160a01b0391821660c08401521660e090910152949350505050565b60208082526014908201527f5573657220616c726561647920636c61696d6564000000000000000000000000604082015260600190565b60208082526014908201527f4d61726b657420616c726561647920656e646564000000000000000000000000604082015260600190565b60208082526011908201527f4d696e20616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526019908201527f496e76616c6964207573657220636c61696d20616d6f756e7400000000000000604082015260600190565b60208082526012908201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604082015260600190565b60208082526013908201527f4f6e6c79204d61726b65742043726561746f7200000000000000000000000000604082015260600190565b6020808252600b908201527f4f6e6c792043616c6c6572000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f4163636f756e7420616c726561647920636c61696d6564000000000000000000604082015260600190565b60208082526016908201527f536561736f6e206d617820746f6b656e206d696e747300000000000000000000604082015260600190565b60208082526011908201527f4d617820616d6f756e7420726561636821000000000000000000000000000000604082015260600190565b60208082526012908201527f536561736f6e206e6f7420737461727465640000000000000000000000000000604082015260600190565b6020808252600a908201527f4f6e6c792041646d696e00000000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f536561736f6e206d617820746f6b656e20636c61696d73000000000000000000604082015260600190565b60208082526014908201527f536561736f6e20616c726561647920656e646564000000000000000000000000604082015260600190565b9182526001600160a01b0316602082015260400190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b918252600f0b602082015260400190565b928352600f9190910b60208301526001600160a01b0316604082015260600190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b600087825286602083015285604083015284606083015283608083015260c060a083015261438560c0830184613d29565b98975050505050505050565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405181810167ffffffffffffffff811182821017156143dd57fe5b604052919050565b600067ffffffffffffffff8211156143f957fe5b5060209081020190565b60005b8381101561441e578181015183820152602001614406565b83811115612f535750506000910152565b6001600160a01b0381168114610d9a57600080fd5b80600f0b8114610d9a57600080fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217755361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220c608313b64552bb200bb9e953809a02778957ba1f01973bd5623642496cb2cf864736f6c63430007060033",
  "devdoc": {
    "author": "Marto (https://github.com/0xMarto)",
    "details": "Feel free to make any adjustments to the code (DMs are open @0xMarto)",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "marketAccountShares(uint256,address)": {
        "details": "Helper function to show market info about an specific account",
        "params": {
          "account": "The address of the account with shares of the market",
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "balances": "Account shares balances by outcome",
          "buys": "Total amount of Buys in the market",
          "deposited": "Total amount of collateral deposited in the market",
          "redeemed": "Total amount of collateral redeemed from the market",
          "sells": "Total amount of Sells in the market",
          "withdrew": "Total amount of collateral withdrew from the market"
        }
      },
      "marketBuy(uint256,uint256,int128,uint256)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "maxAmountIn": "Max amount of tokens able to spend in this trade (front-run mitigation)",
          "outcome": "The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)",
          "sharesAmount": "Number of outcome shares to buy (as a signed 64.64-bit fixed point number)"
        },
        "returns": {
          "amountIn": "Token amount used for buying the specified amount of shares"
        }
      },
      "marketBuyPrice(uint256,uint256,int128)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "outcome": "The outcome for which tokens are being bought",
          "sharesAmount": "Number of outcome shares to buy (as signed 64.64-bit fixed point number)"
        },
        "returns": {
          "tokenCost": "The token cost amount (as a signed 64.64-bit fixed point number)"
        }
      },
      "marketPrices(uint256)": {
        "details": "Helper function to fast calculate market prediction and spreads",
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "buyPrices": "buy price of 1 share for all outcomes (indexed by outcome)",
          "sellPrices": "sell price of 1 share for all outcomes (indexed by outcome)"
        }
      },
      "marketRedeemShares(uint256)": {
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "shares": "Number of shares redeemed"
        }
      },
      "marketResultInfo(uint256)": {
        "details": "Helper function to show closed market info",
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "closed": "Timestamp when the market result was reported",
          "reporter": "Address of the market result reporter (market oracle)",
          "result": "Reported market result outcome"
        }
      },
      "marketSell(uint256,uint256,int128,uint256)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "minAmountOut": "Min amount of tokens to obtain in this trade (front-run mitigation)",
          "outcome": "The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)",
          "sharesAmount": "Number of outcome shares to sell (as a signed 64.64-bit fixed point number)"
        },
        "returns": {
          "amountOut": "Token amount obtain from selling the specified amount of shares"
        }
      },
      "marketSellPrice(uint256,uint256,int128)": {
        "params": {
          "marketId": "unique market identifier to trade",
          "outcome": "The outcome for which shares are being sold",
          "sharesAmount": "The number of outcome shares to sell (as signed 64.64-bit fixed point number)"
        },
        "returns": {
          "tokenReturn": "The token return amount (as a signed 64.64-bit fixed point number)"
        }
      },
      "marketSharesInfo(uint256)": {
        "details": "Helper function to show general market shares info",
        "params": {
          "marketId": "unique market identifier to trade"
        },
        "returns": {
          "cost": "Current liquidity of the market",
          "sharesBalances": "All shares balances (indexed by outcome)",
          "totalBuys": "Buys counter of the market",
          "totalSells": "Sells counter of the market",
          "totalShares": "Current total shares minted for all outcomes of the market"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "title": "PrecogMaster: Manager of prediction markets and Precog token claims",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasClaimed(address,uint256)": {
        "notice": "Helper function to check if some account has already claim current season tokens"
      },
      "hasRedeemedShares(uint256,address)": {
        "notice": "Helper function to check if some account has already redeemed market shares"
      },
      "isClosedMarket(uint256)": {
        "notice": "Helper function to check market close state"
      },
      "marketAccountShares(uint256,address)": {
        "notice": "Gets market account shares summary of the desired market"
      },
      "marketBuy(uint256,uint256,int128,uint256)": {
        "notice": "Buys shares for the specified outcome in the desired market"
      },
      "marketBuyPrice(uint256,uint256,int128)": {
        "notice": "Gets the cost of buying the specified amount of outcome shares in the desired market"
      },
      "marketPrices(uint256)": {
        "notice": "Gets market buy and sell prices for all outcomes in the desired market"
      },
      "marketRedeemShares(uint256)": {
        "notice": "Redeems the total sender shares in the desired market"
      },
      "marketResultInfo(uint256)": {
        "notice": "Gets market result summary of the desired market"
      },
      "marketSell(uint256,uint256,int128,uint256)": {
        "notice": "Sells shares for the specified outcome in the desired market"
      },
      "marketSellPrice(uint256,uint256,int128)": {
        "notice": "Gets the return from selling the specified amount of outcome shares in the desired market"
      },
      "marketSharesInfo(uint256)": {
        "notice": "Gets the current market state info"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 9036,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9038,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "oracle",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9040,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "market",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9042,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "createdMarkets",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9044,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "currentSeason",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9048,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "accountTokenClaims",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(TokenClaim)8989_storage)"
      },
      {
        "astId": 9052,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "userTokenClaims",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TokenClaim)8989_storage)"
      },
      {
        "astId": 9056,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "miningSeasons",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(MiningSeason)9004_storage)"
      },
      {
        "astId": 9060,
        "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(MarketInfo)9021_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(TokenClaim)8989_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PrecogMasterV7.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)8989_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(MarketInfo)9021_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV7.MarketInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketInfo)9021_storage"
      },
      "t_mapping(t_uint256,t_struct(MiningSeason)9004_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV7.MiningSeason)",
        "numberOfBytes": "32",
        "value": "t_struct(MiningSeason)9004_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenClaim)8989_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PrecogMasterV7.TokenClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenClaim)8989_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2275_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2274,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2010_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketInfo)9021_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV7.MarketInfo",
        "members": [
          {
            "astId": 9006,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9008,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 9010,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "category",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 9012,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "outcomes",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 9014,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9016,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9018,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "creator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 9020,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "market",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(MiningSeason)9004_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV7.MiningSeason",
        "members": [
          {
            "astId": 8991,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8993,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8995,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "maxUserClaim",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8997,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "maxTotalClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8999,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "maxTotalMint",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9001,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9003,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "mintedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)2275_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2010_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2005,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2009,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenClaim)8989_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMasterV7.TokenClaim",
        "members": [
          {
            "astId": 8982,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8984,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8986,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8988,
            "contract": "contracts/PrecogMasterV7.sol:PrecogMasterV7",
            "label": "claimedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}