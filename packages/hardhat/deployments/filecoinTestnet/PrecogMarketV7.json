{
  "address": "0x4F8c5006171641Ee7Ad2DBC26e4e9e0e6008979f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIn",
          "type": "uint256"
        }
      ],
      "name": "SharesBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenOut",
          "type": "uint256"
        }
      ],
      "name": "SharesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenOut",
          "type": "uint256"
        }
      ],
      "name": "SharesSold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeemedShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenReturn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sells",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrew",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "buyPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "tokenCost",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "int128",
          "name": "totalCost",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountOutcomeBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketInfo",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "int128[]",
          "name": "",
          "type": "int128[]"
        },
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "buyPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sellPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "redeemBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeems",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeemedShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        }
      ],
      "name": "reportResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "result",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenReturn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "_amount",
          "type": "int128"
        }
      ],
      "name": "sellPrice",
      "outputs": [
        {
          "internalType": "int128",
          "name": "tokenReturn",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalOutcomes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subsidy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_overround",
          "type": "uint256"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOutcomes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "updateDates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracle",
          "type": "address"
        }
      ],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5486b711bb9d75c0b61251edc46d69651a26063accc618309bd9f6a830ea5a50",
  "receipt": {
    "to": null,
    "from": "0xE5868eFF4A9a29395EE4c9AE8290E16a53eC1082",
    "contractAddress": "0x4F8c5006171641Ee7Ad2DBC26e4e9e0e6008979f",
    "transactionIndex": 0,
    "gasUsed": "120206476",
    "logsBloom": "0x
    "blockHash": "0xcac6d4e2018ebf0a506745de8291737fc14b53c0f17441d6179e715a37c8980b",
    "transactionHash": "0x5486b711bb9d75c0b61251edc46d69651a26063accc618309bd9f6a830ea5a50",
    "logs": [],
    "blockNumber": 1953857,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d510ea54f6b6d23058c352788725cf7e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIn\",\"type\":\"uint256\"}],\"name\":\"SharesBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenOut\",\"type\":\"uint256\"}],\"name\":\"SharesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenOut\",\"type\":\"uint256\"}],\"name\":\"SharesSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sells\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"tokenCost\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"totalCost\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountOutcomeBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketInfo\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"int128[]\",\"name\":\"\",\"type\":\"int128[]\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sellPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"redeemBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeems\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"reportResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"result\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"_amount\",\"type\":\"int128\"}],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"tokenReturn\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalOutcomes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subsidy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overround\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOutcomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Marto (https://github.com/0xMarto)\",\"details\":\"Feel free to make any adjustments to the code (DMs are open @0xMarto)\",\"kind\":\"dev\",\"methods\":{\"_buy(uint256,int128,address)\":{\"params\":{\"_account\":\"The address of the buyer\",\"_amount\":\"The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\"},\"returns\":{\"tokenCost\":\"The total token amount used for buying the specified amount of outcome shares\"}},\"_redeem(address)\":{\"params\":{\"_account\":\"The address of the account with shares of the market\"},\"returns\":{\"redeemedShares\":\"The number of shares redeemed\"}},\"_sell(uint256,int128,address)\":{\"params\":{\"_account\":\"The address of the seller\",\"_amount\":\"The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome for which shares are being sold (e.g.: 1 for YES, 2 for NO)\"},\"returns\":{\"tokenReturn\":\"The total amount of tokens received from selling the outcome shares\"}},\"buy(uint256,int128)\":{\"params\":{\"_amount\":\"The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\"},\"returns\":{\"tokenCost\":\"The total token amount used for buying the specified amount of outcome shares\"}},\"buyPrice(uint256,int128)\":{\"params\":{\"_amount\":\"The number of outcome shares to buy (as signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome for which shares are being bought\"},\"returns\":{\"tokenCost\":\"The token cost amount (as a signed 64.64-bit fixed point number)\"}},\"cost()\":{\"returns\":{\"totalCost\":\"The total cost in the form of a signed 64.64-bit fixed point number\"}},\"getAccountOutcomeBalances(address)\":{\"params\":{\"_account\":\"The address of the account with shares of the market\"},\"returns\":{\"balances\":\"The balances of shares for all outcomes (indexed by outcome)\"}},\"getMarketInfo()\":{\"returns\":{\"_0\":\"totalShares The current total shares minted for all outcomes of the market\",\"_1\":\"sharesBalances All shares balances (indexed by outcome)\",\"_2\":\"currentCost The current liquidity of the market\",\"_3\":\"totalBuys Buys counter of the market\",\"_4\":\"totalSells Sells counter of the market\"}},\"getPrices()\":{\"details\":\"Helper function to fast calculate market prediction and spreads\",\"returns\":{\"buyPrices\":\"buy price of 1 share for all outcomes (indexed by outcome)\",\"sellPrices\":\"sell price of 1 share for all outcomes (indexed by outcome)\"}},\"initialize(address)\":{\"params\":{\"_token\":\"ERC-20 token will be used to purchase and redeem rewards for this Market\"}},\"redeemBatch(address[])\":{\"details\":\"The list of accounts could be calculated using the \\\"SharesBought\\\" event\",\"params\":{\"_accounts\":\"The list of accounts to redeem shares for\"},\"returns\":{\"redeems\":\"The number of successful redeems\"}},\"redeemShares()\":{\"returns\":{\"redeemedShares\":\"The number of shares redeemed\"}},\"reportResult(uint256,uint256)\":{\"params\":{\"_id\":\"The unique identifier of the market\",\"_outcome\":\"The outcome that is reported as the result of the market\"}},\"sell(uint256,int128)\":{\"params\":{\"_amount\":\"The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\"},\"returns\":{\"tokenReturn\":\"The total amount of tokens received from selling the outcome shares\"}},\"sellPrice(uint256,int128)\":{\"params\":{\"_amount\":\"The number of outcome shares to sell (as signed 64.64-bit fixed point number)\",\"_outcome\":\"The outcome for which shares are being sold\"},\"returns\":{\"tokenReturn\":\"The token return amount (as a signed 64.64-bit fixed point number)\"}},\"setup(uint256,address,uint256,uint256,uint256)\":{\"params\":{\"_id\":\"The unique identifier for the market\",\"_oracle\":\"The address of the oracle that will report results\",\"_overround\":\"The AMM profit margin in basis points (bps) [recommended: (100 * _totalOutcomes)]\",\"_subsidy\":\"The initial funding used to seed the market (defined on initialized token)\",\"_totalOutcomes\":\"The number of possible outcomes for the market\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"The address of the new owner\"}},\"updateDates(uint256,uint256)\":{\"params\":{\"_endTimestamp\":\"The timestamp when the market stops allowing trading\",\"_startTimestamp\":\"The timestamp when the market starts allowing trading\"}},\"updateOracle(address)\":{\"params\":{\"_newOracle\":\"The address of the EOA or contract that can close the market\"}},\"withdraw(address)\":{\"params\":{\"_token\":\"The address of the ERC-20 token to withdraw\"}}},\"title\":\"PrecogMarketV7: An implementation for liquidity-sensitive LMSR market maker in Solidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_buy(uint256,int128,address)\":{\"notice\":\"Allows buying market shares for a specified account (limited to only Self or Owner)\"},\"_redeem(address)\":{\"notice\":\"Redeems the received account shares for the result of the market (limited to only Self or Owner)\"},\"_sell(uint256,int128,address)\":{\"notice\":\"Allows selling market shares from a specified account (limited to only Self or Owner)\"},\"buy(uint256,int128)\":{\"notice\":\"Buys outcome shares for the specified outcome\"},\"buyPrice(uint256,int128)\":{\"notice\":\"Gets the cost of buying the specified amount of outcome shares\"},\"cost()\":{\"notice\":\"Gets the total collateral spent in the market\"},\"getAccountOutcomeBalances(address)\":{\"notice\":\"Gets the amount of shares that an account owns for all outcomes\"},\"getMarketInfo()\":{\"notice\":\"Gets the current market state information\"},\"getPrices()\":{\"notice\":\"Gets current market buy and sell prices for all outcomes\"},\"initialize(address)\":{\"notice\":\"Constructor like function for the market maker\"},\"redeemBatch(address[])\":{\"notice\":\"Redeems shares in batch for multiple accounts  (limited to only Oracle)\"},\"redeemShares()\":{\"notice\":\"Redeems the current sender shares for the result of the market\"},\"reportResult(uint256,uint256)\":{\"notice\":\"Reports the result of the market (limited to only Oracle)\"},\"sell(uint256,int128)\":{\"notice\":\"Sells outcome shares for the specified outcome\"},\"sellPrice(uint256,int128)\":{\"notice\":\"Gets the return from selling the specified amount of outcome shares\"},\"setup(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Sets up the market with the specified parameters\"},\"transferOwnership(address)\":{\"notice\":\"Transfers the ownership of the contract to a new owner (limited to only current owner)\"},\"updateDates(uint256,uint256)\":{\"notice\":\"Updates the start and end timestamps for the market (limited to only owner)\"},\"updateOracle(address)\":{\"notice\":\"Update the oracle address of the market (limited to only owner)\"},\"withdraw(address)\":{\"notice\":\"Withdraws any remaining liquidity from the market (limited to only owner)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrecogMarketV7.sol\":\"PrecogMarketV7\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\r\\n/*\\r\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary ABDKMath {\\r\\n  /*\\r\\n   * Minimum value signed 64.64-bit fixed point number may have.\\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * Maximum value signed 64.64-bit fixed point number may have.\\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    return int64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    require (x >= 0);\\r\\n    return uint64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    int256 result = x >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    return int256 (x) << 64;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) + y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) - y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) * y >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    if (x == MIN_64x64) {\\r\\n      require (\\r\\n        y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n        y <= 0x1000000000000000000000000000000000000000000000000\\r\\n      );\\r\\n      return -y << 63;\\r\\n    } else {\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x;\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int256 (absoluteResult);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    if (y == 0) return 0;\\r\\n\\r\\n    require (x >= 0);\\r\\n\\r\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n    uint256 hi = uint256 (x) * (y >> 128);\\r\\n\\r\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    hi <<= 64;\\r\\n\\r\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n    return hi + lo;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    int256 result = (int256 (x) << 64) / y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    bool negativeResult = false;\\r\\n    if (x < 0) {\\r\\n      x = -x; // We rely on overflow behavior here\\r\\n      negativeResult = true;\\r\\n    }\\r\\n    if (y < 0) {\\r\\n      y = -y; // We rely on overflow behavior here\\r\\n      negativeResult = !negativeResult;\\r\\n    }\\r\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    uint128 result = divuu (x, y);\\r\\n    require (result <= uint128 (MAX_64x64));\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return -x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return x < 0 ? -x : x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    require (x != 0);\\r\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 m = int256 (x) * int256 (y);\\r\\n    require (m >= 0);\\r\\n    require (m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n    return int128 (sqrtu (uint256 (m)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    uint256 absoluteResult;\\r\\n    bool negativeResult = false;\\r\\n    if (x >= 0) {\\r\\n      absoluteResult = powu (uint256 (x) << 63, y);\\r\\n    } else {\\r\\n      // We rely on overflow behavior here\\r\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\r\\n      negativeResult = y & 1 > 0;\\r\\n    }\\r\\n\\r\\n    absoluteResult >>= 63;\\r\\n\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    require (x >= 0);\\r\\n    return int128 (sqrtu (uint256 (x) << 64));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    int256 msb = 0;\\r\\n    int256 xc = x;\\r\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n    int256 result = msb - 64 << 64;\\r\\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\\r\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n      ux *= ux;\\r\\n      uint256 b = ux >> 255;\\r\\n      ux >>= 127 + b;\\r\\n      result += bit * int256 (b);\\r\\n    }\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    return int128 (\\r\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n    if (x & 0x8000000000000000 > 0)\\r\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n    if (x & 0x4000000000000000 > 0)\\r\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n    if (x & 0x2000000000000000 > 0)\\r\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n    if (x & 0x1000000000000000 > 0)\\r\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n    if (x & 0x800000000000000 > 0)\\r\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n    if (x & 0x400000000000000 > 0)\\r\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n    if (x & 0x200000000000000 > 0)\\r\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n    if (x & 0x100000000000000 > 0)\\r\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n    if (x & 0x80000000000000 > 0)\\r\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n    if (x & 0x40000000000000 > 0)\\r\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n    if (x & 0x20000000000000 > 0)\\r\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n    if (x & 0x10000000000000 > 0)\\r\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n    if (x & 0x8000000000000 > 0)\\r\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n    if (x & 0x4000000000000 > 0)\\r\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n    if (x & 0x2000000000000 > 0)\\r\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n    if (x & 0x1000000000000 > 0)\\r\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n    if (x & 0x800000000000 > 0)\\r\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n    if (x & 0x400000000000 > 0)\\r\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n    if (x & 0x200000000000 > 0)\\r\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n    if (x & 0x100000000000 > 0)\\r\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n    if (x & 0x80000000000 > 0)\\r\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n    if (x & 0x40000000000 > 0)\\r\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n    if (x & 0x20000000000 > 0)\\r\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n    if (x & 0x10000000000 > 0)\\r\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n    if (x & 0x8000000000 > 0)\\r\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n    if (x & 0x4000000000 > 0)\\r\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n    if (x & 0x2000000000 > 0)\\r\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n    if (x & 0x1000000000 > 0)\\r\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n    if (x & 0x800000000 > 0)\\r\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n    if (x & 0x400000000 > 0)\\r\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n    if (x & 0x200000000 > 0)\\r\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n    if (x & 0x100000000 > 0)\\r\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n    if (x & 0x80000000 > 0)\\r\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n    if (x & 0x40000000 > 0)\\r\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n    if (x & 0x20000000 > 0)\\r\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n    if (x & 0x10000000 > 0)\\r\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n    if (x & 0x8000000 > 0)\\r\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n    if (x & 0x4000000 > 0)\\r\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n    if (x & 0x2000000 > 0)\\r\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n    if (x & 0x1000000 > 0)\\r\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n    if (x & 0x800000 > 0)\\r\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n    if (x & 0x400000 > 0)\\r\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n    if (x & 0x200000 > 0)\\r\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n    if (x & 0x100000 > 0)\\r\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n    if (x & 0x80000 > 0)\\r\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n    if (x & 0x40000 > 0)\\r\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n    if (x & 0x20000 > 0)\\r\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n    if (x & 0x10000 > 0)\\r\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n    if (x & 0x8000 > 0)\\r\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n    if (x & 0x4000 > 0)\\r\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n    if (x & 0x2000 > 0)\\r\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n    if (x & 0x1000 > 0)\\r\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n    if (x & 0x800 > 0)\\r\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n    if (x & 0x400 > 0)\\r\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n    if (x & 0x200 > 0)\\r\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n    if (x & 0x100 > 0)\\r\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n    if (x & 0x80 > 0)\\r\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n    if (x & 0x40 > 0)\\r\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n    if (x & 0x20 > 0)\\r\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n    if (x & 0x10 > 0)\\r\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n    if (x & 0x8 > 0)\\r\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n    if (x & 0x4 > 0)\\r\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n    if (x & 0x2 > 0)\\r\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n    if (x & 0x1 > 0)\\r\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n    result >>= uint256 (63 - (x >> 64));\\r\\n    require (result <= uint256 (MAX_64x64));\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    return exp_2 (int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    uint256 result;\\r\\n\\r\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n      result = (x << 64) / y;\\r\\n    else {\\r\\n      uint256 msb = 192;\\r\\n      uint256 xc = x >> 192;\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 hi = result * (y >> 128);\\r\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 xh = x >> 192;\\r\\n      uint256 xl = x << 64;\\r\\n\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n      lo = hi << 128;\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n      assert (xh == hi >> 128);\\r\\n\\r\\n      result += xl / y;\\r\\n    }\\r\\n\\r\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    return uint128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\r\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 129.127-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return unsigned 129.127-bit fixed point number\\r\\n   */\\r\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\r\\n    if (y == 0) return 0x80000000000000000000000000000000;\\r\\n    else if (x == 0) return 0;\\r\\n    else {\\r\\n      int256 msb = 0;\\r\\n      uint256 xc = x;\\r\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 xe = msb - 127;\\r\\n      if (xe > 0) x >>= uint256 (xe);\\r\\n      else x <<= uint256 (-xe);\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n      int256 re = 0;\\r\\n\\r\\n      while (y > 0) {\\r\\n        if (y & 1 > 0) {\\r\\n          result = result * x;\\r\\n          y -= 1;\\r\\n          re += xe;\\r\\n          if (result >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            result >>= 128;\\r\\n            re += 1;\\r\\n          } else result >>= 127;\\r\\n          if (re < -127) return 0; // Underflow\\r\\n          require (re < 128); // Overflow\\r\\n        } else {\\r\\n          x = x * x;\\r\\n          y >>= 1;\\r\\n          xe <<= 1;\\r\\n          if (x >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            x >>= 128;\\r\\n            xe += 1;\\r\\n          } else x >>= 127;\\r\\n          if (xe < -127) return 0; // Underflow\\r\\n          require (xe < 128); // Overflow\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (re > 0) result <<= uint256 (re);\\r\\n      else if (re < 0) result >>= uint256 (-re);\\r\\n\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\r\\n    if (x == 0) return 0;\\r\\n    else {\\r\\n      uint256 xx = x;\\r\\n      uint256 r = 1;\\r\\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\r\\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\r\\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\r\\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\r\\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\r\\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\r\\n      if (xx >= 0x8) { r <<= 1; }\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n      uint256 r1 = x / r;\\r\\n      return uint128 (r < r1 ? r : r1);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7367b14ee5d9088255f391fdec40a47bf6f7cad273fdca880038a04d7d4011b5\",\"license\":\"BSD-4-Clause\"},\"contracts/PrecogMarketV7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"./ABDKMath64x64.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PrecogMarketV7: An implementation for liquidity-sensitive LMSR market maker in Solidity\\r\\n * @author Marto (https://github.com/0xMarto)\\r\\n * @dev Feel free to make any adjustments to the code (DMs are open @0xMarto)\\r\\n */\\r\\ncontract PrecogMarketV7 {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct SharesInfo {\\r\\n        uint256 buys;  // Total amount of Buys\\r\\n        uint256 sells;  // Total amount of Sells\\r\\n        uint256 deposited; // Total collateral-in on Buys\\r\\n        uint256 withdrew; // Total collateral-Out on Sells\\r\\n        uint256 redeemed; // Total collateral-Out on Redeems\\r\\n        mapping(uint256 => uint256) balances;  // Shares balances by outcome (has an custom getter)\\r\\n    }\\r\\n\\r\\n    // Public variables\\r\\n    address public owner;  // Should be the PrecogMaster contract\\r\\n    address public token;  // Collateral to Buy and redeem shares\\r\\n    uint256 public id;  // Unique Identifier for the market\\r\\n    uint256 public totalOutcomes; // Amount of outcomes (2 usually mean 1=YES, 2=NO)\\r\\n    address public oracle;  // EOA or Contract in change to reportResults\\r\\n    uint256 public startTimestamp;  // Time when Buy/Sell shares are enabled\\r\\n    uint256 public endTimestamp;  // Time when Buy/Sell shares are disabled\\r\\n    uint256 public closeTimestamp;  // Time when results were reported\\r\\n    uint256 public result;  // Final outcome of the market (published by the oracle)\\r\\n    mapping(address => SharesInfo) public accountShares;  // Account shares balances and info\\r\\n\\r\\n    // Private variables\\r\\n    int128[] private shares;  // Amount of shares indexed by outcome (signed 64.64 bit fixed point number)\\r\\n    int128 private beta;  // LMSR market liquidity variable (signed 64.64 bit fixed point number)\\r\\n    int128 private alpha;  // Liquidity-Sensitive LMSR market variable (signed 64.64 bit fixed point number)\\r\\n    int128 private dust;  // Token leak mitigation variable used in share sells (signed 64.64 bit fixed point number)\\r\\n    int128 private currentCost;  // Current amount of liquidity in the market (signed 64.64 bit fixed point number)\\r\\n    int128 private totalShares;  // Total amount of shares of all outcomes (signed 64.64 bit fixed point number)\\r\\n    uint256 private totalBuys;  // Total amount of buys made from all account\\r\\n    uint256 private totalSells;  // Total amount of sells made from all account\\r\\n    bool private marketSetup;  // Flag that indicates that a market was configured correctly\\r\\n    bool private internalCall;  // Flag that indicates that the current call is internal\\r\\n\\r\\n    // Events emitted\\r\\n    event SharesBought(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenIn);\\r\\n    event SharesSold(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\\r\\n    event SharesRedeemed(address indexed account, uint256 indexed outcome, uint256 amount, uint256 tokenOut);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyAfterSetup {\\r\\n        require(marketSetup == true, \\\"Not setup\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOrInternal() {\\r\\n        require(msg.sender == owner || internalCall, \\\"Only owner or self\\\");\\r\\n        _;\\r\\n        internalCall = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyOracle() {\\r\\n        require(msg.sender == oracle, \\\"Only oracle\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor like function for the market maker\\r\\n     * @param _token ERC-20 token will be used to purchase and redeem rewards for this Market\\r\\n     */\\r\\n    function initialize(address _token) public {\\r\\n        require(owner == address(0) && token == address(0), \\\"Already initialized\\\");\\r\\n        owner = msg.sender;\\r\\n        token = _token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets up the market with the specified parameters\\r\\n     * @param _id The unique identifier for the market\\r\\n     * @param _oracle The address of the oracle that will report results\\r\\n     * @param _totalOutcomes The number of possible outcomes for the market\\r\\n     * @param _subsidy The initial funding used to seed the market (defined on initialized token)\\r\\n     * @param _overround The AMM profit margin in basis points (bps) [recommended: (100 * _totalOutcomes)]\\r\\n     */\\r\\n    function setup(uint _id, address _oracle, uint _totalOutcomes, uint _subsidy, uint _overround) public onlyOwner {\\r\\n        require(!marketSetup, \\\"Already setup\\\");\\r\\n        require(_overround > 0, \\\"Unsupported overround\\\");\\r\\n        require(_totalOutcomes > 0, \\\"Unsupported outcomes\\\");\\r\\n\\r\\n        // Get initial funding tokens from sender\\r\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _subsidy);\\r\\n\\r\\n        // Save basic parameters\\r\\n        id = _id;\\r\\n        oracle = _oracle;\\r\\n        totalOutcomes = _totalOutcomes;\\r\\n\\r\\n        // Calculate initialization variables\\r\\n        int128 initialSubsidy = getTokenEth(token, _subsidy);\\r\\n        int128 n = ABDKMath.fromUInt(_totalOutcomes);\\r\\n        int128 overround = ABDKMath.divu(_overround, 10_000); // if the overround is too low the exp function overflows\\r\\n        alpha = ABDKMath.div(overround, ABDKMath.mul(n, ABDKMath.ln(n)));\\r\\n        beta = ABDKMath.mul(ABDKMath.mul(initialSubsidy, n), alpha);\\r\\n        shares = new int128[](totalOutcomes.add(1));\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            shares[outcome] = initialSubsidy;\\r\\n            totalShares = ABDKMath.add(totalShares, initialSubsidy);\\r\\n        }\\r\\n\\r\\n        // Initialize token leak mitigation of 0.001% (could be a setup parameter in the future)\\r\\n        // Note: Needed to avoid leaks due to rounding errors on math logarithmic and exponential approximations\\r\\n        dust = ABDKMath.fromUInt(100_000);  // 100k as signed 64.64 bit fixed point\\r\\n\\r\\n        // Register successful initialization\\r\\n        marketSetup = true;\\r\\n\\r\\n        // Optimization: pre calculate current cost to avoid extra calculation on buys and sells\\r\\n        currentCost = cost();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Buys outcome shares for the specified outcome\\r\\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param _amount The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\\r\\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\\r\\n     */\\r\\n    function buy(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 tokenCost) {\\r\\n        // Send BUY call to internal function with msg sender\\r\\n        internalCall = true;\\r\\n        return _buy(_outcome, _amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows buying market shares for a specified account (limited to only Self or Owner)\\r\\n     * @param _outcome The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param _amount The number of outcome shares to buy (as a signed 64.64-bit fixed point number)\\r\\n     * @param _account The address of the buyer\\r\\n     * @return tokenCost The total token amount used for buying the specified amount of outcome shares\\r\\n     */\\r\\n    function _buy(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal\\r\\n    returns (uint256 tokenCost) {\\r\\n        require(_outcome > 0 && _outcome <= totalOutcomes, \\\"Invalid outcome\\\");\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(block.timestamp >= startTimestamp, \\\"Market not started\\\");\\r\\n        require(endTimestamp == 0 || block.timestamp <= endTimestamp, \\\"Market already ended\\\");\\r\\n        require(closeTimestamp == 0, \\\"Market already closed\\\");\\r\\n\\r\\n        // Add amount of shares to be bought from individual and total shares counters\\r\\n        shares[_outcome] = ABDKMath.add(shares[_outcome], _amount);\\r\\n        totalShares = ABDKMath.add(totalShares, _amount);\\r\\n\\r\\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\\r\\n        beta = ABDKMath.mul(totalShares, alpha);\\r\\n\\r\\n        // Calculate new current cost and price to pay. After that, update current cost variable\\r\\n        int128 sumTotal;\\r\\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\\r\\n        }\\r\\n        int128 newCost = ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\\r\\n        int128 deltaCost = ABDKMath.sub(newCost, currentCost);\\r\\n        currentCost = newCost;\\r\\n\\r\\n        // Get amount of tokens from sender (as current payment)\\r\\n        tokenCost = getTokenWei(token, deltaCost);\\r\\n        require(tokenCost > 0, \\\"Invalid cost\\\");\\r\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), tokenCost);\\r\\n        uint outcomeShares = getTokenWei(token, _amount);\\r\\n\\r\\n        // Register BUY in market total and Account details\\r\\n        totalBuys = totalBuys.add(1);\\r\\n        accountShares[_account].buys = accountShares[_account].buys.add(1);\\r\\n        accountShares[_account].deposited = accountShares[_account].deposited.add(tokenCost);\\r\\n        accountShares[_account].balances[_outcome] = accountShares[_account].balances[_outcome].add(outcomeShares);\\r\\n\\r\\n        emit SharesBought(_account, _outcome, outcomeShares, tokenCost);\\r\\n        return tokenCost;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sells outcome shares for the specified outcome\\r\\n     * @param _outcome The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param _amount The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\\r\\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\\r\\n     */\\r\\n    function sell(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 tokenReturn) {\\r\\n        // Send SELL call to internal function\\r\\n        internalCall = true;\\r\\n        return _sell(_outcome, _amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows selling market shares from a specified account (limited to only Self or Owner)\\r\\n     * @param _outcome The outcome for which shares are being sold (e.g.: 1 for YES, 2 for NO)\\r\\n     * @param _amount The number of outcome shares to sell (as a signed 64.64-bit fixed point number)\\r\\n     * @param _account The address of the seller\\r\\n     * @return tokenReturn The total amount of tokens received from selling the outcome shares\\r\\n     */\\r\\n    function _sell(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrInternal\\r\\n    returns (uint256 tokenReturn) {\\r\\n        require(_outcome > 0 && _outcome <= totalOutcomes, \\\"Invalid outcome\\\");\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(block.timestamp >= startTimestamp, \\\"Market not started\\\");\\r\\n        require(endTimestamp == 0 || block.timestamp <= endTimestamp, \\\"Market already ended\\\");\\r\\n        require(closeTimestamp == 0, \\\"Market already closed\\\");\\r\\n\\r\\n        // Remove amount of shares to be sold from individual and total shares counters\\r\\n        shares[_outcome] = ABDKMath.sub(shares[_outcome], _amount);\\r\\n        totalShares = ABDKMath.sub(totalShares, _amount);\\r\\n\\r\\n        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)\\r\\n        beta = ABDKMath.mul(totalShares, alpha);\\r\\n\\r\\n        // Calculate new cost and tokens to return. After that, update current cost variable\\r\\n        int128 sumTotal;\\r\\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\\r\\n        }\\r\\n        int128 newCost = ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\\r\\n        int128 deltaCost = ABDKMath.sub(currentCost, newCost);\\r\\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // Token leak mitigation\\r\\n        currentCost = newCost;\\r\\n\\r\\n        // Calculate return amount of token to send\\r\\n        tokenReturn = getTokenWei(token, ABDKMath.sub(deltaCost, deltaDust));\\r\\n\\r\\n        require(tokenReturn > 0, \\\"Invalid return\\\");\\r\\n        uint outcomeShares = getTokenWei(token, _amount);\\r\\n\\r\\n        // Check that the received account have the amount of shares to sell\\r\\n        require(accountShares[_account].balances[_outcome] >= outcomeShares, \\\"Insufficient balance\\\");\\r\\n\\r\\n        // Register SELL in market total and Account details\\r\\n        totalSells = totalSells.add(1);\\r\\n        accountShares[_account].sells = accountShares[_account].sells.add(1);\\r\\n        accountShares[_account].withdrew = accountShares[_account].withdrew.add(tokenReturn);\\r\\n        accountShares[_account].balances[_outcome] = accountShares[_account].balances[_outcome].sub(outcomeShares);\\r\\n\\r\\n        // Transfer collateral tokens to received account\\r\\n        IERC20(token).safeTransfer(_account, tokenReturn);\\r\\n\\r\\n        emit SharesSold(_account, _outcome, outcomeShares, tokenReturn);\\r\\n        return tokenReturn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the start and end timestamps for the market (limited to only owner)\\r\\n     * @param _startTimestamp The timestamp when the market starts allowing trading\\r\\n     * @param _endTimestamp The timestamp when the market stops allowing trading\\r\\n     */\\r\\n    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) public onlyOwner {\\r\\n        startTimestamp = _startTimestamp;\\r\\n        endTimestamp = _endTimestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the oracle address of the market (limited to only owner)\\r\\n     * @param _newOracle The address of the EOA or contract that can close the market\\r\\n     */\\r\\n    function updateOracle(address _newOracle) public onlyOwner {\\r\\n        require(_newOracle != address(0), \\\"Invalid new oracle\\\");\\r\\n        oracle = _newOracle;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reports the result of the market (limited to only Oracle)\\r\\n     * @param _id The unique identifier of the market\\r\\n     * @param _outcome The outcome that is reported as the result of the market\\r\\n     */\\r\\n    function reportResult(uint256 _id, uint256 _outcome) public onlyOracle {\\r\\n        // Validate received inputs\\r\\n        require(_id == id, \\\"Invalid market\\\");\\r\\n        require(_outcome > 0 && _outcome <= totalOutcomes, \\\"Invalid outcome\\\");\\r\\n\\r\\n        // Check current state of the market\\r\\n        require(block.timestamp > endTimestamp, \\\"Market not ended\\\");\\r\\n        require(closeTimestamp == 0, \\\"Market already closed\\\");\\r\\n\\r\\n        // Register reported results and register current time\\r\\n        result = _outcome;\\r\\n        closeTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems the current sender shares for the result of the market\\r\\n     * @return redeemedShares The number of shares redeemed\\r\\n     */\\r\\n    function redeemShares() public onlyAfterSetup returns (uint256 redeemedShares) {\\r\\n        internalCall = true;\\r\\n        return _redeem(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems shares in batch for multiple accounts  (limited to only Oracle)\\r\\n     * @param _accounts The list of accounts to redeem shares for\\r\\n     * @dev The list of accounts could be calculated using the \\\"SharesBought\\\" event\\r\\n     * @return redeems The number of successful redeems\\r\\n     */\\r\\n    function redeemBatch(address[] memory _accounts) public onlyAfterSetup onlyOracle returns (uint256 redeems) {\\r\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\r\\n            internalCall = true;\\r\\n            try this._redeem(_accounts[i]) {\\r\\n                redeems.add(1);\\r\\n            } catch {\\r\\n                // CASE: `_redeem` call reverted (expected if the account don't have redeemable shares)\\r\\n                internalCall = false; // Disable internal just incase of revert\\r\\n            }\\r\\n        }\\r\\n        return redeems;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems the received account shares for the result of the market (limited to only Self or Owner)\\r\\n     * @param _account The address of the account with shares of the market\\r\\n     * @return redeemedShares The number of shares redeemed\\r\\n     */\\r\\n    function _redeem(address _account) public onlyOwnerOrInternal returns (uint256 redeemedShares) {\\r\\n        // Check current state of the market and received account\\r\\n        require(closeTimestamp > 0, \\\"Market not closed\\\");\\r\\n        require(accountShares[_account].redeemed == 0, \\\"Shares already redeemed\\\");\\r\\n\\r\\n        // Get amount of shares to be redeemed for received account\\r\\n        redeemedShares = accountShares[_account].balances[result];\\r\\n        require(redeemedShares > 0, \\\"Nothing to redeem\\\");\\r\\n\\r\\n        // Register amount of shares redeemed and send corresponding collateral tokens (ratio 1:1)\\r\\n        accountShares[_account].redeemed = redeemedShares;\\r\\n        IERC20(token).safeTransfer(_account, redeemedShares);\\r\\n\\r\\n        emit SharesRedeemed(_account, result, redeemedShares, redeemedShares);\\r\\n        return redeemedShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws any remaining liquidity from the market (limited to only owner)\\r\\n     * @param _token The address of the ERC-20 token to withdraw\\r\\n     */\\r\\n    function withdraw(address _token) public onlyAfterSetup onlyOwner {\\r\\n        require(closeTimestamp > 0, \\\"Market not closed\\\");\\r\\n        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers the ownership of the contract to a new owner (limited to only current owner)\\r\\n     * @param _newOwner The address of the new owner\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\\r\\n        require(_newOwner != address(0), \\\"Invalid new owner\\\");\\r\\n        emit OwnershipTransferred(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the total collateral spent in the market\\r\\n     * @return totalCost The total cost in the form of a signed 64.64-bit fixed point number\\r\\n     */\\r\\n    function cost() public view onlyAfterSetup returns (int128 totalCost) {\\r\\n        int128 sumTotal;\\r\\n        for (uint outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(shares[outcome], beta)));\\r\\n        }\\r\\n        return ABDKMath.mul(beta, ABDKMath.ln(sumTotal));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the cost of buying the specified amount of outcome shares\\r\\n     * @param _outcome The outcome for which shares are being bought\\r\\n     * @param _amount The number of outcome shares to buy (as signed 64.64-bit fixed point number)\\r\\n     * @return tokenCost The token cost amount (as a signed 64.64-bit fixed point number)\\r\\n     */\\r\\n    function buyPrice(uint256 _outcome, int128 _amount) public view returns (int128 tokenCost) {\\r\\n        return ABDKMath.sub(costAfterBuy(_outcome, _amount), currentCost);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the return from selling the specified amount of outcome shares\\r\\n     * @param _outcome The outcome for which shares are being sold\\r\\n     * @param _amount The number of outcome shares to sell (as signed 64.64-bit fixed point number)\\r\\n     * @return tokenReturn The token return amount (as a signed 64.64-bit fixed point number)\\r\\n     */\\r\\n    function sellPrice(uint256 _outcome, int128 _amount) public view returns (int128 tokenReturn) {\\r\\n        int128 deltaCost = ABDKMath.sub(currentCost, costAfterSell(_outcome, _amount));\\r\\n        int128 deltaDust = ABDKMath.div(deltaCost, dust);  // token leak mitigation\\r\\n        return ABDKMath.sub(deltaCost, deltaDust);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current market state information\\r\\n     * @return totalShares The current total shares minted for all outcomes of the market\\r\\n     * @return sharesBalances All shares balances (indexed by outcome)\\r\\n     * @return currentCost The current liquidity of the market\\r\\n     * @return totalBuys Buys counter of the market\\r\\n     * @return totalSells Sells counter of the market\\r\\n     */\\r\\n    function getMarketInfo() public view returns (int128, int128[] memory, int128, uint256, uint256) {\\r\\n        int128[] memory sharesBalances = new int128[](totalOutcomes.add(1));\\r\\n\\r\\n        if (!marketSetup) {\\r\\n            return (0, sharesBalances, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        // Populate shares balances based on total outcomes configured for this market\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            sharesBalances[outcome] = shares[outcome];\\r\\n        }\\r\\n\\r\\n        return (totalShares, sharesBalances, currentCost, totalBuys, totalSells);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets current market buy and sell prices for all outcomes\\r\\n     * @dev Helper function to fast calculate market prediction and spreads\\r\\n     * @return buyPrices buy price of 1 share for all outcomes (indexed by outcome)\\r\\n     * @return sellPrices sell price of 1 share for all outcomes (indexed by outcome)\\r\\n     */\\r\\n    function getPrices() public view returns (uint256[] memory buyPrices, uint256[] memory sellPrices) {\\r\\n        buyPrices = new uint256[](totalOutcomes.add(1));\\r\\n        sellPrices = new uint256[](totalOutcomes.add(1));\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            int128 oneShare = 18446744073709551616;  // 1 share as int128 (signed 64.64 bit fixed point number)\\r\\n            buyPrices[outcome] = getTokenWei(token, buyPrice(outcome, oneShare));\\r\\n            sellPrices[outcome] = getTokenWei(token, sellPrice(outcome, oneShare));\\r\\n        }\\r\\n        return (buyPrices, sellPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the amount of shares that an account owns for all outcomes\\r\\n     * @param _account The address of the account with shares of the market\\r\\n     * @return balances The balances of shares for all outcomes (indexed by outcome)\\r\\n     */\\r\\n    function getAccountOutcomeBalances(address _account) public view returns (uint256[] memory balances) {\\r\\n        balances = new uint256[](totalOutcomes.add(1));\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            balances[outcome] = accountShares[_account].balances[outcome];\\r\\n        }\\r\\n        return balances;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Gets the total collateral spent in the market after a received BUY trade\\r\\n     *  @dev Internal function used to calculate buy price\\r\\n     */\\r\\n    function costAfterBuy(uint256 _outcome, int128 _amount) internal view returns (int128) {\\r\\n        int128 newSumTotal;\\r\\n        int128[] memory newShares = new int128[](shares.length);\\r\\n        int128 newTotalShares = totalShares;\\r\\n\\r\\n        // Add new amount of shares to received outcome\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            if (outcome == _outcome) {\\r\\n                newShares[outcome] = ABDKMath.add(shares[outcome], _amount);\\r\\n                newTotalShares = ABDKMath.add(newTotalShares, _amount);\\r\\n            } else {\\r\\n                newShares[outcome] = shares[outcome];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Calculate new cost based on newTotalShares and newQ values\\r\\n        int128 newBeta = ABDKMath.mul(newTotalShares, alpha);\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newShares[outcome], newBeta)));\\r\\n        }\\r\\n        return ABDKMath.mul(newBeta, ABDKMath.ln(newSumTotal));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Gets the total collateral spent in the market after a received SELL trade\\r\\n     *  @dev Internal function used to calculate sell price\\r\\n     */\\r\\n    function costAfterSell(uint256 _outcome, int128 _amount) internal view returns (int128) {\\r\\n        int128 newSumTotal;\\r\\n        int128[] memory newShares = new int128[](shares.length);\\r\\n        int128 newTotalShares = totalShares;\\r\\n\\r\\n        // Add new amount of shares to received outcome\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            if (outcome == _outcome) {\\r\\n                newShares[outcome] = ABDKMath.sub(shares[outcome], _amount);\\r\\n                newTotalShares = ABDKMath.sub(newTotalShares, _amount);\\r\\n            } else {\\r\\n                newShares[outcome] = shares[outcome];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Calculate new cost based on newTotalShares and newShares values\\r\\n        int128 newBeta = ABDKMath.mul(newTotalShares, alpha);\\r\\n        for (uint256 outcome = 1; outcome <= totalOutcomes; outcome++) {\\r\\n            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newShares[outcome], newBeta)));\\r\\n        }\\r\\n        return ABDKMath.mul(newBeta, ABDKMath.ln(newSumTotal));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Translate int128 (signed 64.64 bit fixed point number) [in ether] to uint256 token amount [in wei]\\r\\n     *  @dev Internal function used to transform encoded number values\\r\\n     */\\r\\n    function getTokenWei(address _token, int128 _amount) internal view returns (uint256) {\\r\\n        uint256 decimals = ERC20(_token).decimals();\\r\\n        return ABDKMath.mulu(_amount, 10 ** decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice Translate uint256 token amount [in wei] to int128 (signed 64.64 bit fixed point number) [in ether]\\r\\n     *  @dev Internal function used to transform encoded number values\\r\\n     */\\r\\n    function getTokenEth(address _token, uint256 _amount) internal view returns (int128) {\\r\\n        uint256 decimals = ERC20(_token).decimals();\\r\\n        return ABDKMath.divu(_amount, 10 ** decimals);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x981e886da667db4d138c76690111107fe8c78e7bee315fbc1afe57248fb7d6b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613f35806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063bd9a548b116100a2578063e6fd48bc11610071578063e6fd48bc146106ef578063f2fde38b146106f7578063f76da1d91461071d578063fc0c546a14610743576101da565b8063bd9a548b146105d0578063c4d66de814610671578063cae3260614610697578063e6b2c87c146106cc576101da565b8063ae92a93d116100de578063ae92a93d146104f7578063af640d0f1461051d578063b460481d14610525578063bc0e610a1461052d576101da565b80638da5cb5b146104c4578063a85adeab146104cc578063ad094f3d146104d4576101da565b806351cff8d91161017c578063653721471161014b578063653721471461045b57806377142c08146104635780637dc0d1d01461046b578063898b51a71461048f576101da565b806351cff8d91461038057806352c8b2f9146103a6578063535f02ee146103f75780635467a7511461041d576101da565b80631cb44dfc116101b85780631cb44dfc1461028e57806323341a05146102b65780633dcb8b81146103345780633f7361eb1461035a576101da565b8063052d7c00146101df57806305b4b371146101f957806313faede61461026f575b600080fd5b6101e761074b565b60408051918252519081900360200190f35b61021f6004803603602081101561020f57600080fd5b50356001600160a01b0316610751565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561025b578181015183820152602001610243565b505050509050019250505060405180910390f35b610277610800565b60408051600f9290920b8252519081900360200190f35b6102b4600480360360208110156102a457600080fd5b50356001600160a01b03166108d1565b005b6102be6109a7565b6040518086600f0b81526020018060200185600f0b8152602001848152602001838152602001828103825286818151815260200191508051906020019060200280838360005b8381101561031c578181015183820152602001610304565b50505050905001965050505050505060405180910390f35b6102776004803603604081101561034a57600080fd5b5080359060200135600f0b610abe565b6101e76004803603602081101561037057600080fd5b50356001600160a01b0316610b11565b6102b46004803603602081101561039657600080fd5b50356001600160a01b0316610d3d565b6103cc600480360360208110156103bc57600080fd5b50356001600160a01b0316610eb9565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6102776004803603604081101561040d57600080fd5b5080359060200135600f0b610ee8565b6102b4600480360360a081101561043357600080fd5b508035906001600160a01b036020820135169060408101359060608101359060800135610f10565b6101e76112da565b6101e76112e0565b6104736112e6565b604080516001600160a01b039092168252519081900360200190f35b6101e7600480360360608110156104a557600080fd5b508035906020810135600f0b90604001356001600160a01b03166112f5565b6104736118f5565b6101e7611904565b6102b4600480360360408110156104ea57600080fd5b508035906020013561190a565b6101e76004803603604081101561050d57600080fd5b5080359060200135600f0b611ab7565b6101e7611b1c565b6101e7611b22565b6101e76004803603602081101561054357600080fd5b81019060208101813564010000000081111561055e57600080fd5b82018360208201111561057057600080fd5b8035906020019184602083028401116401000000008311171561059257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611b8a945050505050565b6105d8611ce9565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561061c578181015183820152602001610604565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561065b578181015183820152602001610643565b5050505090500194505050505060405180910390f35b6102b46004803603602081101561068757600080fd5b50356001600160a01b0316611e1e565b6101e7600480360360608110156106ad57600080fd5b508035906020810135600f0b90604001356001600160a01b0316611ece565b6102b4600480360360408110156106e257600080fd5b5080359060200135612421565b6101e7612478565b6102b46004803603602081101561070d57600080fd5b50356001600160a01b031661247e565b6101e76004803603604081101561073357600080fd5b5080359060200135600f0b61258d565b6104736125f2565b60075481565b600354606090610762906001612601565b67ffffffffffffffff8111801561077857600080fd5b506040519080825280602002602001820160405280156107a2578160200160208202803683370190505b50905060015b60035481116107f9576001600160a01b038316600090815260096020908152604080832084845260050190915290205482518390839081106107e657fe5b60209081029190910101526001016107a8565b505b919050565b60105460009060ff16151560011461084b576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b600060015b60035481116108b2576108a8826108a361089e600a858154811061087057fe5b60009182526020909120600282040154600b5460019092166010026101000a9004600f90810b91900b61265b565b6126c0565b61271a565b9150600101610850565b50600b546108cb90600f0b6108c68361275f565b612799565b91505090565b6000546001600160a01b0316331461091d576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b6001600160a01b038116610978576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206e6577206f7261636c650000000000000000000000000000604482015290519081900360640190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600060606000806000806109c7600160035461260190919063ffffffff16565b67ffffffffffffffff811180156109dd57600080fd5b50604051908082528060200260200182016040528015610a07578160200160208202803683370190505b5060105490915060ff16610a2957600095509350849250829150819050610ab7565b60015b6003548111610a8e57600a8181548110610a4257fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b828281518110610a7157fe5b600f92830b90920b60209283029190910190910152600101610a2c565b50600d54600c54600e54600f805493810b9950939750600160801b90910490920b945090925090505b9091929394565b600c546000908190610ae390600160801b9004600f0b610ade86866127e1565b61297e565b600c54909150600090610afa908390600f0b61265b565b9050610b06828261297e565b925050505b92915050565b600080546001600160a01b0316331480610b325750601054610100900460ff165b610b78576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b600060075411610bcf576040805162461bcd60e51b815260206004820152601160248201527f4d61726b6574206e6f7420636c6f736564000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526009602052604090206004015415610c3d576040805162461bcd60e51b815260206004820152601760248201527f53686172657320616c72656164792072656465656d6564000000000000000000604482015290519081900360640190fd5b506001600160a01b0381166000908152600960209081526040808320600854845260050190915290205480610cb9576040805162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038083166000908152600960205260409020600401829055600154610ce7911683836129c3565b600854604080518381526020810184905281516001600160a01b038616927fc2c19174f35fcb7370641b55802c8f596e4827983eefbb49c33373ac0cad5a1d928290030190a36010805461ff0019169055919050565b60105460ff161515600114610d85576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6000546001600160a01b03163314610dd1576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b600060075411610e28576040805162461bcd60e51b815260206004820152601160248201527f4d61726b6574206e6f7420636c6f736564000000000000000000000000000000604482015290519081900360640190fd5b610eb633826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d6020811015610ea357600080fd5b50516001600160a01b03841691906129c3565b50565b600960205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6000610f09610ef78484612a48565b600c54600160801b9004600f0b61297e565b9392505050565b6000546001600160a01b03163314610f5c576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b60105460ff1615610fb4576040805162461bcd60e51b815260206004820152600d60248201527f416c726561647920736574757000000000000000000000000000000000000000604482015290519081900360640190fd5b60008111611009576040805162461bcd60e51b815260206004820152601560248201527f556e737570706f72746564206f766572726f756e640000000000000000000000604482015290519081900360640190fd5b6000831161105e576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206f7574636f6d6573000000000000000000000000604482015290519081900360640190fd5b600154611076906001600160a01b0316333085612bbe565b60028590556004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038681169190911790915560038490556001546000916110be911684612c4c565b905060006110cb85612ccf565b905060006110db84612710612ced565b90506110f3816110ee846108c68661275f565b61265b565b600b60106101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061113b6111298484612799565b600b54600160801b9004600f0b612799565b600b8054600f9290920b6001600160801b03166001600160801b031990921691909117905560035461116e906001612601565b67ffffffffffffffff8111801561118457600080fd5b506040519080825280602002602001820160405280156111ae578160200160208202803683370190505b5080516111c391600a91602090910190613e05565b5060015b60035481116112605783600a82815481106111de57fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611233600d60009054906101000a9004600f0b8561271a565b600d8054600f9290920b6001600160801b03166001600160801b03199092169190911790556001016111c7565b5061126d620186a0612ccf565b600c8054600f9290920b6001600160801b03166001600160801b03199092169190911790556010805460ff191660011790556112a7610800565b600c60106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055505050505050505050565b60085481565b60035481565b6004546001600160a01b031681565b600080546001600160a01b03163314806113165750601054610100900460ff165b61135c576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b60008411801561136e57506003548411155b6113b1576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b600083600f0b13611409576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b600554421015611460576040805162461bcd60e51b815260206004820152601260248201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604482015290519081900360640190fd5b600654158061147157506006544211155b6114c2576040805162461bcd60e51b815260206004820152601460248201527f4d61726b657420616c726561647920656e646564000000000000000000000000604482015290519081900360640190fd5b60075415611517576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b611550600a858154811061152757fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8461297e565b600a858154811061155d57fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506115b2600d60009054906101000a9004600f0b8461297e565b600d80546001600160801b0319166001600160801b03600f93840b161790819055600b546115ed9291820b91600160801b909104900b612799565b600b8054600f9290920b6001600160801b03166001600160801b0319909216919091179055600060015b600354811161164157611637826108a361089e600a858154811061087057fe5b9150600101611617565b50600b5460009061165890600f0b6108c68461275f565b600c5490915060009061167590600160801b9004600f0b8361297e565b600c5490915060009061168c908390600f0b61265b565b600c8054600f86900b6001600160801b03908116600160801b0291161790556001549091506116cd906001600160a01b03166116c8848461297e565b612d2d565b945060008511611724576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c69642072657475726e000000000000000000000000000000000000604482015290519081900360640190fd5b60015460009061173d906001600160a01b031689612d2d565b6001600160a01b03881660009081526009602090815260408083208d84526005019091529020549091508111156117bb576040805162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b600f546117c9906001612601565b600f556001600160a01b03871660009081526009602052604090206001908101546117f391612601565b6001600160a01b03881660009081526009602052604090206001810191909155600301546118219087612601565b6001600160a01b038816600090815260096020908152604080832060038101949094558c835260059093019052205461185a9082612da8565b6001600160a01b0380891660009081526009602090815260408083208e8452600501909152902091909155600154611894911688886129c3565b88876001600160a01b03167f019eed797248695407e185a0977fa0dba8bbaaba6c2f6f4a8bdf6fb32e62ba238389604051808381526020018281526020019250505060405180910390a350505050506010805461ff00191690559392505050565b6000546001600160a01b031681565b60065481565b6004546001600160a01b03163314611957576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f7261636c6560a81b604482015290519081900360640190fd5b60025482146119ad576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206d61726b6574000000000000000000000000000000000000604482015290519081900360640190fd5b6000811180156119bf57506003548111155b611a02576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b6006544211611a58576040805162461bcd60e51b815260206004820152601060248201527f4d61726b6574206e6f7420656e64656400000000000000000000000000000000604482015290519081900360640190fd5b60075415611aad576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b6008555042600755565b60105460009060ff161515600114611b02576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6010805461ff001916610100179055610f098383336112f5565b60025481565b60105460009060ff161515600114611b6d576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6010805461ff001916610100179055611b8533610b11565b905090565b60105460009060ff161515600114611bd5576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6004546001600160a01b03163314611c22576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f7261636c6560a81b604482015290519081900360640190fd5b60005b82518110156107f9576010805461ff00191661010017905582513090633f7361eb90859084908110611c5357fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b158015611c9a57600080fd5b505af1925050508015611cbf57506040513d6020811015611cba57600080fd5b505160015b611cd3576010805461ff0019169055611ce1565b50611cdf826001612601565b505b600101611c25565b606080611d02600160035461260190919063ffffffff16565b67ffffffffffffffff81118015611d1857600080fd5b50604051908082528060200260200182016040528015611d42578160200160208202803683370190505b50600354909250611d54906001612601565b67ffffffffffffffff81118015611d6a57600080fd5b50604051908082528060200260200182016040528015611d94578160200160208202803683370190505b50905060015b6003548111611e19576001546801000000000000000090611dc8906001600160a01b03166116c88484610ee8565b848381518110611dd457fe5b6020908102919091010152600154611df9906001600160a01b03166116c88484610abe565b838381518110611e0557fe5b602090810291909101015250600101611d9a565b509091565b6000546001600160a01b0316158015611e4057506001546001600160a01b0316155b611e91576040805162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b600080543373ffffffffffffffffffffffffffffffffffffffff1991821617909155600180549091166001600160a01b0392909216919091179055565b600080546001600160a01b0316331480611eef5750601054610100900460ff165b611f35576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b600084118015611f4757506003548411155b611f8a576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b600083600f0b13611fe2576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b600554421015612039576040805162461bcd60e51b815260206004820152601260248201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604482015290519081900360640190fd5b600654158061204a57506006544211155b61209b576040805162461bcd60e51b815260206004820152601460248201527f4d61726b657420616c726561647920656e646564000000000000000000000000604482015290519081900360640190fd5b600754156120f0576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b612129600a858154811061210057fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8461271a565b600a858154811061213657fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061218b600d60009054906101000a9004600f0b8461271a565b600d80546001600160801b0319166001600160801b03600f93840b161790819055600b546121c69291820b91600160801b909104900b612799565b600b8054600f9290920b6001600160801b03166001600160801b0319909216919091179055600060015b600354811161221a57612210826108a361089e600a858154811061087057fe5b91506001016121f0565b50600b5460009061223190600f0b6108c68461275f565b9050600061224e82600c60109054906101000a9004600f0b61297e565b600c8054600f85900b6001600160801b03908116600160801b029116179055600154909150612286906001600160a01b031682612d2d565b9350600084116122dd576040805162461bcd60e51b815260206004820152600c60248201527f496e76616c696420636f73740000000000000000000000000000000000000000604482015290519081900360640190fd5b6001546122f5906001600160a01b0316333087612bbe565b60015460009061230e906001600160a01b031688612d2d565b600e5490915061231f906001612601565b600e556001600160a01b038616600090815260096020526040902054612346906001612601565b6001600160a01b03871660009081526009602052604090209081556002015461236f9086612601565b6001600160a01b038716600090815260096020908152604080832060028101949094558b83526005909301905220546123a89082612601565b6001600160a01b03871660008181526009602090815260408083208d845260050182529182902093909355805184815292830188905280518b937f849165c18b9d0fb161bcb145e4ab523d350e5c98f1dbbb1960331e7ee3ca676792908290030190a3505050506010805461ff00191690559392505050565b6000546001600160a01b0316331461246d576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b600591909155600655565b60055481565b6000546001600160a01b031633146124ca576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b6001600160a01b038116612525576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964206e6577206f776e6572000000000000000000000000000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60105460009060ff1615156001146125d8576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6010805461ff001916610100179055610f09838333611ece565b6001546001600160a01b031681565b600082820183811015610f09576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081600f0b6000141561266e57600080fd5b600082600f0b604085600f0b901b8161268357fe5b0590506f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff8113155b610f0957600080fd5b60006840000000000000000082600f0b126126da57600080fd5b683fffffffffffffffff1982600f0b12156126f7575060006107fb565b610b0b608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d612e05565b6000600f83810b9083900b016f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff811315610f0957600080fd5b60008082600f0b1361277057600080fd5b608061277b836138d8565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b6000600f83810b9083900b0260401d6f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff811315610f0957600080fd5b6000806000600a8054905067ffffffffffffffff8111801561280257600080fd5b5060405190808252806020026020018201604052801561282c578160200160208202803683370190505b50600d54909150600f0b60015b600354811161290d57868114156128b457612883600a828154811061285a57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8761297e565b83828151811061288f57fe5b6020026020010190600f0b9081600f0b815250506128ad828761297e565b9150612905565b600a81815481106128c157fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8382815181106128f057fe5b6020026020010190600f0b9081600f0b815250505b600101612839565b50600b54600090612929908390600160801b9004600f0b612799565b905060015b60035481116129655761295b856108a361089e87858151811061294d57fe5b60200260200101518661265b565b945060010161292e565b50612973816108c68661275f565b979650505050505050565b6000600f82810b9084900b036f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff811315610f0957600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612a439084906139bc565b505050565b6000806000600a8054905067ffffffffffffffff81118015612a6957600080fd5b50604051908082528060200260200182016040528015612a93578160200160208202803683370190505b50600d54909150600f0b60015b6003548111612b745786811415612b1b57612aea600a8281548110612ac157fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8761271a565b838281518110612af657fe5b6020026020010190600f0b9081600f0b81525050612b14828761271a565b9150612b6c565b600a8181548110612b2857fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b838281518110612b5757fe5b6020026020010190600f0b9081600f0b815250505b600101612aa0565b50600b54600090612b90908390600160801b9004600f0b612799565b905060015b600354811161296557612bb4856108a361089e87858151811061294d57fe5b9450600101612b95565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612c469085906139bc565b50505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c8857600080fd5b505afa158015612c9c573d6000803e3d6000fd5b505050506040513d6020811015612cb257600080fd5b505160ff169050612cc783600a83900a612ced565b949350505050565b6000677fffffffffffffff821115612ce657600080fd5b5060401b90565b600081612cf957600080fd5b6000612d058484613a6d565b90506f7fffffffffffffffffffffffffffffff6001600160801b0382161115610f0957600080fd5b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6957600080fd5b505afa158015612d7d573d6000803e3d6000fd5b505050506040513d6020811015612d9357600080fd5b505160ff169050612cc783600a83900a613bc8565b600082821115612dff576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006840000000000000000082600f0b12612e1f57600080fd5b683fffffffffffffffff1982600f0b1215612e3c575060006107fb565b6f8000000000000000000000000000000060006780000000000000008416600f0b1315612e7a5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315612ea7577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315612ed4577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315612f015770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315612f2e577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315612f5b57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315612f885770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b1315612fb557700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315612fe15770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b131561300d577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b131561303957700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315613065577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561309157700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156130bd5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156130e9577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156131155770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315613140577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b131561316b57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156131965770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b13156131c157700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156131ec5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315613217577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561324257700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b131561326d577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561329757700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156132c15770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b13156132eb577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156133155770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b131561333f577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561336957700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156133935770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b13156133bd57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156133e65770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b131561340f577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561343857700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613461577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561348a57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156134b35770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156134dc577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156135055770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b131561352d577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561355557700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b131561357d5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156135a557700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156135cd5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b13156135f5577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561361d57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613645577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561366c57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156136935770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156136ba577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156136e15770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613708577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561372f57700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156137565770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561377d57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156137a35770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b13156137c9577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156137ef57700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315613815577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b131561383b57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156138615770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315613887577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156138ad5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff811115610b0b57600080fd5b60008082600f0b136138e957600080fd5b6000600f83900b680100000000000000008112613908576040918201911d5b640100000000811261391c576020918201911d5b62010000811261392e576010918201911d5b610100811261393f576008918201911d5b6010811261394f576004918201911d5b6004811261395f576002918201911d5b6002811261396e576001820191505b603f19820160401b600f85900b607f8490031b6780000000000000005b60008113156139b15790800260ff81901c8281029390930192607f011c9060011d61398b565b509095945050505050565b6000613a11826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c419092919063ffffffff16565b805190915015612a4357808060200190516020811015613a3057600080fd5b5051612a435760405162461bcd60e51b815260040180806020018281038252602a815260200180613ed6602a913960400191505060405180910390fd5b600081613a7957600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff8411613aaf5782604085901b81613aa757fe5b049050613bb4565b60c084811c6401000000008110613ac8576020918201911c5b620100008110613ada576010918201911c5b6101008110613aeb576008918201911c5b60108110613afb576004918201911c5b60048110613b0b576002918201911c5b60028110613b1a576001820191505b60bf820360018603901c6001018260ff0387901b81613b3557fe5b0492506001600160801b03831115613b4c57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015613b78576001820391505b608084901b92900382811015613b8f576001820391505b829003608084901c8214613b9f57fe5b888181613ba857fe5b04870196505050505050505b6001600160801b03811115610f0957600080fd5b600081613bd757506000610b0b565b600083600f0b1215613be857600080fd5b600f83900b6001600160801b038316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff811115613c2857600080fd5b60401b8119811115613c3957600080fd5b019392505050565b6060612cc7848460008585613c5585613d5b565b613ca6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613ce45780518252601f199092019160209182019101613cc5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d46576040519150601f19603f3d011682016040523d82523d6000602084013e613d4b565b606091505b5091509150612973828286613d61565b3b151590565b60608315613d70575081610f09565b825115613d805782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613dca578181015183820152602001613db2565b50505050905090810190601f168015613df75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b82805482825590600052602060002090600101600290048101928215613eb05791602002820160005b83821115613e7b57835183826101000a8154816001600160801b030219169083600f0b6001600160801b031602179055509260200192601001602081600f01049283019260010302613e2e565b8015613eae5782816101000a8154906001600160801b030219169055601001602081600f01049283019260010302613e7b565b505b50613ebc929150613ec0565b5090565b5b80821115613ebc5760008155600101613ec156fe5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b34b432a8236d8e27b903341d9d6730bc46532e1e0221a145ea447a032a420ec64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063bd9a548b116100a2578063e6fd48bc11610071578063e6fd48bc146106ef578063f2fde38b146106f7578063f76da1d91461071d578063fc0c546a14610743576101da565b8063bd9a548b146105d0578063c4d66de814610671578063cae3260614610697578063e6b2c87c146106cc576101da565b8063ae92a93d116100de578063ae92a93d146104f7578063af640d0f1461051d578063b460481d14610525578063bc0e610a1461052d576101da565b80638da5cb5b146104c4578063a85adeab146104cc578063ad094f3d146104d4576101da565b806351cff8d91161017c578063653721471161014b578063653721471461045b57806377142c08146104635780637dc0d1d01461046b578063898b51a71461048f576101da565b806351cff8d91461038057806352c8b2f9146103a6578063535f02ee146103f75780635467a7511461041d576101da565b80631cb44dfc116101b85780631cb44dfc1461028e57806323341a05146102b65780633dcb8b81146103345780633f7361eb1461035a576101da565b8063052d7c00146101df57806305b4b371146101f957806313faede61461026f575b600080fd5b6101e761074b565b60408051918252519081900360200190f35b61021f6004803603602081101561020f57600080fd5b50356001600160a01b0316610751565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561025b578181015183820152602001610243565b505050509050019250505060405180910390f35b610277610800565b60408051600f9290920b8252519081900360200190f35b6102b4600480360360208110156102a457600080fd5b50356001600160a01b03166108d1565b005b6102be6109a7565b6040518086600f0b81526020018060200185600f0b8152602001848152602001838152602001828103825286818151815260200191508051906020019060200280838360005b8381101561031c578181015183820152602001610304565b50505050905001965050505050505060405180910390f35b6102776004803603604081101561034a57600080fd5b5080359060200135600f0b610abe565b6101e76004803603602081101561037057600080fd5b50356001600160a01b0316610b11565b6102b46004803603602081101561039657600080fd5b50356001600160a01b0316610d3d565b6103cc600480360360208110156103bc57600080fd5b50356001600160a01b0316610eb9565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b6102776004803603604081101561040d57600080fd5b5080359060200135600f0b610ee8565b6102b4600480360360a081101561043357600080fd5b508035906001600160a01b036020820135169060408101359060608101359060800135610f10565b6101e76112da565b6101e76112e0565b6104736112e6565b604080516001600160a01b039092168252519081900360200190f35b6101e7600480360360608110156104a557600080fd5b508035906020810135600f0b90604001356001600160a01b03166112f5565b6104736118f5565b6101e7611904565b6102b4600480360360408110156104ea57600080fd5b508035906020013561190a565b6101e76004803603604081101561050d57600080fd5b5080359060200135600f0b611ab7565b6101e7611b1c565b6101e7611b22565b6101e76004803603602081101561054357600080fd5b81019060208101813564010000000081111561055e57600080fd5b82018360208201111561057057600080fd5b8035906020019184602083028401116401000000008311171561059257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611b8a945050505050565b6105d8611ce9565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561061c578181015183820152602001610604565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561065b578181015183820152602001610643565b5050505090500194505050505060405180910390f35b6102b46004803603602081101561068757600080fd5b50356001600160a01b0316611e1e565b6101e7600480360360608110156106ad57600080fd5b508035906020810135600f0b90604001356001600160a01b0316611ece565b6102b4600480360360408110156106e257600080fd5b5080359060200135612421565b6101e7612478565b6102b46004803603602081101561070d57600080fd5b50356001600160a01b031661247e565b6101e76004803603604081101561073357600080fd5b5080359060200135600f0b61258d565b6104736125f2565b60075481565b600354606090610762906001612601565b67ffffffffffffffff8111801561077857600080fd5b506040519080825280602002602001820160405280156107a2578160200160208202803683370190505b50905060015b60035481116107f9576001600160a01b038316600090815260096020908152604080832084845260050190915290205482518390839081106107e657fe5b60209081029190910101526001016107a8565b505b919050565b60105460009060ff16151560011461084b576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b600060015b60035481116108b2576108a8826108a361089e600a858154811061087057fe5b60009182526020909120600282040154600b5460019092166010026101000a9004600f90810b91900b61265b565b6126c0565b61271a565b9150600101610850565b50600b546108cb90600f0b6108c68361275f565b612799565b91505090565b6000546001600160a01b0316331461091d576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b6001600160a01b038116610978576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206e6577206f7261636c650000000000000000000000000000604482015290519081900360640190fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600060606000806000806109c7600160035461260190919063ffffffff16565b67ffffffffffffffff811180156109dd57600080fd5b50604051908082528060200260200182016040528015610a07578160200160208202803683370190505b5060105490915060ff16610a2957600095509350849250829150819050610ab7565b60015b6003548111610a8e57600a8181548110610a4257fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b828281518110610a7157fe5b600f92830b90920b60209283029190910190910152600101610a2c565b50600d54600c54600e54600f805493810b9950939750600160801b90910490920b945090925090505b9091929394565b600c546000908190610ae390600160801b9004600f0b610ade86866127e1565b61297e565b600c54909150600090610afa908390600f0b61265b565b9050610b06828261297e565b925050505b92915050565b600080546001600160a01b0316331480610b325750601054610100900460ff165b610b78576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b600060075411610bcf576040805162461bcd60e51b815260206004820152601160248201527f4d61726b6574206e6f7420636c6f736564000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821660009081526009602052604090206004015415610c3d576040805162461bcd60e51b815260206004820152601760248201527f53686172657320616c72656164792072656465656d6564000000000000000000604482015290519081900360640190fd5b506001600160a01b0381166000908152600960209081526040808320600854845260050190915290205480610cb9576040805162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f2072656465656d000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038083166000908152600960205260409020600401829055600154610ce7911683836129c3565b600854604080518381526020810184905281516001600160a01b038616927fc2c19174f35fcb7370641b55802c8f596e4827983eefbb49c33373ac0cad5a1d928290030190a36010805461ff0019169055919050565b60105460ff161515600114610d85576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6000546001600160a01b03163314610dd1576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b600060075411610e28576040805162461bcd60e51b815260206004820152601160248201527f4d61726b6574206e6f7420636c6f736564000000000000000000000000000000604482015290519081900360640190fd5b610eb633826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e7957600080fd5b505afa158015610e8d573d6000803e3d6000fd5b505050506040513d6020811015610ea357600080fd5b50516001600160a01b03841691906129c3565b50565b600960205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6000610f09610ef78484612a48565b600c54600160801b9004600f0b61297e565b9392505050565b6000546001600160a01b03163314610f5c576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b60105460ff1615610fb4576040805162461bcd60e51b815260206004820152600d60248201527f416c726561647920736574757000000000000000000000000000000000000000604482015290519081900360640190fd5b60008111611009576040805162461bcd60e51b815260206004820152601560248201527f556e737570706f72746564206f766572726f756e640000000000000000000000604482015290519081900360640190fd5b6000831161105e576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f72746564206f7574636f6d6573000000000000000000000000604482015290519081900360640190fd5b600154611076906001600160a01b0316333085612bbe565b60028590556004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038681169190911790915560038490556001546000916110be911684612c4c565b905060006110cb85612ccf565b905060006110db84612710612ced565b90506110f3816110ee846108c68661275f565b61265b565b600b60106101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061113b6111298484612799565b600b54600160801b9004600f0b612799565b600b8054600f9290920b6001600160801b03166001600160801b031990921691909117905560035461116e906001612601565b67ffffffffffffffff8111801561118457600080fd5b506040519080825280602002602001820160405280156111ae578160200160208202803683370190505b5080516111c391600a91602090910190613e05565b5060015b60035481116112605783600a82815481106111de57fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611233600d60009054906101000a9004600f0b8561271a565b600d8054600f9290920b6001600160801b03166001600160801b03199092169190911790556001016111c7565b5061126d620186a0612ccf565b600c8054600f9290920b6001600160801b03166001600160801b03199092169190911790556010805460ff191660011790556112a7610800565b600c60106101000a8154816001600160801b030219169083600f0b6001600160801b031602179055505050505050505050565b60085481565b60035481565b6004546001600160a01b031681565b600080546001600160a01b03163314806113165750601054610100900460ff165b61135c576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b60008411801561136e57506003548411155b6113b1576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b600083600f0b13611409576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b600554421015611460576040805162461bcd60e51b815260206004820152601260248201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604482015290519081900360640190fd5b600654158061147157506006544211155b6114c2576040805162461bcd60e51b815260206004820152601460248201527f4d61726b657420616c726561647920656e646564000000000000000000000000604482015290519081900360640190fd5b60075415611517576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b611550600a858154811061152757fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8461297e565b600a858154811061155d57fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506115b2600d60009054906101000a9004600f0b8461297e565b600d80546001600160801b0319166001600160801b03600f93840b161790819055600b546115ed9291820b91600160801b909104900b612799565b600b8054600f9290920b6001600160801b03166001600160801b0319909216919091179055600060015b600354811161164157611637826108a361089e600a858154811061087057fe5b9150600101611617565b50600b5460009061165890600f0b6108c68461275f565b600c5490915060009061167590600160801b9004600f0b8361297e565b600c5490915060009061168c908390600f0b61265b565b600c8054600f86900b6001600160801b03908116600160801b0291161790556001549091506116cd906001600160a01b03166116c8848461297e565b612d2d565b945060008511611724576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c69642072657475726e000000000000000000000000000000000000604482015290519081900360640190fd5b60015460009061173d906001600160a01b031689612d2d565b6001600160a01b03881660009081526009602090815260408083208d84526005019091529020549091508111156117bb576040805162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b600f546117c9906001612601565b600f556001600160a01b03871660009081526009602052604090206001908101546117f391612601565b6001600160a01b03881660009081526009602052604090206001810191909155600301546118219087612601565b6001600160a01b038816600090815260096020908152604080832060038101949094558c835260059093019052205461185a9082612da8565b6001600160a01b0380891660009081526009602090815260408083208e8452600501909152902091909155600154611894911688886129c3565b88876001600160a01b03167f019eed797248695407e185a0977fa0dba8bbaaba6c2f6f4a8bdf6fb32e62ba238389604051808381526020018281526020019250505060405180910390a350505050506010805461ff00191690559392505050565b6000546001600160a01b031681565b60065481565b6004546001600160a01b03163314611957576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f7261636c6560a81b604482015290519081900360640190fd5b60025482146119ad576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c6964206d61726b6574000000000000000000000000000000000000604482015290519081900360640190fd5b6000811180156119bf57506003548111155b611a02576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b6006544211611a58576040805162461bcd60e51b815260206004820152601060248201527f4d61726b6574206e6f7420656e64656400000000000000000000000000000000604482015290519081900360640190fd5b60075415611aad576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b6008555042600755565b60105460009060ff161515600114611b02576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6010805461ff001916610100179055610f098383336112f5565b60025481565b60105460009060ff161515600114611b6d576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6010805461ff001916610100179055611b8533610b11565b905090565b60105460009060ff161515600114611bd5576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6004546001600160a01b03163314611c22576040805162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f7261636c6560a81b604482015290519081900360640190fd5b60005b82518110156107f9576010805461ff00191661010017905582513090633f7361eb90859084908110611c5357fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b158015611c9a57600080fd5b505af1925050508015611cbf57506040513d6020811015611cba57600080fd5b505160015b611cd3576010805461ff0019169055611ce1565b50611cdf826001612601565b505b600101611c25565b606080611d02600160035461260190919063ffffffff16565b67ffffffffffffffff81118015611d1857600080fd5b50604051908082528060200260200182016040528015611d42578160200160208202803683370190505b50600354909250611d54906001612601565b67ffffffffffffffff81118015611d6a57600080fd5b50604051908082528060200260200182016040528015611d94578160200160208202803683370190505b50905060015b6003548111611e19576001546801000000000000000090611dc8906001600160a01b03166116c88484610ee8565b848381518110611dd457fe5b6020908102919091010152600154611df9906001600160a01b03166116c88484610abe565b838381518110611e0557fe5b602090810291909101015250600101611d9a565b509091565b6000546001600160a01b0316158015611e4057506001546001600160a01b0316155b611e91576040805162461bcd60e51b815260206004820152601360248201527f416c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b600080543373ffffffffffffffffffffffffffffffffffffffff1991821617909155600180549091166001600160a01b0392909216919091179055565b600080546001600160a01b0316331480611eef5750601054610100900460ff165b611f35576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b600084118015611f4757506003548411155b611f8a576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b604482015290519081900360640190fd5b600083600f0b13611fe2576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420616d6f756e74000000000000000000000000000000000000604482015290519081900360640190fd5b600554421015612039576040805162461bcd60e51b815260206004820152601260248201527f4d61726b6574206e6f7420737461727465640000000000000000000000000000604482015290519081900360640190fd5b600654158061204a57506006544211155b61209b576040805162461bcd60e51b815260206004820152601460248201527f4d61726b657420616c726561647920656e646564000000000000000000000000604482015290519081900360640190fd5b600754156120f0576040805162461bcd60e51b815260206004820152601560248201527f4d61726b657420616c726561647920636c6f7365640000000000000000000000604482015290519081900360640190fd5b612129600a858154811061210057fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8461271a565b600a858154811061213657fe5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061218b600d60009054906101000a9004600f0b8461271a565b600d80546001600160801b0319166001600160801b03600f93840b161790819055600b546121c69291820b91600160801b909104900b612799565b600b8054600f9290920b6001600160801b03166001600160801b0319909216919091179055600060015b600354811161221a57612210826108a361089e600a858154811061087057fe5b91506001016121f0565b50600b5460009061223190600f0b6108c68461275f565b9050600061224e82600c60109054906101000a9004600f0b61297e565b600c8054600f85900b6001600160801b03908116600160801b029116179055600154909150612286906001600160a01b031682612d2d565b9350600084116122dd576040805162461bcd60e51b815260206004820152600c60248201527f496e76616c696420636f73740000000000000000000000000000000000000000604482015290519081900360640190fd5b6001546122f5906001600160a01b0316333087612bbe565b60015460009061230e906001600160a01b031688612d2d565b600e5490915061231f906001612601565b600e556001600160a01b038616600090815260096020526040902054612346906001612601565b6001600160a01b03871660009081526009602052604090209081556002015461236f9086612601565b6001600160a01b038716600090815260096020908152604080832060028101949094558b83526005909301905220546123a89082612601565b6001600160a01b03871660008181526009602090815260408083208d845260050182529182902093909355805184815292830188905280518b937f849165c18b9d0fb161bcb145e4ab523d350e5c98f1dbbb1960331e7ee3ca676792908290030190a3505050506010805461ff00191690559392505050565b6000546001600160a01b0316331461246d576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b600591909155600655565b60055481565b6000546001600160a01b031633146124ca576040805162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b604482015290519081900360640190fd5b6001600160a01b038116612525576040805162461bcd60e51b815260206004820152601160248201527f496e76616c6964206e6577206f776e6572000000000000000000000000000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60105460009060ff1615156001146125d8576040805162461bcd60e51b815260206004820152600960248201526804e6f742073657475760bc1b604482015290519081900360640190fd5b6010805461ff001916610100179055610f09838333611ece565b6001546001600160a01b031681565b600082820183811015610f09576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600081600f0b6000141561266e57600080fd5b600082600f0b604085600f0b901b8161268357fe5b0590506f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff8113155b610f0957600080fd5b60006840000000000000000082600f0b126126da57600080fd5b683fffffffffffffffff1982600f0b12156126f7575060006107fb565b610b0b608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d612e05565b6000600f83810b9083900b016f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff811315610f0957600080fd5b60008082600f0b1361277057600080fd5b608061277b836138d8565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b6000600f83810b9083900b0260401d6f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff811315610f0957600080fd5b6000806000600a8054905067ffffffffffffffff8111801561280257600080fd5b5060405190808252806020026020018201604052801561282c578160200160208202803683370190505b50600d54909150600f0b60015b600354811161290d57868114156128b457612883600a828154811061285a57fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8761297e565b83828151811061288f57fe5b6020026020010190600f0b9081600f0b815250506128ad828761297e565b9150612905565b600a81815481106128c157fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8382815181106128f057fe5b6020026020010190600f0b9081600f0b815250505b600101612839565b50600b54600090612929908390600160801b9004600f0b612799565b905060015b60035481116129655761295b856108a361089e87858151811061294d57fe5b60200260200101518661265b565b945060010161292e565b50612973816108c68661275f565b979650505050505050565b6000600f82810b9084900b036f7fffffffffffffffffffffffffffffff1981128015906126b757506f7fffffffffffffffffffffffffffffff811315610f0957600080fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612a439084906139bc565b505050565b6000806000600a8054905067ffffffffffffffff81118015612a6957600080fd5b50604051908082528060200260200182016040528015612a93578160200160208202803683370190505b50600d54909150600f0b60015b6003548111612b745786811415612b1b57612aea600a8281548110612ac157fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b8761271a565b838281518110612af657fe5b6020026020010190600f0b9081600f0b81525050612b14828761271a565b9150612b6c565b600a8181548110612b2857fe5b90600052602060002090600291828204019190066010029054906101000a9004600f0b838281518110612b5757fe5b6020026020010190600f0b9081600f0b815250505b600101612aa0565b50600b54600090612b90908390600160801b9004600f0b612799565b905060015b600354811161296557612bb4856108a361089e87858151811061294d57fe5b9450600101612b95565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612c469085906139bc565b50505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c8857600080fd5b505afa158015612c9c573d6000803e3d6000fd5b505050506040513d6020811015612cb257600080fd5b505160ff169050612cc783600a83900a612ced565b949350505050565b6000677fffffffffffffff821115612ce657600080fd5b5060401b90565b600081612cf957600080fd5b6000612d058484613a6d565b90506f7fffffffffffffffffffffffffffffff6001600160801b0382161115610f0957600080fd5b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6957600080fd5b505afa158015612d7d573d6000803e3d6000fd5b505050506040513d6020811015612d9357600080fd5b505160ff169050612cc783600a83900a613bc8565b600082821115612dff576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60006840000000000000000082600f0b12612e1f57600080fd5b683fffffffffffffffff1982600f0b1215612e3c575060006107fb565b6f8000000000000000000000000000000060006780000000000000008416600f0b1315612e7a5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315612ea7577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315612ed4577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315612f015770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315612f2e577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315612f5b57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315612f885770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b1315612fb557700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315612fe15770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b131561300d577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b131561303957700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315613065577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561309157700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156130bd5770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156130e9577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156131155770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315613140577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b131561316b57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156131965770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b13156131c157700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156131ec5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315613217577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561324257700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b131561326d577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b131561329757700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156132c15770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b13156132eb577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b13156133155770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b131561333f577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b131561336957700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b13156133935770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b13156133bd57700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b13156133e65770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b131561340f577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561343857700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315613461577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561348a57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156134b35770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156134dc577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b13156135055770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b131561352d577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561355557700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b131561357d5770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156135a557700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156135cd5770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b13156135f5577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561361d57700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315613645577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561366c57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156136935770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156136ba577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156136e15770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315613708577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561372f57700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156137565770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561377d57700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156137a35770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b13156137c9577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156137ef57700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315613815577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b131561383b57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156138615770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315613887577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156138ad5770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c6f7fffffffffffffffffffffffffffffff811115610b0b57600080fd5b60008082600f0b136138e957600080fd5b6000600f83900b680100000000000000008112613908576040918201911d5b640100000000811261391c576020918201911d5b62010000811261392e576010918201911d5b610100811261393f576008918201911d5b6010811261394f576004918201911d5b6004811261395f576002918201911d5b6002811261396e576001820191505b603f19820160401b600f85900b607f8490031b6780000000000000005b60008113156139b15790800260ff81901c8281029390930192607f011c9060011d61398b565b509095945050505050565b6000613a11826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c419092919063ffffffff16565b805190915015612a4357808060200190516020811015613a3057600080fd5b5051612a435760405162461bcd60e51b815260040180806020018281038252602a815260200180613ed6602a913960400191505060405180910390fd5b600081613a7957600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff8411613aaf5782604085901b81613aa757fe5b049050613bb4565b60c084811c6401000000008110613ac8576020918201911c5b620100008110613ada576010918201911c5b6101008110613aeb576008918201911c5b60108110613afb576004918201911c5b60048110613b0b576002918201911c5b60028110613b1a576001820191505b60bf820360018603901c6001018260ff0387901b81613b3557fe5b0492506001600160801b03831115613b4c57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015613b78576001820391505b608084901b92900382811015613b8f576001820391505b829003608084901c8214613b9f57fe5b888181613ba857fe5b04870196505050505050505b6001600160801b03811115610f0957600080fd5b600081613bd757506000610b0b565b600083600f0b1215613be857600080fd5b600f83900b6001600160801b038316810260401c90608084901c0277ffffffffffffffffffffffffffffffffffffffffffffffff811115613c2857600080fd5b60401b8119811115613c3957600080fd5b019392505050565b6060612cc7848460008585613c5585613d5b565b613ca6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613ce45780518252601f199092019160209182019101613cc5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d46576040519150601f19603f3d011682016040523d82523d6000602084013e613d4b565b606091505b5091509150612973828286613d61565b3b151590565b60608315613d70575081610f09565b825115613d805782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613dca578181015183820152602001613db2565b50505050905090810190601f168015613df75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b82805482825590600052602060002090600101600290048101928215613eb05791602002820160005b83821115613e7b57835183826101000a8154816001600160801b030219169083600f0b6001600160801b031602179055509260200192601001602081600f01049283019260010302613e2e565b8015613eae5782816101000a8154906001600160801b030219169055601001602081600f01049283019260010302613e7b565b505b50613ebc929150613ec0565b5090565b5b80821115613ebc5760008155600101613ec156fe5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220b34b432a8236d8e27b903341d9d6730bc46532e1e0221a145ea447a032a420ec64736f6c63430007060033",
  "devdoc": {
    "author": "Marto (https://github.com/0xMarto)",
    "details": "Feel free to make any adjustments to the code (DMs are open @0xMarto)",
    "kind": "dev",
    "methods": {
      "_buy(uint256,int128,address)": {
        "params": {
          "_account": "The address of the buyer",
          "_amount": "The number of outcome shares to buy (as a signed 64.64-bit fixed point number)",
          "_outcome": "The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)"
        },
        "returns": {
          "tokenCost": "The total token amount used for buying the specified amount of outcome shares"
        }
      },
      "_redeem(address)": {
        "params": {
          "_account": "The address of the account with shares of the market"
        },
        "returns": {
          "redeemedShares": "The number of shares redeemed"
        }
      },
      "_sell(uint256,int128,address)": {
        "params": {
          "_account": "The address of the seller",
          "_amount": "The number of outcome shares to sell (as a signed 64.64-bit fixed point number)",
          "_outcome": "The outcome for which shares are being sold (e.g.: 1 for YES, 2 for NO)"
        },
        "returns": {
          "tokenReturn": "The total amount of tokens received from selling the outcome shares"
        }
      },
      "buy(uint256,int128)": {
        "params": {
          "_amount": "The number of outcome shares to buy (as a signed 64.64-bit fixed point number)",
          "_outcome": "The outcome of which shares are being bought (e.g.: 1 for YES, 2 for NO)"
        },
        "returns": {
          "tokenCost": "The total token amount used for buying the specified amount of outcome shares"
        }
      },
      "buyPrice(uint256,int128)": {
        "params": {
          "_amount": "The number of outcome shares to buy (as signed 64.64-bit fixed point number)",
          "_outcome": "The outcome for which shares are being bought"
        },
        "returns": {
          "tokenCost": "The token cost amount (as a signed 64.64-bit fixed point number)"
        }
      },
      "cost()": {
        "returns": {
          "totalCost": "The total cost in the form of a signed 64.64-bit fixed point number"
        }
      },
      "getAccountOutcomeBalances(address)": {
        "params": {
          "_account": "The address of the account with shares of the market"
        },
        "returns": {
          "balances": "The balances of shares for all outcomes (indexed by outcome)"
        }
      },
      "getMarketInfo()": {
        "returns": {
          "_0": "totalShares The current total shares minted for all outcomes of the market",
          "_1": "sharesBalances All shares balances (indexed by outcome)",
          "_2": "currentCost The current liquidity of the market",
          "_3": "totalBuys Buys counter of the market",
          "_4": "totalSells Sells counter of the market"
        }
      },
      "getPrices()": {
        "details": "Helper function to fast calculate market prediction and spreads",
        "returns": {
          "buyPrices": "buy price of 1 share for all outcomes (indexed by outcome)",
          "sellPrices": "sell price of 1 share for all outcomes (indexed by outcome)"
        }
      },
      "initialize(address)": {
        "params": {
          "_token": "ERC-20 token will be used to purchase and redeem rewards for this Market"
        }
      },
      "redeemBatch(address[])": {
        "details": "The list of accounts could be calculated using the \"SharesBought\" event",
        "params": {
          "_accounts": "The list of accounts to redeem shares for"
        },
        "returns": {
          "redeems": "The number of successful redeems"
        }
      },
      "redeemShares()": {
        "returns": {
          "redeemedShares": "The number of shares redeemed"
        }
      },
      "reportResult(uint256,uint256)": {
        "params": {
          "_id": "The unique identifier of the market",
          "_outcome": "The outcome that is reported as the result of the market"
        }
      },
      "sell(uint256,int128)": {
        "params": {
          "_amount": "The number of outcome shares to sell (as a signed 64.64-bit fixed point number)",
          "_outcome": "The outcome of which shares are being sold (e.g.: 1 for YES, 2 for NO)"
        },
        "returns": {
          "tokenReturn": "The total amount of tokens received from selling the outcome shares"
        }
      },
      "sellPrice(uint256,int128)": {
        "params": {
          "_amount": "The number of outcome shares to sell (as signed 64.64-bit fixed point number)",
          "_outcome": "The outcome for which shares are being sold"
        },
        "returns": {
          "tokenReturn": "The token return amount (as a signed 64.64-bit fixed point number)"
        }
      },
      "setup(uint256,address,uint256,uint256,uint256)": {
        "params": {
          "_id": "The unique identifier for the market",
          "_oracle": "The address of the oracle that will report results",
          "_overround": "The AMM profit margin in basis points (bps) [recommended: (100 * _totalOutcomes)]",
          "_subsidy": "The initial funding used to seed the market (defined on initialized token)",
          "_totalOutcomes": "The number of possible outcomes for the market"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "The address of the new owner"
        }
      },
      "updateDates(uint256,uint256)": {
        "params": {
          "_endTimestamp": "The timestamp when the market stops allowing trading",
          "_startTimestamp": "The timestamp when the market starts allowing trading"
        }
      },
      "updateOracle(address)": {
        "params": {
          "_newOracle": "The address of the EOA or contract that can close the market"
        }
      },
      "withdraw(address)": {
        "params": {
          "_token": "The address of the ERC-20 token to withdraw"
        }
      }
    },
    "title": "PrecogMarketV7: An implementation for liquidity-sensitive LMSR market maker in Solidity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_buy(uint256,int128,address)": {
        "notice": "Allows buying market shares for a specified account (limited to only Self or Owner)"
      },
      "_redeem(address)": {
        "notice": "Redeems the received account shares for the result of the market (limited to only Self or Owner)"
      },
      "_sell(uint256,int128,address)": {
        "notice": "Allows selling market shares from a specified account (limited to only Self or Owner)"
      },
      "buy(uint256,int128)": {
        "notice": "Buys outcome shares for the specified outcome"
      },
      "buyPrice(uint256,int128)": {
        "notice": "Gets the cost of buying the specified amount of outcome shares"
      },
      "cost()": {
        "notice": "Gets the total collateral spent in the market"
      },
      "getAccountOutcomeBalances(address)": {
        "notice": "Gets the amount of shares that an account owns for all outcomes"
      },
      "getMarketInfo()": {
        "notice": "Gets the current market state information"
      },
      "getPrices()": {
        "notice": "Gets current market buy and sell prices for all outcomes"
      },
      "initialize(address)": {
        "notice": "Constructor like function for the market maker"
      },
      "redeemBatch(address[])": {
        "notice": "Redeems shares in batch for multiple accounts  (limited to only Oracle)"
      },
      "redeemShares()": {
        "notice": "Redeems the current sender shares for the result of the market"
      },
      "reportResult(uint256,uint256)": {
        "notice": "Reports the result of the market (limited to only Oracle)"
      },
      "sell(uint256,int128)": {
        "notice": "Sells outcome shares for the specified outcome"
      },
      "sellPrice(uint256,int128)": {
        "notice": "Gets the return from selling the specified amount of outcome shares"
      },
      "setup(uint256,address,uint256,uint256,uint256)": {
        "notice": "Sets up the market with the specified parameters"
      },
      "transferOwnership(address)": {
        "notice": "Transfers the ownership of the contract to a new owner (limited to only current owner)"
      },
      "updateDates(uint256,uint256)": {
        "notice": "Updates the start and end timestamps for the market (limited to only owner)"
      },
      "updateOracle(address)": {
        "notice": "Update the oracle address of the market (limited to only owner)"
      },
      "withdraw(address)": {
        "notice": "Withdraws any remaining liquidity from the market (limited to only owner)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5677,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5679,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5681,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "id",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5683,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "totalOutcomes",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5685,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5687,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5689,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "endTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5691,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "closeTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5693,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "result",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5697,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "accountShares",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(SharesInfo)5675_storage)"
      },
      {
        "astId": 5700,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "shares",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_int128)dyn_storage"
      },
      {
        "astId": 5702,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "beta",
        "offset": 0,
        "slot": "11",
        "type": "t_int128"
      },
      {
        "astId": 5704,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "alpha",
        "offset": 16,
        "slot": "11",
        "type": "t_int128"
      },
      {
        "astId": 5706,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "dust",
        "offset": 0,
        "slot": "12",
        "type": "t_int128"
      },
      {
        "astId": 5708,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "currentCost",
        "offset": 16,
        "slot": "12",
        "type": "t_int128"
      },
      {
        "astId": 5710,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "totalShares",
        "offset": 0,
        "slot": "13",
        "type": "t_int128"
      },
      {
        "astId": 5712,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "totalBuys",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5714,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "totalSells",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5716,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "marketSetup",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 5718,
        "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
        "label": "internalCall",
        "offset": 1,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_int128)dyn_storage": {
        "base": "t_int128",
        "encoding": "dynamic_array",
        "label": "int128[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_struct(SharesInfo)5675_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PrecogMarketV7.SharesInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SharesInfo)5675_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(SharesInfo)5675_storage": {
        "encoding": "inplace",
        "label": "struct PrecogMarketV7.SharesInfo",
        "members": [
          {
            "astId": 5662,
            "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
            "label": "buys",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5664,
            "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
            "label": "sells",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5666,
            "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
            "label": "deposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5668,
            "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
            "label": "withdrew",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5670,
            "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
            "label": "redeemed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5674,
            "contract": "contracts/PrecogMarketV7.sol:PrecogMarketV7",
            "label": "balances",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}