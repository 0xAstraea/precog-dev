// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;
pragma abicoder v2;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "./PrecogToken.sol";

/**
 * @title PrecogMasterV1
 * @dev Contract to manage Precog token claims and PredictionMarkets
 */
contract PrecogMasterV1 is AccessControl {
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant CALLER_ROLE = keccak256("CALLER_ROLE");
    address public token;

    struct TokenClaim {
        address account;
        uint256 user;
        uint256 claimedAmount;
        uint256 claimedTimestamp;
    }

    struct MiningSeason {
        uint256 startTimestamp;
        uint256 endTimestamp;
        uint256 maxUserClaim;
        uint256 maxTotalClaim;
        uint256 maxTotalMint;
        uint256 claimedAmount;
        uint256 mintedAmount;
    }

    mapping(address => TokenClaim) public accountTokenClaims;
    mapping(uint256 => TokenClaim) public userTokenClaims;
    mapping(uint256 => MiningSeason) public miningSeasons;
    uint256 public currentSeason;

    event TokensClaimed(address indexed account, uint256 indexed user, uint256 amount, uint256 timestamp);
    event TokensMinted(address indexed account, uint256 amount, uint256 timestamp);

    constructor(address precogToken, address initialAdmin) {
        // Grant DEFAULT_ADMIN_ROLE to the initial admin (this is the admin to the ADMIN_ROLE list)
        _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);
        // Set ADMIN_ROLE as admin of CALLER_ROLE list
        _setRoleAdmin(CALLER_ROLE, ADMIN_ROLE);
        // Set already deployed precogToken as claimable token and collateral token for all Markets
        token = precogToken;
        // Grant ADMIN_ROLE to initial Admin (this enables to call "addAdmin" helper function)
        _setupRole(ADMIN_ROLE, initialAdmin);
    }

    modifier onlyAdmin() {
        require(hasRole(ADMIN_ROLE, msg.sender), "Restricted to admins");
        _;
    }

    modifier onlyCaller() {
        require(hasRole(CALLER_ROLE, msg.sender), "Restricted to callers");
        _;
    }

    // Public functions and helpers
    function hasClaimed(address account, uint256 user) external view returns (bool) {
        return accountTokenClaims[account].claimedTimestamp != 0 || userTokenClaims[user].claimedTimestamp != 0;
    }

    // Only caller functions
    function claimToken(address account, uint256 user, uint256 amount) external onlyCaller returns (bool) {
        // Validate token claim
        require(accountTokenClaims[account].claimedTimestamp == 0, "Account already claimed");
        require(userTokenClaims[user].claimedTimestamp == 0, "User already claimed");
        MiningSeason storage season = miningSeasons[currentSeason];
        if (season.startTimestamp > 0) {
            require(block.timestamp >= season.startTimestamp, "Season not started");
            require(block.timestamp < season.endTimestamp, "Season already ended");
            require(amount <= season.maxUserClaim, "Invalid user claim amount");
            require(amount + season.claimedAmount <= season.maxTotalClaim, "Season max token claims reached");
            require(amount + season.mintedAmount <= season.maxTotalMint, "Season max token mints reached");
        }

        // Register current token claim
        TokenClaim memory claim = TokenClaim({
            user: user,
            account: account,
            claimedAmount: amount,
            claimedTimestamp: block.timestamp
        });
        accountTokenClaims[account] = claim;
        userTokenClaims[user] = claim;
        season.claimedAmount += amount;
        season.mintedAmount += amount;

        // Mint tokens to received account
        PrecogToken(token).mint(account, amount);

        emit TokensClaimed(account, user, amount, block.timestamp);
        return true;
    }

    // Only admin functions
    function addCaller(address account) external onlyAdmin {
        grantRole(CALLER_ROLE, account);
    }

    function removeCaller(address account) external onlyAdmin {
        revokeRole(CALLER_ROLE, account);
    }

    function addAdmin(address account) external onlyAdmin {
        grantRole(ADMIN_ROLE, account);
    }

    function removeAdmin(address account) external onlyAdmin {
        revokeRole(ADMIN_ROLE, account);
    }

    function updateCurrentSeason(uint256 seasonIndex) external onlyAdmin {
        currentSeason = seasonIndex;
    }

    function setMiningSeason(
        uint256 seasonIndex,
        uint256 startTimestamp,
        uint256 endTimestamp,
        uint256 maxUserClaim,
        uint256 maxTotalClaim,
        uint256 maxTotalMint,
        uint256 claimedAmount,
        uint256 mintedAmount
    ) external onlyAdmin {
        miningSeasons[seasonIndex] = MiningSeason({
            startTimestamp: startTimestamp,
            endTimestamp: endTimestamp,
            maxUserClaim: maxUserClaim,
            maxTotalClaim: maxTotalClaim,
            maxTotalMint: maxTotalMint,
            claimedAmount: claimedAmount,
            mintedAmount: mintedAmount
        });
    }

    function precogMint(address to, uint256 amount) external onlyAdmin {
        // Validate token mint
        MiningSeason storage season = miningSeasons[currentSeason];
        if (season.startTimestamp > 0) {
            require(amount + season.mintedAmount <= season.maxTotalMint, "Season max token mints reached");
        }

        // Register token mint
        season.mintedAmount += amount;

        // Mint tokens to received account
        PrecogToken(token).mint(to, amount);

        emit TokensMinted(to, amount, block.timestamp);
    }

    function precogBurn(address from, uint256 amount) external onlyAdmin {
        // WIP Here we should decrease `season.mintedAmount` for the current season
        PrecogToken(token).burn(from, amount);
    }

    function precogTransferOwnership(address newPrecogMaster) external onlyAdmin {
        PrecogToken(token).transferOwnership(newPrecogMaster);
    }

}
