// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.8.0;

interface IPrecogMarket {
    // Returns the start timestamp of the market
    function startTimestamp() external view returns (uint256);

    // Returns the end timestamp of the market
    function endTimestamp() external view returns (uint256);

    // Returns the condition identifier of the market
    function condition() external view returns (bytes32);

    // Returns the address of the token used in the market
    function token() external view returns (address);

    // Returns the address of the current owner
    function owner() external view returns (address);

    // Returns information about the shares owned by an account
    function accountShares(address _account) external view
    returns (
        uint256 buys,
        uint256 sells,
        uint256 outcomeOneBalance,
        uint256 outcomeTwoBalance,
        uint256 deposited,
        uint256 withdrew,
        uint256 redeemed
    );

    // Initialize the market contract (needed for support cloning)
    function initialize(address _token) external;

    // Setup the market with the specified parameters
    function setup(uint256 _id, address _oracle, uint256 _totalOutcomes, uint256 _subsidy, uint256 _overround) external;

    // Allows buying market shares for the specified outcome
    function buy(uint256 _outcome, int128 _amount) external returns (uint256);

    // Allows buying market shares for a specified account (restricted to only Self or Owner)
    function _buy(uint256 _outcome, int128 _amount, address _account) external returns (uint256);

    // Allows selling market shares from the specified outcome
    function sell(uint256 _outcome, int128 _amount) external returns (uint256);

    // Allows selling market shares from a specified account (restricted to only Self or Owner)
    function _sell(uint256 _outcome, int128 _amount, address _account) external returns (uint256);

    // Allows redeeming shares of the resulted outcome for tokens
    function redeemShares() external returns (uint256 shares);

    // Allows redeeming shares of the resulted outcome for a specified account (restricted to only Self or Owner)
    function _redeem(address _account) external returns (uint256 shares);

    // Allows report result of a Market (restricted to only to Oracle)
    function reportResult(uint256 _id, uint256 _outcome) external;

    // Allows redeeming shares for a batch of accounts (restricted to only to Oracle)
    function redeemBatch(address[] memory _accounts) external returns (uint256 redeems);

    // Updates the start and end timestamps of the market
    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) external;

    // Withdraws remaining tokens from the market after it's resolved
    function withdraw(address _token) external;

    // Returns the current cost of the market
    function cost() external view returns (int128);

    // Returns the cost of the market after a proposed transaction
    function cost_after_buy(uint256 _outcome, int128 _amount) external view returns (int128);

    // Returns the price of buying a specified amount of outcome tokens
    function buyPrice(uint256 _outcome, int128 _amount) external view returns (int128);

    // Returns the price of selling a specified amount of outcome tokens
    function sellPrice(uint256 _outcome, int128 _amount) external view returns (int128);

    // Helper function to convert price in token cost
    function getTokenWei(address _token, int128 _amount) external view returns (uint);

    // Helper function to convert token amount to initial funding (on int128)
    function getTokenEth(address _token, uint _amount) external view returns (int128);

    // Returns information about the market
    function getMarketInfo() external view
    returns (
        int128 totalShares,
        int128 outcomeOneShares,
        int128 outcomeTwoShares,
        int128 currentCost,
        uint256 totalBuys,
        uint256 totalSells
    );
}
