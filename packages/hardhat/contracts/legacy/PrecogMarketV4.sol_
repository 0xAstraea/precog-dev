// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.8.0;

/// @title An implementation for liquidity-sensitive LMSR market maker in Solidity
/// @author Marto (based on Abdulla Al-Kamil implementation)
/// @dev Feel free to make any adjustments to the code

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import {ABDKMath} from "./ABDKMath64x64.sol";

contract PrecogMarketV4 {
    /**
     * @dev: the contract uses the ABDKMath library to allow for math functions such as logarithms and exponents.
     * As such, all the sensitive state variables are stored as int128 (signed 64.64 bit fixed point number).
     */
    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    struct ShareInfo {
        uint256 buys;  // Counter on Buy
        uint256 sells;  // Counter on Sell
        uint256 outcomeOneBalance;  // YES shares balance
        uint256 outcomeTwoBalance;  // NO shares balance
        uint256 deposited; // Collateral In on Buys
        uint256 withdrew; // Collateral Out on Sells
        uint256 redeemed; // Collateral Out on Redeems
    }

    // Public market variables
    address public owner;
    address public token;  // Collateral to Buy and redeem shares
    uint256 public id;  // Unique Identifier for the market
    address public oracle;  // EOA or Contract in change to reportResults
    uint256 public startTimestamp;  // Time when Buy/Sell shares are enabled
    uint256 public endTimestamp;  // Time when Buy/Sell shares are disabled
    uint256 public closeTimestamp;  // Time when results were reported
    uint256 public result;  // Final outcome of the market (published by the oracle)
    mapping(address => ShareInfo) public accountShares;

    // Private market variables
    uint256 private totalOutcomes;
    int128[] private q;
    int128 private b;
    int128 private alpha;
    int128 private currentCost;
    int128 private totalShares;
    uint256 private totalBuys;
    uint256 private totalSells;
    bool private initialized;

    event SharesBought(address indexed account, uint256 amount, uint256 tokenIn);
    event SharesSold(address indexed account, uint256 amount, uint256 tokenOut);
    event SharesRedeemed(address indexed account, uint256 amount, uint256 tokenOut);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyAfterSetup {
        require(initialized == true, "Not setup");
        _;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner");
        _;
    }

    modifier onlyOwnerOrSelf() {
        require(msg.sender == owner || msg.sender == address(this), "Only owner or self");
        _;
    }

    modifier onlyOracle() {
        require(msg.sender == oracle, "Only oracle");
        _;
    }

    /**
     * @notice Constructor like function for the market maker
     * @param _token ERC-20 token will be used to purchase and redeem rewards for this Market
     */
    function initialize(address _token) public {
        require(owner == address(0), "Already initialized");
        owner = msg.sender;
        token = _token;
    }

    /**
     * @notice Set up some of the variables for the market maker
     * @param _id The market id should be unique for each master
     * @param _oracle The address for the EOA or contract which will report the result for this Market
     * @param _totalOutcomes The number of different outcomes possible for this market (currently fixed at 2)
     * @param _subsidy How much initial funding is used to seed the market (denominated on initialized token)
     * @param _overround How much 'profit' does the AMM claim in bps. Note that 200 represents 2%
     */
    function setup(uint _id, address _oracle, uint _totalOutcomes, uint _subsidy, uint _overround) public onlyOwner {
        require(!initialized, "Already initialized");
        require(_totalOutcomes == 2, "Only dual market supported");
        require(_overround > 0, "Cannot have 0 overround");

        // Get subsidy tokens
        IERC20(token).safeTransferFrom(msg.sender, address(this), _subsidy);

        // Save basic parameters
        id = _id;
        oracle = _oracle;
        totalOutcomes = _totalOutcomes;

        // Calculate initialization variables
        int128 initialSubsidy = getTokenEth(token, _subsidy);
        int128 n = ABDKMath.fromUInt(_totalOutcomes);
        int128 overround = ABDKMath.divu(_overround, 10000); // Note: if the overround is too low, then exp overflows
        alpha = ABDKMath.div(overround, ABDKMath.mul(n, ABDKMath.ln(n)));
        b = ABDKMath.mul(ABDKMath.mul(initialSubsidy, n), alpha);
        for (uint i = 0; i < totalOutcomes; i++) {
            q.push(initialSubsidy);
        }

        initialized = true;

        // After initialization, pre calculate current totals and cost
        totalShares = ABDKMath.mul(initialSubsidy, n);
        currentCost = cost();
    }

    /**
     * @notice This function is used to buy outcome tokens.
     * @param _outcome The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)
     * @param _amount This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)
     * @return _cost The total amount of tokens received from selling the _amount of shares
     */
    function buy(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 _cost) {
        require(block.timestamp >= startTimestamp, "Market not started");

        // If enabled, check if market still open
        if (endTimestamp > 0) {
            require(block.timestamp <= endTimestamp, "Market already ended");
        }

        // Send BUY call to internal function
        return _buy(_outcome, _amount, msg.sender);
    }

    function _buy(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrSelf returns (uint256 _cost) {
        // Special buy function to Buy tokens f
        require(_outcome > 0, "Invalid outcome");
        require(closeTimestamp == 0, "Market already closed");

        // Update total and individual shares quantities (q)
        for (uint j = 0; j < totalOutcomes; j++) {
            // Note: (1 << j) is equal to (1 x 2 ** j)
            if ((_outcome & (1 << j)) != 0) {
                q[j] = ABDKMath.add(q[j], _amount);
                totalShares = ABDKMath.add(totalShares, _amount);
            }
        }

        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)
        b = ABDKMath.mul(totalShares, alpha);

        int128 sumTotal;
        for (uint i = 0; i < totalOutcomes; i++) {
            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(q[i], b)));
        }

        // Calculate new current cost and price to pay. After that, update current cost variable
        int128 newCost = ABDKMath.mul(b, ABDKMath.ln(sumTotal));
        int128 deltaCost = ABDKMath.sub(newCost, currentCost);
        currentCost = newCost;

        // Get amount of tokens from sender (as current payment)
        uint tokenCost = getTokenWei(token, deltaCost);
        require(tokenCost > 0, "Invalid cost");
        require(IERC20(token).transferFrom(msg.sender, address(this), tokenCost), 'Invalid transfer');
        uint outcomeShares = getTokenWei(token, _amount);

        // Register BUY in market total and Account details
        totalBuys = totalBuys.add(1);
        accountShares[_account].buys = accountShares[_account].buys.add(1);
        accountShares[_account].deposited = accountShares[_account].deposited.add(tokenCost);
        if (_outcome == 1) {
            accountShares[_account].outcomeOneBalance = accountShares[_account].outcomeOneBalance.add(outcomeShares);
        } else if (_outcome == 2) {
            accountShares[_account].outcomeTwoBalance = accountShares[_account].outcomeTwoBalance.add(outcomeShares);
        }

        emit SharesBought(_account, outcomeShares, tokenCost);
        return tokenCost;
    }

    /**
     * @notice This function is used to sell outcome tokens already bought.
     * @param _outcome The outcome(s) which a user is buying tokens for (1 for YES, 2 for NO)
     * @param _amount This is the number of outcome tokens purchased (signed 64.64-bit fixed point number)
     * @return _cost The total amount of tokens received from selling the _amount of shares
     */
    function sell(uint256 _outcome, int128 _amount) public onlyAfterSetup returns (uint256 _cost) {
        require(block.timestamp >= startTimestamp, "Market not started");

        // If enabled, check if market still open
        if (endTimestamp > 0) {
            require(block.timestamp <= endTimestamp, "Market already ended");
        }

        // Send call to internal
        return _sell(_outcome, _amount, msg.sender);
    }

    function _sell(uint256 _outcome, int128 _amount, address _account) public onlyOwnerOrSelf returns (uint256 _cost) {
        // Special sell function to Sell tokens already bought
        require(_outcome > 0, "Invalid outcome");
        require(closeTimestamp == 0, "Market already closed");

        // Remove  amount of shares to be sell
        for (uint j = 0; j < totalOutcomes; j++) {
            // Note: (1 << j) is equal to (1 x 2 ** j)
            if ((_outcome & (1 << j)) != 0) {
                q[j] = ABDKMath.sub(q[j], _amount);
                totalShares = ABDKMath.sub(totalShares, _amount);
            }
        }

        // Calculate new BETA parameter (taking into account new total shares and fixed alpha)
        b = ABDKMath.mul(totalShares, alpha);

        int128 sumTotal;
        for (uint i = 0; i < totalOutcomes; i++) {
            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(q[i], b)));
        }

        // Calculate new current cost and price to pay. After that, update current cost variable
        int128 newCost = ABDKMath.mul(b, ABDKMath.ln(sumTotal));
        int128 deltaCost = ABDKMath.sub(currentCost, newCost);
        currentCost = newCost;

        // Get token_cost amount of token from sender (as current payment)
        uint tokenCost = getTokenWei(token, deltaCost);
        require(tokenCost > 0, "Invalid cost");
        uint outcomeShares = getTokenWei(token, _amount);

        // Check that the received account have the amount of shares to sell
        if (_outcome == 1) {
            require(accountShares[_account].outcomeOneBalance >= outcomeShares, "Insufficient balance");
            accountShares[_account].outcomeOneBalance = accountShares[_account].outcomeOneBalance.sub(outcomeShares);
        } else if (_outcome == 2) {
            require(accountShares[_account].outcomeTwoBalance >= outcomeShares, "Insufficient balance");
            accountShares[_account].outcomeTwoBalance = accountShares[_account].outcomeTwoBalance.sub(outcomeShares);
        }

        // Transfer collateral tokens to received account
        require(IERC20(token).transfer(_account, tokenCost), "Invalid transfer");

        // Register SELL in market total and Account details
        totalSells = totalSells.add(1);
        accountShares[_account].sells = accountShares[_account].sells.add(1);
        accountShares[_account].withdrew = accountShares[_account].withdrew.add(tokenCost);

        emit SharesSold(_account, outcomeShares, tokenCost);
        return tokenCost;
    }

    function updateDates(uint256 _startTimestamp, uint256 _endTimestamp) public onlyOwner {
        startTimestamp = _startTimestamp;
        endTimestamp = _endTimestamp;
    }

    function reportResult(uint256 _id, uint256 _outcome) public onlyOracle {
        // Validate received inputs
        require(_id == id, "Invalid market");
        require(_outcome <= q.length, "Invalid outcome");

        // Check current state of the market
        require(block.timestamp > endTimestamp, "Market not ended");
        require(closeTimestamp == 0, "Market already closed");

        // Register reported results and register current time
        result = _outcome;
        closeTimestamp = block.timestamp;
    }

    function redeemShares() public onlyAfterSetup returns (uint256 shares) {
        return _redeem(msg.sender);
    }

    function _redeem(address _account) public onlyOwnerOrSelf returns (uint256 shares) {
        // Check current state of the market and received account
        require(closeTimestamp > 0, "Market not closed");
        require(accountShares[_account].redeemed == 0, "Shares already redeemed");

        // Get amount of shares to be redeemed for received account
        if (result == 1) {
            shares = accountShares[_account].outcomeOneBalance;
        } else if (result == 2) {
            shares = accountShares[_account].outcomeTwoBalance;
        }
        require(shares > 0, "Nothing to redeem");

        // Register amount of shares redeemed and send corresponding collateral tokens (ratio 1:1)
        accountShares[_account].redeemed = shares;
        require(IERC20(token).transfer(_account, shares), "Invalid transfer");

        emit SharesRedeemed(_account, shares, shares);
        return shares;
    }

    function redeemBatch(address[] memory _accounts) public onlyAfterSetup onlyOracle returns (uint256 redeems) {
        for (uint256 i = 0; i < _accounts.length; i++) {
            try this._redeem(_accounts[i]) {
                redeems.add(1);
            } catch {
                // `_redeem` call reverted, this could be a expected case
            }
        }
        return redeems;
    }

    function withdraw(address _token) public onlyAfterSetup onlyOwner {
        require(closeTimestamp > 0, "Market not closed");
        IERC20(_token).safeTransfer(msg.sender, IERC20(_token).balanceOf(address(this)));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    /**
     *  @notice Total amount of collateral spent in this Market
     *  For example, if a market was seeded with 2000 PRE and then a further 20 PRE has been spent,
     *  this function will return 2020 PRE.
     */
    function cost() public view onlyAfterSetup returns (int128) {
        int128 sumTotal;
        for (uint i = 0; i < totalOutcomes; i++) {
            sumTotal = ABDKMath.add(sumTotal, ABDKMath.exp(ABDKMath.div(q[i], b)));
        }
        return ABDKMath.mul(b, ABDKMath.ln(sumTotal));
    }

    /**
     *  This function will tell you the cost (similar to above) after a proposed BUY transaction.
     */
    function costAfterBuy(uint256 _outcome, int128 _amount) internal view returns (int128) {
        int128 newSumTotal;
        int128[] memory newQ = new int128[](q.length);
        int128 newTotalShares = totalShares;

        // Add new amount of shares to received outcome
        for (uint j = 0; j < totalOutcomes; j++) {
            // Note: (1 << j) is equal to (1 x 2 ** j)
            if ((_outcome & (1 << j)) != 0) {
                newQ[j] = ABDKMath.add(q[j], _amount);
                newTotalShares = ABDKMath.add(newTotalShares, _amount);
            } else {
                newQ[j] = q[j];
            }
        }

        // Calculate new cost based on newTotalShares and newQ values
        int128 newB = ABDKMath.mul(newTotalShares, alpha);
        for (uint i = 0; i < totalOutcomes; i++) {
            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newQ[i], newB)));
        }
        return ABDKMath.mul(newB, ABDKMath.ln(newSumTotal));
    }

    /**
     *  This function will tell you the cost (similar to above) after a proposed SELL transaction.
     */
    function costAfterSell(uint256 _outcome, int128 _amount) internal view returns (int128) {
        int128 newSumTotal;
        int128[] memory newQ = new int128[](q.length);
        int128 newTotalShares = totalShares;

        // Add new amount of shares to received outcome
        for (uint j = 0; j < totalOutcomes; j++) {
            // Note: (1 << j) is equal to (1 x 2 ** j)
            if ((_outcome & (1 << j)) != 0) {
                newQ[j] = ABDKMath.sub(q[j], _amount);
                newTotalShares = ABDKMath.sub(newTotalShares, _amount);
            } else {
                newQ[j] = q[j];
            }
        }

        // Calculate new cost based on newTotalShares and newQ values
        int128 newB = ABDKMath.mul(newTotalShares, alpha);
        for (uint i = 0; i < totalOutcomes; i++) {
            newSumTotal = ABDKMath.add(newSumTotal, ABDKMath.exp(ABDKMath.div(newQ[i], newB)));
        }
        return ABDKMath.mul(newB, ABDKMath.ln(newSumTotal));
    }

    /**
     *  This function tells you how much it will cost to make a particular BUY trade.
     *  It does this by calculating the difference between the current cost and the cost after the trade.
     */
    function buyPrice(uint256 _outcome, int128 _amount) public view returns (int128) {
        return ABDKMath.sub(costAfterBuy(_outcome, _amount), currentCost);
    }

    /**
     *  This function tells you how much it will cost to make a particular SELL trade.
     *  It does this by calculating the difference between the current cost and the cost after the trade.
     */
    function sellPrice(uint256 _outcome, int128 _amount) public view returns (int128) {
        return ABDKMath.sub(currentCost, costAfterSell(_outcome, _amount));
    }

    function getMarketInfo() public view returns (int128, int128, int128, int128, uint256, uint256) {
        if (q.length < 1) {
            return (0, 0, 0, 0, 0, 0);
        }
        // Note: q[0] = outcome 1 shares, q[1] = outcome 2 shares
        return (totalShares, q[0], q[1], currentCost, totalBuys, totalSells);
    }

    function getTokenWei(address _token, int128 _amount) public view returns (uint) {
        uint d = ERC20(_token).decimals();
        return ABDKMath.mulu(_amount, 10 ** d);
    }

    function getTokenEth(address _token, uint _amount) public view returns (int128) {
        uint d = ERC20(_token).decimals();
        return ABDKMath.divu(_amount, 10 ** d);
    }
}
